<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[PHP 的 GET & POST请求|数据库的写入和线上部署]]></title>
    <url>%2F2019%2F03%2F28%2FPHP%20%E7%9A%84%20GET%20%20POST%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%86%99%E5%85%A5%E5%92%8C%E7%BA%BF%E4%B8%8A%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[写在前面： JS 与用户进行通讯的时候，可以用 prompt 和 alert 。我们的服务器上面的 PHP 程序是如何得到用户的数据呢？用户的数据要干预程序的运行。就得通过 get 和 post 方法。 一、GET方法有时候在浏览器的地址栏观察网址，发现网络的地址是这样的http://lixin/com?k=v&amp;k=v? 后面的部分，不会影响我们访问哪个网页，这后面的 k=v 的数据，就是给后台语言看的。对于前台意义不大。借用实例来讲解：1234&lt;?php $b = $_GET[&quot;name&quot;]; echo $b; ?&gt; 请求结果：get：参数都体现在url上，可以用于跳转网页、翻页，简单查询，get 只能接收 2M 以下的内容，所以有只能输入 2048k 字节， 有局限性，另外由于内容是可见的，安全性就下降了， form表单有两个重要的属性：● method属性：提交表单的方法，是get还是post。如果写了get的话，那么提交表单的时候，就会通过URL地址的？来传递参数。● action属性：处理表单的php程序● name属性：获取ID用的。 二、数据库写入昨天学习的 SQL 语句中的查询，检索所有数据库条目SELECT * FROM xuesheng;如果想检索某一条条目用WHERE子句：SELECT * FROM xuesheng WHERE xingming = “小明”; 今天要学习的是写入，就是“增”INSERT INTO xuesheng(xingming,nianling,qqhao) VALUES (&#39;考拉&#39;,20,2435345)公式：INSERT INTO 表名(字段1,字段2,字段3) VALUES (值1,值2,值3) 三、模拟表单接收和数据库的写入 创建一个空白的数据库，表中只有字段，没有内容。 HTML 页面构建 连接数据库，使用GET方法，获取填写内容，进行数据库写入 空白数据库创建完成不进行内容填写。 2.HTML页面和填写内容 12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;表单提交和数据库写入模拟&lt;/title&gt; &lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;form action=&quot;index.php&quot; method=&quot;get&quot;&gt; 学习进度: &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;name1&quot; value=&quot;非常快&quot;&gt;非常快&lt;/label&gt; &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;name1&quot; value=&quot;一般&quot;&gt;一般&lt;/label&gt; &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;name1&quot; value=&quot;很慢&quot;&gt;很慢&lt;/label&gt; &lt;br&gt; 学习状态: &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;name2&quot; value=&quot;非常好&quot;&gt;非常好&lt;/label&gt; &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;name2&quot; value=&quot;很好&quot;&gt;很好&lt;/label&gt; &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;name2&quot; value=&quot;很差&quot;&gt;很差&lt;/label&gt; &lt;br&gt; 课程进度: &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;name3&quot; value=&quot;太快了&quot;&gt;太快了&lt;/label&gt; &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;name3&quot; value=&quot;正好&quot;&gt;正好&lt;/label&gt; &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;name3&quot; value=&quot;太慢了&quot;&gt;太慢了&lt;/label&gt; &lt;br&gt; 课堂建议： &lt;br&gt; &lt;textarea name=&quot;name4&quot; id=&quot;&quot; cols=&quot;35&quot; rows=&quot;5&quot;&gt;&lt;/textarea&gt; &lt;br&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt; &lt;/form&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 连接数据库，使用GET方法，获取填写内容，进行数据库写入 123456789101112131415161718192021222324&lt;?php //通过GET请求获取填写内容 $name1 = $_GET[&quot;name1&quot;]; $name3 = $_GET[&quot;name3&quot;]; $name2 = $_GET[&quot;name2&quot;]; $name4 = $_GET[&quot;name4&quot;]; //数据库的连接 $ccon = mysql_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;); mysql_select_db(&quot;students class info&quot;,$ccon); //数据库的写入 $result = mysql_query(&quot;INSERT INTO students(xuexijingdu,xuexichuantai,kechengjindu,jianyi) VALUES(&apos;&#123;$name1&#125;&apos;,&apos;&#123;$name2&#125;&apos;,&apos;&#123;$name3&#125;&apos;,&apos;&#123;$name4&#125;&apos;)&quot;); if($result ==1)&#123; echo &quot;表单成功接收!&quot;; &#125;else&#123; echo &quot;错误提交请重试!&quot;; &#125; //关闭数据库 mysql_close($ccon);?&gt; 实验结果页面内容填写完成点击提交。数据库信息：四、数据库的线上部署数据库的创建和表单的创建类似 sql_yog 本地的部署。本次演示使用的我的百度云主机，因为只有一个数据库，无法另外创建一个数据库进行演示。只能从表的创建开始。 登陆到主机后台，进入数据库管理页面。这里的数据库管理软件是 phpMyAdmin。点击操作，开始创建表。如下; 代码上传到服务器：一共两个文件HTML的和PHP的。超级无敌大坑：使用前面PHP代码上传到服务器，更改完连接数据库的地址密码等。错误！！！显示http 500 无法完成请求，加入显示具体错误的代码进行查找的！原因：连接PHP的方法只支持到PHP5.5以下的，尴尬！！！只能使用新方法PDO和mysqli，使用后者。参考连接：MySQL 插入数据 | 菜鸟教程 http://www.runoob.com/mysql/mysql-insert-query.html123456789101112131415161718192021222324252627&lt;?php //通过GET请求获取填写内容 $name1 = $_GET[&quot;name1&quot;]; $name3 = $_GET[&quot;name3&quot;]; $name2 = $_GET[&quot;name2&quot;]; $name4 = $_GET[&quot;name4&quot;]; //这两行代码扔出错误的提示信息，要不然新手的我找不到原因！！！ ini_set(&quot;display_errors&quot;,&quot;On&quot;); error_reporting(E_ALL); //数据库的连接 $ccon = mysqli_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;); mysqli_select_db( $ccon,&quot;DfvhWrXgzUsreEsAbSNI&quot;); //数据库的写入，两个参数 $result = mysqli_query($ccon,&quot;INSERT INTO students(xuexijingdu,xuexichuantai,kechengjindu,jianyi) VALUES(&apos;&#123;$name1&#125;&apos;,&apos;&#123;$name2&#125;&apos;,&apos;&#123;$name3&#125;&apos;,&apos;&#123;$name4&#125;&apos;)&quot;); if($result ==1)&#123; echo &quot;表单成功接收!&quot;; &#125;else&#123; echo &quot;错误提交请重试!&quot;; &#125; //关闭数据库 mysqli_close($ccon);?&gt; 就这个破玩意耽误我一下午。麻蛋！ 访问域名： 点击提交会显示提交成功。数据录入成功 五、POST请求POST请求是让用户的数据传输到服务器上，而不是利用URL，而是利用HTTP request报文头。HTTP是报文，requst、response都是以报文的形式传输的。报文的内容就是就是页面的内容，而报文的头部携带有很多信息。 GET请求非常好产生，我们每一次输入网址打开网站都是一次GET请求，GET请求利用的是URL。POST请求非常难于自己产生，必须借助表单。 POSt请求的好处： 安全，不会通过网址来暴露我们的表单； 内容不限量，post请求是可以无限量的，表单域填多少都没有问题。 POST请求的缺点： 地址不可以分享，很明显 post 请求不影响URL。 鉴于GET/POST的优点、缺点对比明显，工程上： GET 请求通常用于检索数据库的某一个条目， 比如news.php?id=4 POST 请求通常用于提交表单。]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>GET</tag>
        <tag>POST请求</tag>
        <tag>数据库的写入</tag>
        <tag>数据库线上部署</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[鼠标滚轮事件]]></title>
    <url>%2F2019%2F03%2F26%2F%E9%BC%A0%E6%A0%87%E6%BB%9A%E8%BD%AE%E4%BA%8B%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[滚动实现效果 代码实现思路：根据效果可知，静态页面一共需要四个盒子，其中最大的 box 相对定位，其他的三个盒子绝对定位。接下来一些常见样式的处理。难点在于事件的绑定实现。我的思路是，首先添加拖拽事件。然后通过改变绝对定位的样式，修改运动的top值。美化瑕疵：滚动条不和内容同步，首先根据内容与 box 的比例，和滚动条与 box 的比例得出，滚动条的clientHeight值，然后同步移动的问题，步长乘或除以比率 rate 就行了。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;滚动条&lt;/title&gt; &lt;style&gt; * &#123; margin: 0; padding: 0; &#125; .box &#123; height: 800px; width: 1500px; border: 1px solid #5e5e5e; margin: 100px auto; position: relative; overflow: hidden; &#125; .box .content &#123; position: absolute; padding: 40px 70px 40px 40px; &#125; .box .content p &#123; line-height: 75px; font-size: 16px; &#125; .box .bar &#123; position: absolute; right: 1px; top: 0; background-color: #ccc; width: 35px; height: 800px; &#125; .box .bar .rightBar &#123; width:35px; height: 70px; background-color: gold; position: absolute; top: 0; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot; id = &quot;box&quot;&gt; &lt;div class=&quot;content&quot; id = &quot;content&quot;&gt; &lt;p&gt;在安装苹果CMS之前，要先要在你的VPS上搭建LAMP环境。所谓的LAMP指的Linux+Apache+Mysql+PHP. 其中，你的操作系统ubuntu就是Linux。Apache是http服务器，浏览器通过服务器（也就是你的VPS）上的apache提供的服务才能获取到网页资源，从而显示在你的电脑屏幕上。Mysql是数据库，你的网站（这里即是苹果CMS）动态运行时所存取的数据都是由数据库来管理的。PHP与Apache相互配合为用户提供动态的网页，我们要安装的苹果CMS就是php语言编写的，他的运行必须依赖于PHP环境。&lt;/p&gt;&lt;p&gt;在安装苹果CMS之前，要先要在你的VPS上搭建LAMP环境。所谓的LAMP指的Linux+Apache+Mysql+PHP. 其中，你的操作系统ubuntu就是Linux。Apache是http服务器，浏览器通过服务器（也就是你的VPS）上的apache提供的服务才能获取到网页资源，从而显示在你的电脑屏幕上。Mysql是数据库，你的网站（这里即是苹果CMS）动态运行时所存取的数据都是由数据库来管理的。PHP与Apache相互配合为用户提供动态的网页，我们要安装的苹果CMS就是php语言编写的，他的运行必须依赖于PHP环境。&lt;/p&gt;&lt;p&gt;在安装苹果CMS之前，要先要在你的VPS上搭建LAMP环境。所谓的LAMP指的Linux+Apache+Mysql+PHP. 其中，你的操作系统ubuntu就是Linux。Apache是http服务器，浏览器通过服务器（也就是你的VPS）上的apache提供的服务才能获取到网页资源，从而显示在你的电脑屏幕上。Mysql是数据库，你的网站（这里即是苹果CMS）动态运行时所存取的数据都是由数据库来管理的。PHP与Apache相互配合为用户提供动态的网页，我们要安装的苹果CMS就是php语言编写的，他的运行必须依赖于PHP环境。&lt;/p&gt;&lt;p&gt;当然，既然是检测环境，当然会有某些检查项不符合要求的情况，万一哪一项不符合要求，这里会用红色高亮的色带将其标识出来。一般检测不通过都是因为系统中缺少某些插件，很简单自行百度解决。当这一步检测全部成功后，即可点击“进行下一步”按钮，此时进入如下界面： &lt;/p&gt;&lt;p&gt;在安装苹果CMS之前，要先要在你的VPS上搭建LAMP环境。所谓的LAMP指的Linux+Apache+Mysql+PHP. 其中，你的操作系统ubuntu就是Linux。Apache是http服务器，浏览器通过服务器（也就是你的VPS）上的apache提供的服务才能获取到网页资源，从而显示在你的电脑屏幕上。Mysql是数据库，你的网站（这里即是苹果CMS）动态运行时所存取的数据都是由数据库来管理的。PHP与Apache相互配合为用户提供动态的网页，我们要安装的苹果CMS就是php语言编写的，他的运行必须依赖于PHP环境。&lt;/p&gt;&lt;p&gt;在安装苹果CMS之前，要先要在你的VPS上搭建LAMP环境。所谓的LAMP指的Linux+Apache+Mysql+PHP. 其中，你的操作系统ubuntu就是Linux。Apache是http服务器，浏览器通过服务器（也就是你的VPS）上的apache提供的服务才能获取到网页资源，从而显示在你的电脑屏幕上。Mysql是数据库，你的网站（这里即是苹果CMS）动态运行时所存取的数据都是由数据库来管理的。PHP与Apache相互配合为用户提供动态的网页，我们要安装的苹果CMS就是php语言编写的，他的运行必须依赖于PHP环境。&lt;/p&gt;&lt;p&gt;在安装苹果CMS之前，要先要在你的VPS上搭建LAMP环境。所谓的LAMP指的Linux+Apache+Mysql+PHP. 其中，你的操作系统ubuntu就是Linux。Apache是http服务器，浏览器通过服务器（也就是你的VPS）上的apache提供的服务才能获取到网页资源，从而显示在你的电脑屏幕上。Mysql是数据库，你的网站（这里即是苹果CMS）动态运行时所存取的数据都是由数据库来管理的。PHP与Apache相互配合为用户提供动态的网页，我们要安装的苹果CMS就是php语言编写的，我走完了。我走完了。我走完了。&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;bar&quot; id = &apos;bar&apos;&gt; &lt;div class=&quot;rightBar&quot; id = &quot;rightBar&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script&gt; //使用 JS 得到要操作的对象,一共四个 var rightbar = document.getElementById(&quot;rightBar&quot;); var bar = document.getElementById(&quot;bar&quot;); var content = document.getElementById(&quot;content&quot;); var box = document.getElementById(&quot;box&quot;); // 计算比率rate，根据内容的多少去改变滚动条的长短。 var rate = content.clientHeight / box.clientHeight; rightbar.style.height = bar.clientHeight/rate + &quot;px&quot;; console.log(rate); //输出rate是否正确 //鼠标拖拽滚动事件 rightBar.onmousedown = function(event)&#123; detalY = event.clientY - rightBar.offsetTop; document.onmousemove = function(event)&#123; var y = event.clientY - detalY; //if 语句用于滚动条在bar 盒子里滚动，不会让top产生负数bug if(y &lt; 0)&#123; y = 0; &#125;else if(y &gt; bar.clientHeight - rightBar.clientHeight) &#123;y = bar.clientHeight - rightBar.clientHeight&#125; //让滚动条移动 rightBar.style.top = y + &quot;px&quot;; //滚动条移动多少就让内容移动乘或处以倍数，保持两者同步完成 content.style.top = - (y*rate) +&quot;px&quot;; &#125; &#125; //鼠标离开事件 document.onmouseup = function()&#123; document.onmousemove = null; &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 两个小难点： if 语句，刚开始搞不懂浏览器的边到 box 边的距离哪去了，所以不明白 if&lt;0 的意义。 滚动条的同步问题。计算比率rate = content.clientHeight / box.clientHeight= bar.clientHeight/ rightbar.style.height同步步长,比率大所以是乘。content.style.top = - (y*rate) +&quot;px&quot;; 未加overflow: hidden;观察的现象。 mousewheel]]></content>
      <categories>
        <category>基础前端</category>
      </categories>
      <tags>
        <tag>鼠标滚轮事件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[phpstudy 和 SQLYog 数据库的初体验]]></title>
    <url>%2F2019%2F03%2F25%2Fphpstudy%20%E5%92%8C%20SQLYog%20%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%88%9D%E4%BD%93%E9%AA%8C%2F</url>
    <content type="text"><![CDATA[一、环境搭建 phpstudy 安装包使用教程都在 PHP 中文网。下载链接：http://www.php.cn/xiazai/gongju SQLYog 华军软件园下载 http://soft.onlinedown.net/soft/24926.htm二、软件配置 phpstudy 的见于PHP中文网 SQLYog操作我们的数据库，后台操作数据库的方法就是使用 cmd 命令，但是我们前台使用图形化软件管理数据库。SQLYog， 是oracle甲骨文公司推出的一个图形化管理数据库的软件。 数据库就建立好了。物理路径在安装目录下：phpstudy\MySQL\data，这里面的数据都是加密的。你必须通过图形化界面来管理。 数据库建立好了之后，我们要建表。数据库中可以存放很多表。数据库相当于文件夹，表相当于excel文件。一个数据库中，可以有无数个表。表中的表头，比如姓名、年龄、qq号、手机号等等，这些叫做“字段”。MySQL是一个关系型数据库，要求每个表必须有固定的字段。字段一旦设置，将不能自由改变。为表添加数据 数据库里面有表， 表里面有字段。 字段就是表头，每条数据就是一行一行数据。 三、数据库功能实现12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;数据库&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;?php //连接数据库,只需要一行命令，就能链接数据库！ //$con就是一个变量，表示一次连接 $con = mysql_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;123456&quot;); //选择链接哪个库？ mysql_select_db(&quot;xueshengxinxi&quot;, $con); //更改数据操作字符集 mysql_query(&quot;SET NAMES UTF8&quot;); //执行SQL语句，就把检索结果放到了$result变量中 $result = mysql_query(&quot;SELECT * FROM xuesheng&quot;); //循环读取 while($row = mysql_fetch_array($result))&#123; echo $row[&apos;xingming&apos;]; echo $row[&apos;qqhao&apos;]; echo $row[&apos;shoujihao&apos;]; echo &quot;&lt;br /&gt;&quot;; &#125; //关闭数据库 mysql_close($con); ?&gt;&lt;/body&gt;&lt;/html&gt; 二零一一年之后，内嵌的PHP就不在流行，Ajax流行使用JSON来填数据。]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>phpstudy</tag>
        <tag>SQLYog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识 PHP和开发环境的搭建]]></title>
    <url>%2F2019%2F03%2F24%2F%E5%88%9D%E8%AF%86%20PHP%E5%92%8C%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[一、 认识PHPPHP全名：Hypertext Preprocessor，超文本预处理器。按理说应该叫做HPP，但是HPP难听，所以改名叫PHP。JS、CSS、HTML 都叫做前台脚本，是在客户端、浏览器端执行的。而PHP、JSP、ASP都是在服务器端运行的，叫做后台语言。任何后台语言，都需要部署环境，注意，是在服务器上部署环境。而普通的访问者，不需要安装特殊的环境，这是因为服务器传回来的就是普通HTML页面。服务器把PHP脚本已经做掉了，传回来的就是“压平”了的HTML页面，没有任何 PHP 痕迹。 JavaScript运行客户端、PHP运行在服务器上。所有的数据的增、删、改、查，都是服务器的业务，都是PHP的业务。所有的页面的样式、运动、交互、事件、表单验证都是 JavaScript 的业务。 PHP就是一个HTML中的内嵌语言：用&lt;?php ?&gt;来表示 php 的定界符，写在这个符号里面的语句，都是 PHP 语句。php 不能在本地直接拖入浏览器里面运行，因为 php 必须需要运行环境，我们的电脑上没有php环境，我们只能传到服务器上。在服务器上运行。 二、开发环境的搭建对我来讲两个选择，phpstudy 和 PHPnow。因为后者不更新，选择前者。安装包使用教程都在 PHP 中文网。下载链接：http://www.php.cn/xiazai/gongju 三、书写位置及方法 书写的标签一律写在：&lt;?php ?&gt;不能嵌套！能出现在任何位置！php页面的拓展名必须是.php，如果是 .html 的话，那么会视为静态页面，不解析。 输出语句PHP要求所有的语句必须加分号。如果不加是严重错误，将报错，后面的语句不予运行。PHP中输出语句，输出的是页面当前的位置，不是控制台。echo “something”;echo 是英语“回声”的意思，php利用这个词当做了输出语句。 比如：&lt;?php echo 1+2*3; ?&gt; echo也可以当做函数，把要输出的内容写在圆括号里面：&lt;?php echo(1+2*3); ?&gt;echo 默认不换行，如果想换行，自己用.当做连字符拼接标签。echo 78 . &quot;&lt;br \&gt; &quot;; 四、 变量12345变量以 $ 符号开头，其后是变量的名称变量名称必须以字母或下划线开头变量名称不能以数字开头变量名称只能包含字母数字字符和下划线（A-z、0-9 以及 _）变量名称对大小写敏感（$y 与 $Y 是两个不同的变量） php中的变量不需要用任何的单词来定义，不需要var，但是命名必须使用$开头，后面的规则和js一样。php中的变量，也是弱变量类型，不需要定义是什么类型的，传什么类型就是什么类型。 五、php的作用域php也没有块级作用域，就是if、for不产生作用域。function是有作用域限制的。但是php非常的有意思，一个全局变量，在一个函数内部，是不默认认识的。如果想在一个函数内部，认识一个全局变量，要在函数内部写global关键字：12345678910&lt;?php $a = 300; function fun()&#123; global $a; echo $a; &#125; fun();?&gt; 六、运算符和 js 一样的，就是连字符不一样，连字符是点→ . 七、数组123&lt;?php $a = array(&quot;东&quot;,&quot;南&quot;,&quot;西&quot;,&quot;北&quot;,&quot;中&quot;);3 echo $a[0];?&gt; echo语句不能输出数组的全貌，必须要使用print_r函数print_r($a);数组长度要用count()函数：echo count($a); 八、批量添加队列1234567891011121314&lt;?php $a = array(&quot;东&quot;,&quot;南&quot;,&quot;西&quot;,&quot;北&quot;,&quot;中&quot;);3?&gt; &lt;ul&gt; &lt;?php for($i = 0 ; $i &lt; count($a) ; $i++)&#123; ?&gt; &lt;li&gt;&lt;?php echo $a[$i]; ?&gt;&lt;/li&gt; &lt;?php &#125; ?&gt; &lt;/ul&gt; 也可以：1234567&lt;ul&gt; &lt;?php for($i = 0 ; $i &lt; count($a) ; $i++)&#123; echo &quot;&lt;li&gt;&quot;.$a[$i].&quot;&lt;/li&gt;&quot;; &#125; ?&gt;&lt;/ul&gt;]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP和开发环境的搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[拼图图片原理 2019-03-22]]></title>
    <url>%2F2019%2F03%2F23%2F%E6%8B%BC%E5%9B%BE%E5%9B%BE%E7%89%87%E5%8E%9F%E7%90%86%20%202019-03-22%2F</url>
    <content type="text"><![CDATA[原理解释：根据实际效果我们知道，图片被瓜分为大小相同的盒子，每个盒子绝对定位，小盒子里面放图片，通过调整小盒子里的图片位置来控制显示出来的区域，再由小盒子共同拼成一张大图。这就是我们看到的图片拼图。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;拼图轮播&lt;/title&gt; &lt;style&gt; *&#123; margin: 0; padding: 0; &#125; /*给每个盒子添加背景图、大小、定位*/ div &#123; height: 100px; width: 100px; border: 1px solid skyblue; background: url(images/befu.jpg); position: absolute; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;script src = &quot;js/jquery-1.12.3.min.js&quot;&gt;&lt;/script&gt; &lt;script&gt; //使用each 遍历 $(&quot;div&quot;).each(function(i)&#123; $(this).css(&#123; //设置默认样式 &quot;top&quot; : 200, &quot;left&quot; : 800, &quot;background-position&quot; : -i%8*100 + &quot;px &quot; + -parseInt(i/8)*100 + &quot;px&quot; // 超级无敌大坑中间px 后面有一个空格，空格后面必须有加号。 &#125;).delay(i*300).animate(&#123; //设置延迟，运动目的。 &quot;top&quot; : parseInt(i/8)*100, &quot;left&quot; : i%8*100, &#125;,1000); &#125;); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 可能大家看不懂 animate后面的运动目的地，它的计算公式怎么来的?特殊说明下： 我们一共把图分成八列五行使用each进行遍历的时候，编号从零开始到三十九。一共四十个盒子。我们在算目的地要求第一行0~7编号 top 为零，左边第一列0 8 16 32 编号 left 为零。以此类推第二列第二行……得出如下公式;均除以列数就行了top : parseInt(i/8)*100,left : i%8*100, 代码优化，写 div 太麻烦了，使用 jQuery 批量添加 div 盒子12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;拼图轮播&lt;/title&gt; &lt;style&gt; *&#123; margin: 0; padding: 0; &#125; /*给每个盒子添加背景图、大小、定位*/ div &#123; height: 100px; width: 100px; border: 1px solid skyblue; background: url(images/befu.jpg); position: absolute; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;script src = &quot;js/jquery-1.12.3.min.js&quot;&gt;&lt;/script&gt; &lt;script&gt; //创建div盒子代码 for(var row = 0; row &lt; 8;row++) for (var col = 0; col &lt;5 ; col++) &#123; var $div = $(&quot;&lt;div&gt;&lt;/div&gt;&quot;); $(&quot;body&quot;).append($div); &#125; $(&quot;div&quot;).each(function(i)&#123;//使用each 遍历 $(this).css(&#123; //设置默认样式 &quot;top&quot; : 200, &quot;left&quot; : 800, &quot;background-position&quot; : -i%8*100 + &quot;px &quot; + -parseInt(i/8)*100 + &quot;px&quot; // 超级无敌大坑中间px 后面有一个空格，空格后面必须有加号。 &#125;).delay(i*300).animate(&#123; //设置延迟，运动目的。 &quot;top&quot; : parseInt(i/8)*100, &quot;left&quot; : i%8*100, &#125;,1000); &#125;); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>基础前端</category>
      </categories>
      <tags>
        <tag>拼图图片原理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[百度分享按钮代码实例 2019-03-22]]></title>
    <url>%2F2019%2F03%2F22%2F%E7%99%BE%E5%BA%A6%E5%88%86%E4%BA%AB%E6%8C%89%E9%92%AE%E4%BB%A3%E7%A0%81%E5%AE%9E%E4%BE%8B%202019-03-22%2F</url>
    <content type="text"><![CDATA[实现思路： 使用绝对定位改变盒子位置 使用animate 改变定位盒子的的 left HTML和CSS搭建页面123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;百度分享效果&lt;/title&gt; &lt;style&gt; * &#123; margin: 0; padding: 0; &#125; .box &#123; width: 250px; height: 326px; position: absolute; left: -226px; top: 100px; &#125; .box .right &#123; background: url(images/分享.gif); position: absolute; height: 88px; width: 24px; right: 0; top: 120px; &#125; .box .left &#123; position: absolute; width: 226px; &#125; .box .left .topbox &#123; line-height: 24px; color: #626262; padding: 5px; text-align: left; font-size: 14px; background-color: #f6f6f6; border: 1px solid #e9e9e9; &#125; .box .left .centerbox &#123; padding: 5px 0 5px 7px; height: 277px; &#125; .box .left .centerbox ul&#123; list-style: none; padding-right: 3px; &#125; .box .left .centerbox ul li &#123; float: left; font-size: 12px; line-height: 18px; height: 18px; width: 72px; border:1px solid #fff; margin-right: 6px; padding: 5px 0 5px 28px; background: url(images/icons.png) no-repeat 6px -2437px; &#125; .box .left .centerbox ul li.first &#123; background: url(images/icons.png) no-repeat 6px -2437px ; &#125; .box .left .centerbox ul li.two &#123; background: url(images/icons.png) no-repeat 6px -46px ; &#125; .box .left .centerbox ul li.three &#123; background: url(images/icons.png) no-repeat 6px -98px ; &#125; .box .left .centerbox ul li.four &#123; background: url(images/icons.png) no-repeat 6px -149px ; &#125; .box .left .centerbox ul li.five &#123; background: url(images/icons.png) no-repeat 6px -200px ; &#125; .box .left .centerbox ul li.six &#123; background: url(images/icons.png) no-repeat 6px -253px ; &#125; .box .left .centerbox ul li.seven &#123; background: url(images/icons.png) no-repeat 6px -306px ; &#125; .box .left .centerbox ul li.eight &#123; background: url(images/icons.png) no-repeat 6px -358px ; &#125; .box .left .centerbox ul li.nine &#123; background: url(images/icons.png) no-repeat 6px -410px ; &#125; .box .left .centerbox ul li.ten &#123; background: url(images/icons.png) no-repeat 6px -462px ; &#125; .box .left .centerbox ul li.eveven &#123; background: url(images/icons.png) no-repeat 6px -514px ; &#125; .box .left .centerbox ul li a &#123; text-decoration: none; color: #565656; &#125; .box .left .bottombox &#123; position: absolute; bottom: 0; width: 216px; line-height: 26px; color: #626262; padding: 5px; text-align: right; font-size: 12px; padding-right: 10px; background-color: #f6f6f6; border: 1px solid #e9e9e9; &#125; .box .left .bottombox a &#123; background: url(images/icons.png) no-repeat; padding-left: 20px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;right&quot;&gt;&lt;/div&gt; &lt;div class=&quot;left&quot;&gt; &lt;div class=&quot;topbox&quot;&gt;分享到&lt;/div&gt; &lt;div class=&quot;centerbox&quot;&gt; &lt;ul&gt; &lt;li class = &apos;first&apos;&gt;&lt;a href=&quot;&quot;&gt;一键分享&lt;/a&gt;&lt;/li&gt; &lt;li class = &apos;two&apos;&gt;&lt;a href=&quot;&quot;&gt;QQ空间&lt;/a&gt;&lt;/li&gt; &lt;li class = &apos;three&apos;&gt;&lt;a href=&quot;&quot;&gt;新浪微博&lt;/a&gt;&lt;/li&gt; &lt;li class = &apos;four&apos;&gt;&lt;a href=&quot;&quot;&gt;百度云收藏&lt;/a&gt;&lt;/li&gt; &lt;li class = &apos;five&apos;&gt;&lt;a href=&quot;&quot;&gt;微信&lt;/a&gt;&lt;/li&gt; &lt;li class = &apos;six&apos;&gt;&lt;a href=&quot;&quot;&gt;人人网&lt;/a&gt;&lt;/li&gt; &lt;li class = &apos;seven&apos;&gt;&lt;a href=&quot;&quot;&gt;腾讯微博&lt;/a&gt;&lt;/li&gt; &lt;li class = &apos;eight&apos;&gt;&lt;a href=&quot;&quot;&gt;百度相册&lt;/a&gt;&lt;/li&gt; &lt;li class = &apos;nine&apos;&gt;&lt;a href=&quot;&quot;&gt;开心网&lt;/a&gt;&lt;/li&gt; &lt;li class = &apos;ten&apos;&gt;&lt;a href=&quot;&quot;&gt;疼腾朋友&lt;/a&gt;&lt;/li&gt; &lt;li class = &apos;eleven&apos;&gt;&lt;a href=&quot;&quot;&gt;百度贴吧&lt;/a&gt;&lt;/li&gt; &lt;li class = &apos;twelve&apos;&gt;&lt;a href=&quot;&quot;&gt;豆瓣网&lt;/a&gt;&lt;/li&gt; &lt;li class = &apos;thirteen&apos;&gt;&lt;a href=&quot;&quot;&gt;百度新首页&lt;/a&gt;&lt;/li&gt; &lt;li class = &apos;fifteen&apos;&gt;&lt;a href=&quot;&quot;&gt;QQ好友&lt;/a&gt;&lt;/li&gt; &lt;li class = &apos;sixteen&apos;&gt;&lt;a href=&quot;&quot;&gt;和讯微博&lt;/a&gt;&lt;/li&gt; &lt;li class = &apos;seventeen&apos;&gt;&lt;a href=&quot;&quot;&gt;百度中心&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;bottombox&quot;&gt;&lt;a herf = &apos;#&apos;&gt;更多...&lt;/a&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script src = &quot;js/jquery-1.12.3.min.js&quot;&gt;&lt;/script&gt; &lt;script&gt; $(&quot;.box&quot;).mouseenter(function()&#123; $(&quot;.box&quot;).stop(true).animate(&#123;&quot;left&quot; : 0&#125;,400); &#125;); $(&quot;.box&quot;).mouseleave(function()&#123; $(&quot;.box&quot;).stop(true).animate(&#123;&quot;left&quot; : -226&#125;,400); &#125;); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>基础前端</category>
      </categories>
      <tags>
        <tag>百度分享按钮代码实例</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[鼠标指针实现拖拽]]></title>
    <url>%2F2019%2F03%2F22%2F%E9%BC%A0%E6%A0%87%E6%8C%87%E9%92%88%E5%AE%9E%E7%8E%B0%E6%8B%96%E6%8B%BD%2F</url>
    <content type="text"><![CDATA[实现思路： 移动对象绝对定位 计算移动距离 移动对象跟随鼠标 添加 JS 监听按下松开 需要补充的知识：document 的冒泡事件与捕获事件JavaScript offset 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;鼠标指针实现拖拽&lt;/title&gt; &lt;style&gt; div&#123; position: absolute; top: 0; left: 0; width: 140px; height: 172px; background-color: skyblue; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;img src=&quot;images/duck.gif&quot; alt=&quot;&quot; /&gt;&lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; //得到元素 var oDiv = document.getElementsByTagName(&quot;div&quot;)[0]; //监听里面放监听。JS的奇淫技巧。 //当oDiv触发了onmousedown事件的情况下，docuent才有onmousemove事件 oDiv.onmousedown = function(event)&#123; //鼠标按下去的时候，就要记录鼠标在盒子中的位置，这个位置实际上就是误差 var deltaX = event.clientX - oDiv.offsetLeft; var deltaY = event.clientY - oDiv.offsetTop; //整个文档添加mousemove事件，鼠标移动的时候触发 document.onmousemove = function(event)&#123; //减去误差 oDiv.style.left = event.clientX - deltaX + &quot;px&quot;; oDiv.style.top = event.clientY - deltaY + &quot;px&quot;; event.preventDefault(); //小聪明 &#125; &#125; //鼠标抬起 document.onmouseup = function()&#123; //document身上的监听，设置为null，删除了监听 document.onmousemove = null; &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 遇见的问题： 对象内移动鼠标，移动对象不应移动，解决办法计算盒子 div 外边到 client 的距离 。 案例在实现过程中，拖拽图片时，当我们松开鼠标，移动对象仍然跟着鼠标，并未停止。解决办法就是去除浏览器图片默认移动。代码位于小聪明处event.preventDefault(); //小聪明。2019-03-22]]></content>
      <categories>
        <category>基础前端</category>
      </categories>
      <tags>
        <tag>鼠标指针实现拖拽</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[document 的冒泡事件与捕获事件]]></title>
    <url>%2F2019%2F03%2F17%2Fdocument%20%E7%9A%84%E5%86%92%E6%B3%A1%E4%BA%8B%E4%BB%B6%E4%B8%8E%E6%8D%95%E8%8E%B7%E4%BA%8B%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[为什么这么写onclick 明显比addEventListener兼容好： 避免事件覆盖jQuery中用的就是我们的DOM2级，也有轮子。jQuery事件同名不会被覆盖。一、初识事件流事件流：简单来讲就是触发事件完成的整个过程。“事件流”描述的是页面上各个元素监听事件的顺序。事件流包括： 冒泡事件 捕获事件 直接上案例说明，下图。 这就是我们平常我们写的盒子套盒子的代码。触发从我们直接点击的盒子开始一直到属于监听内容的事件结束。所以先后显示顺序 box3 box2 box1。这种写法属于 DOM0 级写法，无法监听捕获事件，只能监听冒泡事件。这里需要注意，在IE9、Chrome里面，事件会冒泡到window对象，而IE6、7、8仅仅冒泡到document对象。另外，用这种方法绑定的监听，this指的是触发这个事件的元素，没有任何的浏览器兼容问题。DOM0级还有一种写法，直接将监听写在标签里面，像行内样式一样不许用：&lt;div id=&quot;box1&quot; onclick=&quot;alert(&#39;我是box1&#39;);&quot;&gt;DOM 0级特点： 只监听冒泡 程序会覆盖 捕获事件恰好与冒泡事件显示顺序相反。首先熟悉一个新函数addEventListener add:添加 Event:事件 Listener:监听，它写的代码属于 DOM2级事件。它接受三个参数：什么事件、函数、是否监听捕获阶段。oBox.addEventListener(&quot;click&quot;,function(){ },false);第1个参数：事件名不用写on， click、mouseover 、mouseout第2个参数：函数可以是匿名函数，也可以是有名函数第3个参数：布尔值，true表示监听捕获、false表示监听冒泡阶段,不填默认 false。把上面「冒泡实例」的实例改成此函数，变成捕获事件，则结果显示顺序是 box1 box2 box3。注意：addEventListener可以重复添加相同事件名的事件，不会覆盖，仍按顺序执行虽然我们现在不理解机理，但已经掌握冒泡捕获的本质。代码会按顺序执行 先捕获后冒泡 二、原理探究根据演示效果我们知道代码执行顺序。 捕获阶段capture phase [feɪz]、冒泡阶段bubbling[‘bʌblɪŋ] phase 三、低版本IE的事件绑定IE6、7、8不支持addEventListener()方法，支持 oDiv.attachEvent(“onclick”,函数);没有第三个参数，也就是说，不能选择监听捕获、冒泡。只能监听冒泡。 box1.attachEvent(“onclick”, function(){alert(“box1”); });第一个参数，必须写on，和addEventListener()不一样；第二个参数，就是事件处理函数没有第三个参数，只能监听冒泡。所以和on***写法一样。 低版本IE的事件监听attachEvent事件处理函数里面的this，不是触发事件的这个元素，而是window对象！ box1.attachEvent(“onclick”, function(){ alert(this === window); //true }); 同一个事件名的多个监听，会反着执行： box1.attachEvent(“onclick”, function(){ alert(1); }); box1.attachEvent(“onclick”, function(){ alert(2); }); box1.attachEvent(“onclick”, function(){ alert(3); });弹出3、2、1。 处理addEventListener 与 attachEventattachEvent 里面的第一个参数与 addEventListener 的写法不同，且attachEvent 没有第三个参数。1234567891011121314151617181920212223&lt;script &gt; //绑定事件，三个参数。 //第一个参数，需要绑定事件的元素 //第二个参数，事件名，没有on //第三个参数，事件处理函数 function addEvent(obj,eventtype,fn)&#123; if(obj.addEventListener)&#123; obj.addEventListener(eventtype,fn,false); &#125;else if(obj.attachEvent)&#123; obj.attachEvent(&quot;on&quot; + eventtype,function()&#123; fn.call(obj); &#125;); &#125;else&#123; obj[&quot;on&quot; + eventtype] = fn; &#125; &#125; var oDiv = document.getElementsByTagName(&quot;div&quot;)[0]; addEvent(oDiv,&quot;click&quot;,function()&#123; this.style.backgroundColor = &quot;red&quot;; &#125;); &lt;/script&gt; 四、事件对象 event123456789101112131415161718192021222324252627&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt; &lt;/title&gt; &lt;style&gt; div &#123; height: 200px; width: 200px; background-color: #333; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id = &quot;box&quot;&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt; &lt;script&gt; var odiv = document.getElementById(&quot;box&quot;); odiv.onclick = function(event)&#123; console.log(event.clientX,event.clientY); console.log(event.type); console.log(event.target); console.log(event.currentTarget); console.log(event.bubbles); &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 通用事件对象属性和方法:● event.type 返回事件的类型，没有on， 比如”click”● event.target 返回你点击的最小的那个元素，即使这个元素身上没有监听，也是返回它● event.currentTarget 返回自己，this一定和event.currentTarget是一个元素，都是自己● event.bubbles 返回一个布尔值，表示这个事件是否冒泡比如onmouesover的event.bubbles就是true;但是onmouseenter的 event.bubbles就是false;● stopPropagation() 停止传播事件流 event.stopPropagation(); ● preventDefault() 阻止默认事件event.preventDefault(); 五、 clientX、clientY、screenX、screenY、pageX、pageYclientX表示鼠标的位置，距离浏览器窗口左边边的距离 clientY表示鼠标的位置，距离浏览器窗口上边边的距离 screenX表示鼠标的位置，距离屏幕左边边的距离 screenY表示鼠标的位置，距离屏幕上边边的距离]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>冒泡事件</tag>
        <tag>捕获事件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[毕业论文答辩日-2019.03.16]]></title>
    <url>%2F2019%2F03%2F16%2F%E6%AF%95%E4%B8%9A%E8%AE%BA%E6%96%87%E7%AD%94%E8%BE%A9%E6%97%A5-2019.03.16%2F</url>
    <content type="text"><![CDATA[先讲讲我最近的总结，最后在讲今天的事，进入公司入职已经半个多月了，在总结了上次的教训，这次很好的吸取了经验。工作上比较获得同事的认可，有时候没有活的话，我就想躲起来看会前端的书，所以我认为表现还是有点不够，同时在交流沟通还是我的弱项，虽然我性格不是太开朗，但正常的沟通还是有点小问题，最典型的例子就是这个周四十四号的时候，去拿工资卡，我在组长交给我送电池进组，就独自离开去三号食堂领卡，这是一不对，当我发现并不能在预期返回，并没进行说明，导致组员不知我身处何地。经过这件事领悟的经验不要害怕讲出自己的需求，不然会有很多不必要的麻烦产生。其他方面表现良好，没发现问题。 这一周我上班几乎每天都是晚上三点左右睡，然后早上七点起，准时去上班，虽然看起来睡眠时间过短了，但并没影响我日常工作和生活表现。我认为这事是在可控的范围，但接下来就尴尬了，我两次重要时刻迟到。 第一个：年前在合肥找工作，经同学介绍去二轮面试。结果依然是晚上三点睡得，早上起来马上赶去面试地点，虽然没耽误事，可还是迟到了几分钟。 第二个：因为今天要毕业答辩要上交论文，昨天晚上我就对论文进行修修补补，打算早点睡，谁知道本来论文的查重率在百分二十五六，结果越改越高，等到我改到凌晨四点钟的时候，论文的查重率竟然上升到了百分之五十八，我还能说什么，我花了一整夜把论文一句一句的改，结果查重率越查越高，真是活见鬼。现在想想可能是因为我用的查重软件有问题，做了手脚，把我的文档上传了。因为睡得晚，第二天的闹钟也没感受到太大的动静，果然又是七点起，坐车到学校都九点半了，去三创打印出来三份论文都十点了，没错我迟到了。其实我对自考的事情看的很重，尤其是这最后的答辩机会，我只所以一直呆在合肥，留在学校。答辩是留住我的主要原因，没想到我准备那么久还是出披露了。 经过这两件事，别的我不管就一条凡是第二天我有比较重要的事情，头天晚上必须十二点之前上床睡觉记住现在的态度。 再来点伤感的吧。经过实习这段时间我很想回到学校，我这个人对钱不是很着迷，对生活品质的要求也不是很高，只希望能体验感受不同的人生。学校就是我人生的避风湾。当我在公交上的时候内心十分的波澜起伏，但当我下了公交车，到校门口内心反而非常的平静。瞬间摒弃一切的杂念，那感觉就像是回到了学生时代。看着学校一草一木一切好像都没变。我到校匆匆参加完答辩后，答辩是很垃圾的啦，符合我的预期，论文写什么不重要，最重要的是体例格式。做完这些也十一点多了，同学江老板跟老师玩去了，学校没人我就去后街去过几次的「黄焖鸡米饭」吃饭，就我整整吃了一个多小时吧，我也不知道吃多长时间了。反正每次我吃饭时间都不断。坐着吃饭看着门外的行人（主要是美女~~）脑子里不知想些什么。大学的感觉。就是我对面少了朱邦迪。 下午去看了学校，大致走了一遍，关于此省略1234最后，等江老板回来，在食堂吃了饭，送我到校门口就走了。我性格不太和人过多的接触，但我很喜欢江老板，只是整个大学一直回到宿舍就打游戏，没给我机会。。。外冷内热恐怕是我最大的特点，估计很少有同学注意每次放学放假我总是最后一个离开。对了，我还是战胜不了自己，去了我大学最后悔的地方。虽然有些事已经过去了 晚上回来有点小插曲，一个学妹QQ联系我，我以为是盗号了，马上求证，后来聊嗨了手机没电，错过公交打车回来，钱呀。2019.03.17]]></content>
      <categories>
        <category>毕业论文答辩</category>
      </categories>
      <tags>
        <tag>我的随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[你不知道&我关注的几个博客]]></title>
    <url>%2F2019%2F03%2F13%2F%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%26%E6%88%91%E5%85%B3%E6%B3%A8%E7%9A%84%E5%87%A0%E4%B8%AA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[这两天建网站，在找资源的时候遇到几个不错的博客网站，虽然大多数人的博客很垃圾，但还是有人能做的很好。现在博客主的网站基本分两派： 第一派，网站排版使用经典款式，更新也是四平八稳，整体质量还行，但因为更新太勤导致质量不是同一水准，文章水平有高有低，有时候还会有广告，不过一般他们技术很强。 另一派，应该来讲基本是上大学或刚上完大学层次的小白，网站是最炫酷的，文章量特别少，但基本能很快的解决我这等初级武林人士的麻烦。大大的潜力股。 我放在这里的博客也恰好分为两类，一种是发资源的，一种是讲程序进阶学习的。我只做简单的整理，可能会有点乱。 一、网络资源篇 大橙影视主题 http://vfed.cc/博主是买大橙子主题（vfed）的，我非常喜欢他的这个影视网站模板，简洁，让人看着很舒服。如果你也想做网站，又没什么技术基础，可以使用这个配合苹果CMS，小白入门的完美组合。使用这个模板建的是不是看着不错 艾柯资源网http://www.aikezy.cn/-分享网络-个人精品资源整合全网教程与资源分享主打是箭头标的四个模块，总体评价不错。首先：就是网站源码不错，我看中了这几款。https://ws3.sinaimg.cn/large/005BYqpgly1fyn88hk5koj31hc0pngzk.jpg这几个只是我随便挑的，里面的源码特别的使用，强烈推荐！！！ 里面的网站源码涵盖范围广，且比较使用，质量很高。还有这个超强 API 多个随机图片壁纸api 刷新网页换背景接口除了干货还有老司机区，和 fan wall 区，是不是很不错。 阳光艺创站-行在路上，赢在路上 https://www.ycygame.cn/虽然首页是丑了点，但是里面也是满满的干货，而且没广告，下载链接也没设门槛。很良心了。推推荐荐！！！ 森七博客https://www.mosq.cn/post-304.html主要是看中了他的小工具。如下图 风哥的博客 http://www.noome.cn/更新频繁并且实用很不错。 写到这里才发现纯技术的小站长博客接本没有没有，多是两者之间的融合。也好学好知识还能进行实战。就这到这吧，遇见好的博客在更新添加。2019.01.13好酷资源https://www.qchk.net/纯洁博客http://www.13bk.cn/不写了就到这完了，同质化太高了。2019.03.16]]></content>
      <categories>
        <category>我的随笔</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学会苹果 CMS 系统，搭建影视网站]]></title>
    <url>%2F2019%2F03%2F12%2F%E5%AD%A6%E4%BC%9A%E8%8B%B9%E6%9E%9C%20CMS%20%E7%B3%BB%E7%BB%9F%EF%BC%8C%E6%90%AD%E5%BB%BA%E5%BD%B1%E8%A7%86%E7%BD%91%E7%AB%99%2F</url>
    <content type="text"><![CDATA[一、网站安装 苹果 CMS 建站系统。苹果 CMS 是一套成熟稳定的资源管理系统，可以用来搭建自己的影视网站。现在网络上大量的在线观看电影的网站，有很大一部分都是采用苹果CMS搭建的。它具有很多优点，包括一键建站、配置简单、资源采集方便等等。这里介绍一下搭建苹果CMS系统的方法，以及其配置方法。（可以先看一下我自己搭建的网站：考拉影院） 一、申请一个属于自己的VPS主机 小白自建网站教程 二、搭建LAMP环境 在安装苹果CMS之前，要先要在你的VPS上搭建LAMP环境。所谓的LAMP指的Linux+Apache+Mysql+PHP. 其中，你的操作系统ubuntu就是Linux。Apache是http服务器，浏览器通过服务器（也就是你的VPS）上的apache提供的服务才能获取到网页资源，从而显示在你的电脑屏幕上。Mysql是数据库，你的网站（这里即是苹果CMS）动态运行时所存取的数据都是由数据库来管理的。PHP与Apache相互配合为用户提供动态的网页，我们要安装的苹果CMS就是php语言编写的，他的运行必须依赖于PHP环境。 关于LAMP环境的搭建方法，网上有太多的教程，这里不介绍具体的安装方法，请自行在百度中搜索，其安装很简单，在ubuntu下使用apt-get命令即可安装。 三、安装苹果CMS 首先，到苹果CMS官网上下载安装包，上传到网站根目录，然后在你的浏览器中访问 http://你的ip地址或域名/install.php 即可进入安装界面，如下所示： 然后，点击“同意协议并安装系统”，此时进入下面的环境监测界面。安装程序会检查一下你的vps上所安装的插件是否符合苹果CMS的要求，只有符合要求时，苹果CMS才能正常运行，因此这一步的检测是必要的。 当然，既然是检测环境，当然会有某些检查项不符合要求的情况，万一哪一项不符合要求，这里会用红色高亮的色带将其标识出来。一般检测不通过都是因为系统中缺少某些插件，很简单自行百度解决。当这一步检测全部成功后，即可点击“进行下一步”按钮，此时进入如下界面： 这里有关数据库的信息，按照你的MySQL中的实际配置填写就好，目的是让苹果CMS通过这些参数能够登录到你的MySQL上，只有这样，苹果CMS才能使用数据库读写所需的数据。 下面的管理员账号密码是你日后用来登录苹果CMS后台时所需的用户名和密码，请设置一个足够长，并且足够安全，不易被破解的密码并牢记它。 最后，点击“立即执行安装”按钮，稍等片刻即安装成功。此时，在浏览器中输入 http://你的vps的ip地址或域名/index.php 即可看到苹果CMS的主页（即前台界面）。这个页面就是外界访问你的站点时看到的首页。 在浏览器中输入 http://你的vps的ip地址或域名/admin.php 即可登录苹果CMS后台管理界面。在后台管理页面，你可以做与你的站点相关的一切设置，包括采集视频、设置播放器、更换模板、设置SEO优化等等。这部分内容十分繁杂，只有成功采集到视频数据后，你的网站上才有内容，别人才能够在你的网站上观看视频，否则你的网站就是空的，没什么实质性内容。 这里只简单介绍一下如何采集系统自带的资源站的数据，如下如所示的步骤操作即可： 采集时可能会报错“分类未绑定”，这是因为你的站点的电影分类与资源站上的电影分类没有建立一一对应关系，因此，苹果CMS并不知道资源站上的A分类对应到你的站点上是哪一个分类。此时只需绑定分类即可，这些操作都不难，稍加摸索即可上手。 到这里只讲了苹果CMS的安装和配置，至于（自定义）采集视频、站点的高级设置、网站SEO优化等高阶话题，可以参看其它资料。 下面讲我基于以上基础怎么安装好 CMS 使用 vfed （大橙子）主题其他主题类似搭建影视网站的。 二、上传模板把解压的 vfed主题 上传到网站的 template 文件里。打开后台：vfed主题设置默认会自动添加到快捷菜单，如果没显示请点击快捷菜单配置，手动添加vfed主题设置,/index.php/label/adminvfed采集资源,/index.php/label/union设置完成后保存刷新即可 三、采集影视资源以下三种方法任选一种。 自定义采集点，我用的几个资源采集网站： 影视资源导航_影视资源采集导航网 http://dh.pv00.com/ 永久资源http://yongjiuzy.cc/?m=vod-type-id-1.html 伦理片 http://doubanzy.com/?m=vod-type-id-19.html 使用主题自带的影视采集资源 使用苹果 CMS 自带的采集联盟采集。还可以更换插件。详情苹果CMSV10免费采集插件+播放器文件，整合各大影视资源采集站，影视站长福利！http://www.xiaolinwl.com/post/15.html四、采集采集 自定义资源库完成后点击自己绑定的链接，接下来绑定分类，进行采集。参考第一步的教程。三、播放器添加基本一个采集网址单配一个播放器，所以只要换了采集网址就得加与之匹配的播放器。 如果使用主题采集的。 点击首页 -&gt; vfed采集资源，找到你想采集的资源站，点击播放配置完成添加，不然电脑无法播放。 一般主题会自己带播放器。（想用另一个主题的播放器，上传另一个主题同样配置方式。）这样就不要每个网站都设置，使用别人的播放器了。下面看方法。首先得看主题播放器支持什么格式的。这里支持 M3U8 的。 再去看来源，点击采集链接就能跳到下面页面。 配置播放器 到这里如果你立马去看视频会发现可以播放了，但是也会发现影片播放区有大家常见的广告。而我们的播放器是不带广告的，原因就是你没让我们的播放器去解析视频。所以但我们保存完成之后要把解析状态设为启用，这样就行了，而且没有广告。 自定义网站采集的两种播放器配置的方法。 TXT格式直接导入，在采集功能的旁边。 JS格式 打开JS代码添加进去 最后启用，就 ojbk 了。 四、定时采集自己绑定 360 监控，简单使用的百度。]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>CMS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[手风琴实例]]></title>
    <url>%2F2019%2F03%2F11%2F%E6%89%8B%E9%A3%8E%E7%90%B4%E5%AE%9E%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[手风琴实现思路： 使用 ul 写结构，h3 显现，把要显现的内容 content 隐藏 通过点击效果，使用 slideDown SlideUp 动画实现 使用 slideToggle 实现两次点击显示隐藏 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xml:lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123; margin: 0; padding: 0; &#125; .accordion&#123; width: 500px; margin: 100px auto; border: 1px solid #000; &#125; .accordion ul&#123; list-style: none; &#125; .accordion ul li.cur h3&#123; background-color: orange; &#125; .accordion ul li h3&#123; line-height: 40px; background-color: skyblue; padding: 0 10px; border-bottom: 1px solid #000; color:white; cursor: pointer; position: relative; &#125; .accordion ul li .content&#123; padding: 10px; line-height: 150%; font-size: 16px; display: none; &#125; .accordion ul li.first .content&#123; display: block; &#125; .accordion ul li i&#123; position: absolute; right: 10px; top: 10px; width: 16px; height: 16px; background-color: yellow; background: url(images/icon.png); /*css3的过渡*/ transition:all 1s ease 0s; &#125; .accordion ul li.cur i&#123; /*有cur的时候转90度*/ transform:rotate(90deg); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;accordion&quot;&gt; &lt;ul&gt; &lt;li class=&quot;cur first&quot;&gt; &lt;h3&gt;授课时长和授课模式是怎么样的？&lt;i&gt;&lt;/i&gt;&lt;/h3&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt; 一共88个教学日，上2天休息1天，每个月能上22天课，所以总时长一共4个月（预计毕业时间是7月22日）。教学时间为上午9:00~12:00 ，下午14:30~17:30， 晚自习时间为18:30~20:30。 &lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;h3&gt;是否有远程班？周末班？&lt;i&gt;&lt;/i&gt;&lt;/h3&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt; 爱前端目前只有脱产实体班，仅在北京校区开设，课程时间4个月（包括休息日）。目前爱前端没有远程班、周末班。欢迎你留意我们的官方网站。 &lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;h3&gt;是否有班主任和学习辅导员？&lt;i&gt;&lt;/i&gt;&lt;/h3&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt; 实事求是的说，爱前端刚刚成立，所以我们人手不够，任课老师就同时兼任班主任和辅导员了。我们的任课老师同时也将负责学生考勤，监督学生不要迟到早退，维护课堂纪律，上课睡觉、课间打游戏、大声喧哗都是不可能的。 &lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;h3&gt;课程难么？&lt;i&gt;&lt;/i&gt;&lt;/h3&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt; 我们的课程有一定难度，但只要认真学习，完整学习下来是没有问题的。每位老师上课会细致入微，形象生动，可以辅导每位同学。所以不用担心自己的理解能力跟不上。 &lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery-1.12.3.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; //监听h3 $(&quot;.accordion ul li h3&quot;).click(function()&#123; //所有的content合上 $(&quot;.content&quot;).slideUp(); //自己的兄弟content显示 if($(this).siblings(&quot;.content&quot;).is(&quot;:visible&quot;))&#123; //如果自己的内容兄弟可见， //自己的内容兄弟合上，变为不可见。自己的爸爸去掉cur $(this).siblings(&quot;.content&quot;).stop(true).slideUp(); $(this).parent().removeClass(&quot;cur&quot;); &#125;else&#123; //反之，如果自己的内容兄弟不可见 $(&quot;.cur&quot;).removeClass(&quot;cur&quot;); //自己的爸爸加上cur $(this).parent().addClass(&quot;cur&quot;); //自己的内容兄弟下滑，变为可见 $(this).siblings(&quot;.content&quot;).stop(true).slideDown(); &#125; &#125;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>基础前端</category>
      </categories>
      <tags>
        <tag>手风琴实例</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery 中的节点关系（下）]]></title>
    <url>%2F2019%2F03%2F11%2FjQuery%20%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%8B%EF%BC%89%2F</url>
    <content type="text"><![CDATA[相比较于原生节点关系 jQuey 屏蔽掉了浏览器兼容问题，不存在空文本节点，JQuery 全部默认选择nodeType=1 的元素。不选择文本、注释等等。并且不用for循环了，一次性得到所有东西了。 下面 jQuery 介绍的都是方法！而且里面暗含了迭代器。 一、往下查找的方法1. children()方法儿子节点，所有亲儿子，孙子不在 children() 里面。 2. find() 方法所有后代元素。和 children() 不一样，children()返回的是自己的亲儿子元素列表，而find()返回的是自己的后代所有元素的列表。 注意，和 children() 方法不一样，find() 方法里面，必须写参数，表示后代的谁？说白了 find 是寻找的意思，就是你要在后代寻找谁。 二、往上查找的方法3. parent() 方法亲爸爸。任何元素都只有一个亲爸爸。 4.parents()这个元素的所有的祖先节点。 三、横向查询5.siblings()方法所有的亲兄弟排他，再也不用担心写 for 循环了：$(this).addClass(&quot;cur&quot;).siblings().removeClass(&quot;cur&quot;);我加cur，我的兄弟们去cur。特注：此例子代码可用于轮播图小圆点的监听。 6. prev()、next()、prevAll()、nextAll()前一个兄弟、后一个兄弟、前所有兄弟、后所有兄弟。]]></content>
      <categories>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>jQuery 中的节点关系</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[原生 JS 中的节点关系（上）]]></title>
    <url>%2F2019%2F03%2F10%2F%E5%8E%9F%E7%94%9F%20JS%20%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%8A%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1、 原生JS中nodeType属性节点属性类型：任何的HTML元素，都有nodeType属性，值有1~11，这里精简到了5个：1： 元素节点3： 文本节点8： 注释节点9： document节点10: DTD12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;节点&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;box&quot;&gt; 节点&lt;/div&gt; &lt;script&gt; var box = document.getElementById(&quot;box&quot;); alert(box.nodeType); //弹出 1 alert(box.childNodes[0].nodeType); //3 &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 只有alert(document.nodeType); 结果为 9。 2、原生JS中的节点关系-childNodes我为了好记叫（儿子数组）任何节点都有childNodes属性，是一个类数组对象，存放着所有自己的儿子。注意，这里有重大兼容性问题：空白文本现象结构123&lt;div id=&quot;box&quot;&gt; &lt;p&gt;&lt;/p&gt; &lt;/div&gt; Chrome、IE9、IE10……高级浏览器，认为：alert（box.childNodes[0].nodeType ） //3高级浏览器认为box的大儿子是文本节点。当然是空文本。 IE6、7、8等低级浏览器认为：alert（box.childNodes[0].nodeType） //1IE6、7、8认为 box 的大儿子是p。 所以为了没有兼容问题，需要遍历节点的时候，HTML结构就不能有空格。一个面试题：12345678 &lt;div id=&quot;box&quot;&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;/p&gt; &lt;/div&gt;document.getElementById(“box”).childNodes.length; //高级浏览器9，低级浏览器4 怎么解决这个差异呢？放弃原有的数组，重新遍历儿子数组，把所有nodeType为1的元素组成一个新的数组。1234567var childs = [];for(var i = 0 ; i &lt; box.childNodes.length ; i++)&#123; if(box.childNodes[i].nodeType == 1)&#123; //可以为一也可以为三五八，筛选条件不同。 childs.push(box.childNodes[i]); &#125;&#125;childs[1].style.background = &quot;red&quot;; firstChild属性、lastChild属性： 也不好用，IE6、7、8认为firstChild是节点， 而Chrome认为firstChild是空文本 3、原生JS中的节点关系-parentNode我为了好记叫（父亲数组）注意 childNodes 儿子可以有很多 ，parendNode 父亲只能有1个 4、previousSibling、nextSibling previous | 英[ˈpri:viəs] 以前的; 先前的; 过早的; （时间上） 稍前的;sibling | 英[ˈsɪblɪŋ] 同胞兄弟，姐妹; [生] 同科。previousSibling、nextSibling上一个同胞兄弟，下一个同胞兄弟。12345678 &lt;div id=&quot;box&quot;&gt; &lt;p&gt;AAA&lt;/p&gt; &lt;p&gt;BBB&lt;/p&gt; &lt;p&gt;CCC&lt;/p&gt; &lt;p&gt;DDD&lt;/p&gt; &lt;/div&gt;ps[2].previousSibling //低级浏览器就是BBB那个p，高级浏览器是空文本节点 让一个 box 序列上面全部变红。box 下面所有盒子变红雷同。1234567让 box 节点的之前的所有节点，都变红，原生 JS 挺难的： var prev = box; while(prev = prev.previousSibling)&#123; //一直查找兄弟的兄弟，直到遇见 null。 暗含一个 for 迭代器if(prev.nodeType == 1)&#123; prev.style.background = &quot;red&quot;; &#125; &#125; jQuery 写法：$(&quot;#box&quot;).prevAll().css.backgoround = &quot;&quot;red; 总结：]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>原生 JS ，节点关系</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JQuery 网页小卡片动画效果]]></title>
    <url>%2F2019%2F03%2F10%2FJQuery%20%E7%BD%91%E9%A1%B5%E5%B0%8F%E5%8D%A1%E7%89%87%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C%2F</url>
    <content type="text"><![CDATA[动画效果展示：实现思路 构建静态页面，一个大盒子放入背景图，包含两个小盒子放入文字。 为了动画效果，使用定位。此时注意弹出盒子的高要 overflow:hidden; 动画效果使用 animate改变 top 值实现12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;仿 PHP 中文网卡片动画&lt;/title&gt; &lt;style&gt; * &#123; margin: 0; padding: 0; &#125; .box &#123; width: 217px; height: 172px; margin: 100px auto; position: relative; box-shadow: 1px 3px 7px #ccc; /*添加盒子阴影 */ border-radius: 10px; /*盒子圆角 */ overflow: hidden; cursor: pointer; /*悬浮小手*/ &#125; img &#123; width: 100%; height: 124px; border-radius: 10px; &#125; .box h3 &#123; position: absolute; font: 14px/23px &quot;MIcrosoft YaHei&quot;,&quot;SimSun&quot;; color: #07111b; top: 90px; background-color: #fff; width: 217px; border-radius: 8px; height: 147px; padding: 20px 20px; &#125; .box h3 span &#123; padding: 2px; font-size: 12px; color: #fff; background-color: #93999f; border-radius: 2px; &#125; .box p &#123; position: absolute; bottom: 0; color: #ccc; font-size: 12px; padding: 0 20px; line-height: 42px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;a href=&quot;http://www.php.cn/&quot;&gt; &lt;div class=&quot;box&quot;&gt; &lt;img src=&quot;https://img.php.cn/upload/course/000/126/153/5aa23f0ded921649.jpg&quot; alt=&quot;&quot;&gt; &lt;h3 id =&quot;hid&quot;&gt;&lt;span&gt;初级&lt;/span&gt;2018 前端入门_HTML5&lt;/h3&gt; &lt;p&gt;43394人在看&lt;/p&gt; &lt;/div&gt; &lt;/a&gt; &lt;script src = &quot;js/jquery-1.12.3.min.js&quot;&gt;&lt;/script&gt; &lt;script&gt; $(&quot;.box&quot;).mouseenter(function()&#123; if($(&quot;#hid&quot;).is(&quot;:animated&quot;))&#123; return; &#125; $(&quot;#hid&quot;).animate(&#123;&quot;top&quot; : 28&#125;); &#125;); $(&quot;.box&quot;).mouseleave(function()&#123; $(&quot;#hid&quot;).animate(&#123;&quot;top&quot; : 90&#125;); &#125;); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>JQuery 网页小卡片动画效果</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS 实现头像图片右上角数字显示]]></title>
    <url>%2F2019%2F03%2F10%2FCSS%20%E5%AE%9E%E7%8E%B0%E5%A4%B4%E5%83%8F%E5%9B%BE%E7%89%87%E5%8F%B3%E4%B8%8A%E8%A7%92%E6%95%B0%E5%AD%97%E6%98%BE%E7%A4%BA%2F</url>
    <content type="text"><![CDATA[使用 CSS 实现头像图片右上角数字显示，常见于微信、QQ等聊天工具。实现思路 两个盒子 子绝父相定位 一些样式问题 12345678910111213141516171819202122232425262728293031323334353637&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;CSS 实现图片右上角数字显示&lt;/title&gt; &lt;style&gt; .box &#123; height: 60px; width: 60px; position: relative; margin: 100px auto; &#125; .box img &#123; width: 100%; height: 100%; &#125; .box .number &#123; position: absolute; left: 80%; top: -12px; background-color: red; color: #fff; line-height: 23px; width: 23px; border-radius: 24px; text-align: center; font-size: 17px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt; &lt;img src=&quot;https://upload.jianshu.io/users/upload_avatars/16069544/8e5ccee8-9c9e-4345-bbaa-8f32ec595557.jpg?imageMogr2/auto-orient/strip|imageView2/1/w/240/h/240&quot; alt=&quot;&quot;&gt; &lt;span class = &quot;number&quot;&gt;2&lt;/span&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>基础前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery 实现水平菜单下拉功能]]></title>
    <url>%2F2019%2F03%2F10%2FjQuery%20%E5%AE%9E%E7%8E%B0%E6%B0%B4%E5%B9%B3%E8%8F%9C%E5%8D%95%E4%B8%8B%E6%8B%89%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[实现思路 写一个横向导航条 在导航条的每个块里面添加下拉文本 下拉内容display:none; slideDown/slideUp实现下拉功能 直接上源代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;dropdown menu&lt;/title&gt; &lt;style&gt; * &#123; margin: 0; padding: 0; &#125; body &#123; color: #f9f9f9; &#125; .nav &#123; margin: 100px auto; height: 43px; background-color: #7995cc; &#125; .inner &#123; width: 1030px; margin: 0 auto; &#125; .nav .inner ul &#123; list-style: none; &#125; .nav .inner ul li &#123; float: left; height: 43px; width: 116px; text-align: center; line-height: 43px; position: relative; &#125; .nav .inner ul li.first &#123; width: 86px; &#125; .nav .inner ul li&gt;a &#123; font-size: 15px; text-decoration: none; color: #fff; &#125; .nav .inner ul li&gt;a:hover &#123; color: #333; &#125; .nav .inner ul li .dropdown &#123; display: none; background-color: #858aab; position: absolute; top: 55px; left: 0; width: 116px; &#125; .nav .inner ul li .dropdown a &#123; font-size: 12px; text-decoration: none; color: #fff; display:block; &#125; .nav .inner ul li .dropdown a:hover &#123; background-color: blue; &#125; .box &#123; height: 12px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;nav&quot;&gt; &lt;div class=&quot;inner&quot;&gt; &lt;ul&gt; &lt;li class = &apos;first&apos;&gt;&lt;a href=&quot;&quot;&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;li&gt; &lt;a href=&quot;&quot;&gt;学校概况&lt;/a&gt; &lt;div class=&quot;box&quot;&gt;&lt;/div&gt; &lt;div class=&quot;dropdown&quot;&gt; &lt;p&gt;&lt;a href=&quot;&quot;&gt;学校简介&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;&quot;&gt;概况一览&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;&quot;&gt;学校历史&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;&quot;&gt;历任领导&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;&quot;&gt;现任领导&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;&quot;&gt;校长寄语&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;&quot;&gt;学校标志&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;&quot;&gt;老照片&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;&quot;&gt;校园导游&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;&quot;&gt;校园地图&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;&quot;&gt;国际合作&lt;/a&gt; &lt;div class=&quot;box&quot;&gt;&lt;/div&gt; &lt;div class=&quot;dropdown&quot;&gt; &lt;p&gt;&lt;a href=&quot;&quot;&gt;交流概况&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;&quot;&gt;国际合作&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;&quot;&gt;国际学生&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;院系部门&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;科学研究&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;教师队伍&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;人才培养&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;人才招聘&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;招生就业&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;script src=&quot;js/jquery-1.12.3.min.js&quot;&gt;&lt;/script&gt; &lt;script&gt; $(&quot;li&quot;).mouseenter(function()&#123; if($(this).children(&quot;.dropdown&quot;).is(&quot;:animated&quot;))&#123; return; &#125; $(this).children(&quot;.dropdown&quot;).slideDown(); &#125;); $(&quot;li&quot;).mouseleave(function()&#123; $(&quot;.dropdown&quot;).slideUp(); &#125;); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 需要注意的几点： 下拉菜单和导航条之间有间隔。dropdown绝对定位。 因为导航条和下拉菜单之间有空隙。当鼠标移动去下拉菜单，下拉菜单已经消失。解决办法,中间加个盒子，实现过度。]]></content>
      <categories>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
        <tag>水平菜单下拉功能</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[百叶窗轮播（shutter）]]></title>
    <url>%2F2019%2F03%2F08%2F%E7%99%BE%E5%8F%B6%E7%AA%97%E8%BD%AE%E6%92%AD%EF%BC%88shutter%EF%BC%89%2F</url>
    <content type="text"><![CDATA[百叶窗（shutter）实例制作。参考效果来源： 明星_瑞丽网设计思路： 最大的盒子 shutter 高等于图片高，宽为 900px，图片宽高分别为 600px 500px，900/600=150，可知道图片间隙为150px。 认识到图片滑动回家，每一次都会回到自己的老家，并不会每次都改变位置。而且第一个图片永远不会动。 计算运动的 left 新家（新位置）方法，shutter减去一个展开图片宽，除以图片总数减一。例子中为 900-600=300,300/(6-1)=60。总结一下 其实就是 shutter 盒子里面存了六个图片，盒子宽除以图片个数，即可绝对定位出静态页面。当鼠标运动时，只有一张图片张开。所以用 shutter 减去一张图片宽再除以剩下图片个数。观察 GIF 可知大于鼠标碰到图片位置的图片，右移，小于等图片位置的左移。 注意：mouseenter 与 mouseover 事件不同，mouseenter 事件只有在鼠标指针进入被选元素时被触发，mouseover 事件在鼠标指针进入任意子元素时也会被触发。 演示 mouseenter() 与 mouseover() 之间的不同。 1.原始代码实现百叶窗123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;百叶窗&lt;/title&gt; &lt;style&gt; * &#123; margin: 0; padding: 0; &#125; .shutter &#123; height: 500px; width: 900px; margin: 100px auto; position: relative; overflow: hidden; &#125; .shutter ul &#123; list-style: none; &#125; .shutter ul li &#123; position: absolute; top: 0; &#125; .shutter ul li.num01 &#123;left: 0;&#125; .shutter ul li.num02 &#123;left: 150px;&#125; .shutter ul li.num03 &#123;left: 300px;&#125; .shutter ul li.num04 &#123;left: 450px;&#125; .shutter ul li.num05 &#123;left: 600px;&#125; .shutter ul li.num06 &#123;left: 750px;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;shutter&quot;&gt; &lt;ul&gt; &lt;li class = &quot;num01&quot;&gt;&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;images/shutter/rayli01.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt; &lt;li class = &quot;num02&quot;&gt;&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;images/shutter/rayli02.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt; &lt;li class = &quot;num03&quot;&gt;&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;images/shutter/rayli03.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt; &lt;li class = &quot;num04&quot;&gt;&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;images/shutter/rayli04.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt; &lt;li class = &quot;num05&quot;&gt;&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;images/shutter/rayli05.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt; &lt;li class = &quot;num06&quot;&gt;&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;images/shutter/rayli06.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery-1.12.3.min.js&quot;&gt;&lt;/script&gt; &lt;script&gt; $(&quot;.num01&quot;).mouseover(function()&#123; $(&quot;li&quot;).stop(true); $(&quot;.num02&quot;).animate(&#123;&quot;left&quot; : 600&#125;,1000); $(&quot;.num03&quot;).animate(&#123;&quot;left&quot; : 660&#125;,1000); $(&quot;.num04&quot;).animate(&#123;&quot;left&quot; : 720&#125;,1000); $(&quot;.num05&quot;).animate(&#123;&quot;left&quot; : 780&#125;,1000); $(&quot;.num06&quot;).animate(&#123;&quot;left&quot; : 840&#125;,1000); &#125;); $(&quot;.num02&quot;).mouseover(function()&#123; $(&quot;li&quot;).stop(true); $(&quot;.num02&quot;).animate(&#123;&quot;left&quot; : 60&#125;,1000); $(&quot;.num03&quot;).animate(&#123;&quot;left&quot; : 660&#125;,1000); $(&quot;.num04&quot;).animate(&#123;&quot;left&quot; : 720&#125;,1000); $(&quot;.num05&quot;).animate(&#123;&quot;left&quot; : 780&#125;,1000); $(&quot;.num06&quot;).animate(&#123;&quot;left&quot; : 840&#125;,1000); &#125;); $(&quot;.num03&quot;).mouseover(function()&#123; $(&quot;li&quot;).stop(true); $(&quot;.num02&quot;).animate(&#123;&quot;left&quot; : 60&#125;,1000); $(&quot;.num03&quot;).animate(&#123;&quot;left&quot; : 120&#125;,1000); $(&quot;.num04&quot;).animate(&#123;&quot;left&quot; : 720&#125;,1000); $(&quot;.num05&quot;).animate(&#123;&quot;left&quot; : 780&#125;,1000); $(&quot;.num06&quot;).animate(&#123;&quot;left&quot; : 840&#125;,1000); &#125;); $(&quot;.num04&quot;).mouseover(function()&#123; $(&quot;li&quot;).stop(true); $(&quot;.num02&quot;).animate(&#123;&quot;left&quot; : 60&#125;,1000); $(&quot;.num03&quot;).animate(&#123;&quot;left&quot; : 120&#125;,1000); $(&quot;.num04&quot;).animate(&#123;&quot;left&quot; : 180&#125;,1000); $(&quot;.num05&quot;).animate(&#123;&quot;left&quot; : 780&#125;,1000); $(&quot;.num06&quot;).animate(&#123;&quot;left&quot; : 840&#125;,1000); &#125;); $(&quot;.num05&quot;).mouseover(function()&#123; $(&quot;li&quot;).stop(true); $(&quot;.num02&quot;).animate(&#123;&quot;left&quot; : 60&#125;,1000); $(&quot;.num03&quot;).animate(&#123;&quot;left&quot; : 120&#125;,1000); $(&quot;.num04&quot;).animate(&#123;&quot;left&quot; : 180&#125;,1000); $(&quot;.num05&quot;).animate(&#123;&quot;left&quot; : 240&#125;,1000); $(&quot;.num06&quot;).animate(&#123;&quot;left&quot; : 840&#125;,1000); &#125;); $(&quot;.num06&quot;).mouseover(function()&#123; $(&quot;li&quot;).stop(true); $(&quot;.num02&quot;).animate(&#123;&quot;left&quot; : 60&#125;,1000); $(&quot;.num03&quot;).animate(&#123;&quot;left&quot; : 120&#125;,1000); $(&quot;.num04&quot;).animate(&#123;&quot;left&quot; : 180&#125;,1000); $(&quot;.num05&quot;).animate(&#123;&quot;left&quot; : 240&#125;,1000); $(&quot;.num06&quot;).animate(&#123;&quot;left&quot; : 300&#125;,1000); &#125;); $(&quot;li&quot;).mouseleave(function()&#123; $(&quot;.num02&quot;).animate(&#123;&quot;left&quot; : 150&#125;,1000); $(&quot;.num03&quot;).animate(&#123;&quot;left&quot; : 300&#125;,1000); $(&quot;.num04&quot;).animate(&#123;&quot;left&quot; : 450&#125;,1000); $(&quot;.num05&quot;).animate(&#123;&quot;left&quot; : 600&#125;,1000); $(&quot;.num06&quot;).animate(&#123;&quot;left&quot; : 750&#125;,1000); &#125;); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 2.代码的优化改进动画改变时的写法。1234567891011121314151617var $lis = $(&quot;li&quot;); $lis.mouseenter(function()&#123; $lis.stop(true); //节流 index = $(this).index(); //鼠标感应到的图片编号 $lis.each(function(i)&#123; if(i &lt;= index)&#123; //，判断图片在左还是在右。比较图片的左右绝对定位图片位置 $(this).animate(&#123;&quot;left&quot;:60*i&#125;,1000); &#125;else&#123; $(this).animate(&#123;&quot;left&quot;:600+(i-1)*60&#125;,1000); &#125; &#125;); &#125;);$lis.mouseleave(function()&#123; $lis.each(function(i)&#123; $(this).animate(&#123;&apos;left&apos; :150*i&#125;,1000); &#125;); &#125;); 上面的 if else 语句可用三元运算符代写。(i &lt;= index?$(this).animate({&quot;left&quot;:60*i},1000); : $(this).animate({&quot;left&quot;:600+(i-1)*60},1000); 3.增加 opacity 透明度感应到的图片变亮，未感应到的图片变暗。如果我们直接设置图片的 opacity 为 0.5。所有的图片将会变成下面的效果。解决的办法： 在 li 里面放个盒子，通过改变盒子的透明度来修改图片的展示效果。12345678910111213141516171819202122232425 &lt;li class = &quot;num01&quot;&gt;&lt;div class=&quot;bgc&quot;&gt;&lt;/div&gt;&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;images/shutter/rayli01.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt; //放入div.bgc======设置样式======.shutter ul li .bgc &#123; position: absolute; top: 0; height: 100%; width: 100%; background-color: #4b4b4b; opacity: 0.5; &#125;========$lis.mouseenter(function()&#123;里面放入改变opacity&#125;========$(this).children(&quot;.bgc&quot;).animate(&#123;&quot;opacity&quot; : 0&#125;,1);=========离开恢复原样式==========$lis.mouseleave(function()&#123; $lis.each(function(i)&#123; $(this).animate(&#123;&apos;left&apos; :150*i&#125;,1000); &#125;); $lis.children(&quot;.bgc&quot;).fadeTo(1,0.5); &#125;); &#125;); 注意：改变动画可以用 animate 或 fadeTo。]]></content>
      <categories>
        <category>基础前端</category>
      </categories>
      <tags>
        <tag>百叶窗轮播（shutter）</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery 的方法]]></title>
    <url>%2F2019%2F03%2F04%2FjQuery%20%E7%9A%84%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[一、序与迭代1 、eq() 方法123456 &lt;div class=&quot;box2&quot;&gt; &lt;p class=&quot;teshu&quot;&gt;&lt;/p&gt; &lt;p class=&quot;teshu&quot;&gt;我想红！我想当明星！&lt;/p&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;/p&gt;&lt;/div&gt; $(&quot;.box2 p&quot;).eq(1)$(&quot;p&quot;).eq(1)$(&quot;.teshu&quot;).eq(1)$(&quot;.box2 .teshu&quot;).eq(1)$() 函数将返回一个对象队列，用 eq 来精确选择这个序列中的某个元素。eq 用法类似数组的下标。 同样的，lt、gt、odd、even、first、last都是这个机理。 2、 index() 方法1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;index&lt;/title&gt; &lt;style&gt; *&#123; margin: 0; padding: 0; &#125; div.cen &#123; margin: 0 auto; height: 500px; width: 500px; &#125; ul &#123; list-style: none; &#125; p &#123; height: 50px; width: 50px; background-color: #5e5e5e; margin: 10px; &#125; p,h3 &#123; float: left; &#125; h3 &#123; height: 50px; width: 50px; background-color: #5e5e5e; margin: 10px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;cen&quot;&gt; &lt;div&gt; &lt;ul&gt; &lt;li&gt; &lt;h3&gt;h3&lt;/h3&gt; &lt;p&gt;0&lt;/p&gt; &lt;p&gt;1&lt;/p&gt; &lt;p&gt;2&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;1&lt;/p&gt; &lt;p&gt;3&lt;/p&gt; &lt;p&gt;4&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;script src=&quot;js/jquery-1.12.3.min.js&quot;&gt;&lt;/script&gt; &lt;script&gt; $(&quot;p&quot;).click(function()&#123; alert($(this).index()); &#125;); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; index 返回这个元素在亲兄弟中的排名，无视选择器选择标签的类型，只会从选择器选择的标签兄弟开始计数，拿到选择器选择标签的排名。重点在于计数的时候从选择标签的大哥开始，并不从本身开始。例子中。h3成功占位。举一个应用实例选中 box1 中的 p 让 box2 的 p 发生改变1234 $(&quot;.box1 p&quot;).click(function()&#123; //有变化的是box2中对应的p $(&quot;.box2 p&quot;).eq($(this).index()).css(&quot;background-color&quot;,&quot;red&quot;);&#125;); 最后强调一下，是 index() 方法，而不是属性！ 3、 each() 方法each() 表示遍历节点，也叫作迭代符合条件的节点。代码：123$(&quot;p&quot;).each(function(i)&#123; $(this).animate(&#123;&quot;width&quot;:50 * i&#125;,1000);&#125;); each 进行类似 for 循环的功能，遍历所有的 p，然后执行函数。默认传进来的参数 i 是从零开始计数的。$(this) 表示你现在正在遍历的 p。 4、 size() 方法和 length 属性jQuery 对象中元素的个数。前面 $() 的元素页面上一共有几个，length、size()返回它的个数。是同一个数值。 5、 get() 方法get() 方法和 eq() 方法基本一致，都仰赖$()的序列。eq() 返回的是 jQuery 对象，而 get() 返回的是原生JS对象。jQuery 对象后面要跟着 jQuery 方法，原生对象后面要跟着原生属性、方法：12345 $(&quot;p&quot;).eq(2).html(&quot;哈哈哈哈哈哈&quot;);等价于： $(&quot;p&quot;).get(2).innerHTML = &quot;哈哈哈哈哈哈&quot;;等价于： $(&quot;p&quot;).eq(2)[0].innerHTML = &quot;哈哈哈哈哈哈&quot;; 二、动画相关方法1、 内置show()、hide()、toggle()方法 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;togou&lt;/title&gt; &lt;style&gt; div&#123; width: 200px; height: 200px; background-color: skyblue; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;input type=&quot;button&quot; value=&quot;show&quot;/&gt; &lt;input type=&quot;button&quot; value=&quot;hide&quot;/&gt; &lt;input type=&quot;button&quot; value=&quot;toggle&quot;/&gt; &lt;input type=&quot;button&quot; value=&quot;show(1000)&quot;/&gt; &lt;input type=&quot;button&quot; value=&quot;hide(1000)&quot;/&gt; &lt;input type=&quot;button&quot; value=&quot;toggle(1000)&quot;/&gt; &lt;div&gt;&lt;/div&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;jquery-1.12.3.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; $(&quot;input:eq(0)&quot;).click(function()&#123; $(&quot;div&quot;).show(); //让一个本身是display:none;元素显示 &#125;); $(&quot;input:eq(1)&quot;).click(function()&#123; $(&quot;div&quot;).hide(); //隐藏元素display:none; &#125;); $(&quot;input:eq(2)&quot;).click(function()&#123; $(&quot;div&quot;).toggle(); //切换显示状态。 //自行带有判断，如果可见，就隐藏；否则显示。 &#125;); $(&quot;input:eq(3)&quot;).click(function()&#123; $(&quot;div&quot;).show(1000); //让一个本身是display:none;元素显示 &#125;); $(&quot;input:eq(4)&quot;).click(function()&#123; $(&quot;div&quot;).hide(1000); //隐藏元素display:none; &#125;); $(&quot;input:eq(5)&quot;).click(function()&#123; $(&quot;div&quot;).toggle(1000,function()&#123; alert(&quot;偷狗完毕！&quot;); &#125;); //切换显示状态,自行带有判断，如果可见，就隐藏；否则显示。。 &#125;); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; show()显示、hide()隐藏、toggle()切换$(&quot;div&quot;).show(); //让一个本身是display:none;元素显示$(&quot;div&quot;).hide(); //隐藏元素display:none;$(&quot;div&quot;).toggle(); //切换显示状态。自行带有判断，如果可见，就隐藏；否则显示。 如果show()、hide()、toggle()里面有数值，将变为动画：$(&quot;div&quot;).show(1000);此时display:none;的元素，将从左上角徐徐展开。动画机理：这个display:none;的元素会变为显示的，然后瞬间将宽度、高度、opacity设为0，然后徐徐展开。 可以加回调函数： $(“div”).toggle(1000,function(){ alert(&quot;偷狗完毕！&quot;); }); 语法就是： $(&quot;div&quot;).show([时间],[回调函数]);[] 表示这个参数可选。 2、slideDown()、slideUp()、slideToggle()方法把上面的方法更改成本次方法就变成如下效果。slide slideDown : 下滑展开 slideUp：上滑收回 slideToggle : 滑动切换$(&quot;div&quot;).slideDown();slideDown() 的起点一定是 display:none 换句话说，只有display:none的元素，才能够调用slideDown()动画机理：一个display:none的元素，瞬间显示，瞬间高度变为0，然后jQuery自己捕捉原有的height设置为动画的终点。等价于4条语句：$(&quot;div&quot;).show(); //瞬间显示var oldHeight = $(&quot;div&quot;).css(&quot;height&quot;); //记忆住原有的高度$(&quot;div&quot;).css(&quot;height&quot;,0); //瞬间变为0$(&quot;div&quot;).animate({&quot;height&quot; : oldHeight},1000); //动画！终点是oldHeight相反的，slideUp()的终点就是display:none;同样的，slideDown、slideUp、slideToggle里面可以写动画时间、回调函数。 一个水平导航栏的显示隐藏实例 3、fadeIn()、fadeOut()、fadeTo() fadeIn() 淡入 fadeOut() 淡出 fadeTo() 淡到那个数 fadeToggle() 淡出入切换 fadeIn() 的起点是display:none; 换句话说，只有display:none的元素，才能执行fadeIn()。 fadeOut() 起点display:block;fadeTo 有四个参数，第一个参数是动画的时间，第二个参数是要变到的透明度，第四个参数是回调函数$(selector).fadeTo(speed,opacity,easing,callback) “swing” - 在开头/结尾移动慢，在中间移动快 ; swing 摇摆；改变；冲力；秋千 “linear” - 匀速移动应用举例：12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;slideIn&lt;/title&gt; &lt;style&gt; div &#123; height: 200px; width: 200px; background-color: #5c7bd4; border:2px solid red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt; &lt;script src=&quot;js/jquery-1.12.3.min.js&quot;&gt;&lt;/script&gt; &lt;script&gt; $(&quot;div&quot;).hide(1000,function()&#123; $(this).show(1000,function()&#123; $(this).slideUp(1000,function()&#123; $(this).slideDown(1000,function()&#123; //以下代码才是新学的 $(this).fadeOut(1000,function()&#123; $(this).fadeIn(1000,function()&#123; $(this).fadeTo(3000,0.5); &#125;); &#125;); &#125;); &#125;); &#125;); &#125;); &lt;/script&gt;&lt;/html&gt; 效果图：到此我们可以使用新学的 jQuery 来改写原生写法的轮播图。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;jQuery 改写轮播图&lt;/title&gt; &lt;style&gt; *&#123; margin: 0; padding: 0; &#125; .carousel &#123; width: 560px; height: 300px; margin:100px auto; position: relative; &#125; .carousel ul &#123; list-style: none; &#125; .carousel .imageslist ul li &#123; position: absolute; top: 0; left: 0; display: none; &#125; .carousel .imageslist ul li.cur &#123; display: block; &#125; .leftbtn &#123; height: 55px; width: 55px; position: absolute; top: 50%; left: 20px; margin-top: -27.5px; background-image: url(images/slide-btnL.png); z-index: 99; cursor: pointer; &#125; .rightbtn &#123; height: 55px; width: 55px; position: absolute; top: 50%; right: 20px; margin-top: -27.5px; background-image: url(images/slide-btnR.png); z-index: 99; cursor: pointer; &#125; .carousel .circles &#123; width: 150px; height: 16px; position: absolute; bottom: 10px; right: 10px; &#125; .carousel .circles ul li &#123; float: left; height: 16px; width: 16px; border-radius: 50%; background-color: orange; cursor: pointer; margin-right: 12px; &#125; .carousel .circles ul li.first &#123; background-color: skyblue; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;carousel&quot; id=&quot;carousel&quot;&gt; &lt;div class=&quot;btns&quot;&gt; &lt;div class=&quot;leftbtn&quot; id=&quot;leftbtn&quot;&gt;&lt;/div&gt; &lt;div class=&quot;rightbtn&quot; id=&quot;rightbtn&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;imageslist&quot; id=&quot;imageslist&quot;&gt; &lt;ul&gt; &lt;li class=&apos;cur&apos;&gt;&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;images/0.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;images/1.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;images/2.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;images/3.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;images/4.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;circles&quot;&gt; &lt;ul&gt; &lt;li class=&quot;first&quot;&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;script src=&quot;js/jquery-1.12.3.min.js&quot;&gt;&lt;/script&gt; &lt;script&gt; //jQuery变量，我们习惯以$开头 var $lis = $(&quot;#imageslist ul li&quot;); var idx = 0; //右按钮添加事件监听 $(&quot;#rightbtn&quot;).click(function()&#123; //节流 if($lis.eq(idx).is(&quot;:animated&quot;))&#123; return; &#125; //老图淡出 $lis.eq(idx).fadeOut(1000); //信号量改变 idx++; if(idx &gt; $lis.length - 1)&#123; idx = 0; &#125; //新图淡入 $lis.eq(idx).fadeIn(1000); &#125;) //左按钮添加事件监听 $(&quot;#leftbtn&quot;).click(function()&#123; //节流 if($lis.eq(idx).is(&quot;:animated&quot;))&#123; return; &#125; //老图淡出 $lis.eq(idx).fadeOut(1000); //信号量改变 idx--; if(idx &lt; 0)&#123; idx = $lis.length - 1; &#125; //新图淡入 $lis.eq(idx).fadeIn(1000); &#125;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 4、stop() 和 flish() delay() is(“:animated”) stop() stop() 停止当前的animate动画，但是不清除队列，立即执行后面的animate动画：$(&quot;div&quot;).stop(); //等价于$(“div”).stop(false,false);停止当前的animate动画，并且清除队列，盒子留在了此时的位置：$(&quot;div&quot;).stop(true); //等价于$(“div”).stop(true,false);瞬间完成当前的animate动画，并且清除队列：$(&quot;div&quot;).stop(true,true);瞬间完成当前的animate动画，但是不清楚队列，立即执行后面的动画：$(&quot;div&quot;).stop(false,true); 公式：stop(是否清除队列,是否瞬间完成当前动画)如果没有写 true 或者 false，默认是 false finish() finish() 瞬间完成所有动画队列！ $(&quot;div&quot;).finish(); stop可以用来防止动画的积累： //连续打点语法，先清除所有的动画队列，然后执行新的动画$(&quot;div&quot;).stop(true).animate({&quot;left&quot;:100},1000); delay()delay延迟，可以使用连续打点，必须放在运动语句之前。123$(&quot;div&quot;).delay(1000).animate(&#123;&quot;left&quot;:500&#125;,1000); $(&quot;div&quot;).delay(1000).slideUp();$(&quot;div&quot;).delay(1000).hide(1); //必须写1，写1了就是运动 小窍门，让所有的img元素，都延迟不同的时间入场：1234$(&quot;img&quot;).each(function(i)&#123; //attr() 方法设置或返回被选元素的属性和值。 $(this).delay(i * 1000).fadeIn(1000);&#125;); is(“:animated”) is()方法表示身份探测，只返回true、false。is表示“是不是”，而不是“是”is里面可以写筛选器：判断点击的这个p是不是序号是奇数：$(this).is(&quot;p:odd&quot;)判断点击的这个p是不是序号小于3：$(this).is(&quot;p:lt(3)&quot;) 还可以写is(&quot;:animated&quot;)判断这个元素是否在运动中。is里面可以写筛选器：判断点击的这个p是不是序号是奇数：$(this).is(&quot;p:odd&quot;)判断点击的这个p是不是序号小于3：$(this).is(&quot;p:lt(3)&quot;) 还可以写is(&quot;:animated&quot;)判断这个元素是否在运动中。 stop 和 if return 进行节流时候的区别？当动画接受命令，没设置节流，动画会进行积累。stop 用于暂停当前操作，立马进行下一步。立马相应用户的命令。if return 防止用户流氓操作。基本上 if return 用于轮播和导航 slidedown/slideup。其他的用stop。]]></content>
      <categories>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery框架准备学习]]></title>
    <url>%2F2019%2F02%2F28%2FjQuery%E6%A1%86%E6%9E%B6%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[1、JavaScript编程的劣势 选择元素麻烦，全线兼容的方法只有 getElementById() 和 getElementsByTagName() 两个。其他的方法是不都兼容的。getElementsByClassName() 通过类名选择元素，IE9开始兼容。 样式操作麻烦，得到原生样式，需要我们自己造的轮子，例如：fetchComputedStyle() 动画麻烦，也需要我们自己造轮子animate(); 批量控制麻烦，大量出现的for循环语句；排他操作麻烦 HTML节点操作麻烦 由元素可以写出来的函数，函数封装即轮子与轮子的集合就是框架（jQuery） 2、jQuery网站使用官网：www.jquery.com 口号：写更少的代码，做更多的事情 官方的自我介绍： What is jQuery?jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. With a combination of versatility and extensibility, jQuery has changed the way that millions of people write JavaScript. jQuery是什么? jQuery是一个快速,小,功能丰富的JavaScript库。它使诸如HTML文档遍历和操作,事件处理、动画和Ajax更简单和易于使用的API,跨越多种浏览器。结合的通用性和可扩展性,jQuery已经改变了数百万人的方式编写JavaScript。 jQuery 有两条个本：「1.X」「2.X」 jQuery 「2.X」 has the same API as jQuery 「1.X」, but does not support Internet Explorer 6, 7, or 8. jQuery「2.X」和「1.X」的功能完全一致，API完全一致，但是「2.X」不兼容IE6、7、8。 下载的时候有两个选择： 3、jQuery的整体感知1. 选择问题轻松解决$()函数就是 jQuery 的核心函数，query就是检查的意思，也就是说jQuery的核心招牌功能就是选择元素： $(&quot;#box ul li.box span&quot;).css(&quot;background-color&quot;,&quot;red&quot;); 语法：$(“选择器”)选择的就是所有符合条件的元素，而不是一个。$可以用jQuery来代替，$和jQuery是同一个函数： jQuery(&quot;#box ul li.haha span&quot;).css(&quot;background-color&quot;,&quot;red&quot;);比 document.getElmentById() 方便！jQuery选择的元素，所有浏览器兼容！ 2. 样式问题轻松解决得到样式（得到计算后的样式）：$(&quot;.box&quot;).css(&quot;width&quot;);通过$()函数选择出来的东西，都是jQuery对象，所有的jQuery对象，都可以继续打点调用css函数，css函数已经封装了计算后的样式。 设置样式：1234567$(&quot;box&quot;).css(&quot;width&quot;,100);// 单个样式设置//多个样式设置使用 json $(&quot;.box&quot;).css(&#123; &quot;width&quot;:700, &quot;height&quot; : 300, &quot;opacity&quot; : 0.4 &#125;); 语法 $(“选择器”).css(JSON); 3. 动画的问题轻松解决jQuery内部含有一个运动框架，animate $(“.box”).animate({“left”:900},4000,function(){ alert(“运动完成”); }); 4. 批量添加监听、节点关系所有的li都有监听了： $(“.circles ol li”).mouseenter(function(){ //自己变红，自己的兄弟恢复为橙色 $(this).css(“background-color”,”red”).siblings().css(“background-color”,”orange”); });siblings()表示兄弟节点。//兄弟姐妹 4、$()函数 jQuery对象不是原生JS对象$()函数，是招牌功能，能够根据CSS选择元素。 比如：$(&quot;#box&quot;)选择页面上id为box的盒子。 注意，选择出来的东西，是一个类数组对象，是**jQuery自己的对象，这个jQuery**对象后面不能跟着原生JS 的语法：$(“#box”).style.backgroundColor = “red”; 因为.style.backgroundColor是原生JS语法，$()原则的对象是jQuery对象，不能跟着原生。 所以，如果想把jQuery对象，转为原生JS对象，要加[0]就行了： $(&quot;#box&quot;)[0].style.backgroundColor = &quot;red&quot;; 5、引号问题$(“选择器”)注意引号不能丢！！在jQuery世界中，只有三个东西不能加引号，其他必须加引号：123$(this)$(document)$(window) 6、筛选器这些都是关于序号的：12345678$(&quot;p&quot;) 所有的p$(&quot;p:first&quot;) 第一个p$(&quot;p:last&quot;) 最后一个p$(&quot;p:eq(3)&quot;) 下标为3的p$(&quot;p:lt(3)&quot;) 下标小于3的p$(&quot;p:gt(3)&quot;) 下标大于3的p$(&quot;p:odd&quot;) 下标是奇数的p$(&quot;p:even&quot;) 下标是偶数的p 特别的，eq equle 可以单独提炼为方法，可以连续打点： $(&quot;p&quot;).eq(3).animate({&quot;width&quot;:400},1000);等价于 $(&quot;p:eq(3)&quot;).animate({&quot;width&quot;:400},1000);提炼出来的好处是，可以用变量 var a = 3; $(&quot;p&quot;).eq(a).animate({&quot;width&quot;:400},1000); 7、CSS函数css函数可以读样式，可以设样式。读样式，可以读取计算后样式，写一个参数，是不是驼峰，无所谓，但是必须加引号：$(&quot;p:first&quot;).css(&quot;background-color&quot;);$(&quot;p:first&quot;).css(&quot;backgroundColor&quot;); 设置样式，设置样式，有两种语法，如果你只想设置一个样式，逗号隔开 k 和 v ：$(&quot;p:odd&quot;).css(&quot;backgroundColor&quot;,&quot;blue&quot;); 如果想设置很多样式，就写JSON:$(&quot;p:odd&quot;).css(JSON); 所有的数值，不需要单位：**12345$(&quot;p:lt(4)&quot;).css(&#123; &quot;width&quot; : 20, &quot;height&quot; : 20, &quot;backgroundColor&quot; : &quot;red&quot;&#125;) 当然，你也可以这样，不厌其烦的用逗号：$(&quot;p:lt(4)&quot;).css(&quot;width&quot;,20);$(&quot;p:lt(4)&quot;).css(&quot;height&quot;,20);$(&quot;p:lt(4)&quot;).css(&quot;backgroundColor&quot;,&quot;red&quot;);特别的，还支持+=写法：$(&quot;p:eq(5)&quot;).css(&quot;width&quot;,&quot;+=20px&quot;); 8、animate函数动画 animate缓冲，jQuery需要插件来完成。jQuery默认不是匀速，是 easeInOut (先快后慢） 和我们封装的框架不一样，jQuery默认有一个处理机制，叫做动画排队。当一个元素接收到了两个animate命令之后，后面的animate会排队：$(&quot;p&quot;).animate({&quot;left&quot;:1000},2000);$(&quot;p&quot;).animate({&quot;top&quot;:400},2000);先2000毫秒横着跑，然后2000毫秒竖着跑。动画总时长4000。 如果想让元素斜着跑，就是同时变化left和top，就写在同一个JSON里面：$(&quot;p&quot;).animate({&quot;left&quot;:1000,&quot;top&quot;:400},2000); 不同的元素，不排队，是同时的。 8.事件监听jQuery颠覆了我们的行文习惯：123$(&quot;.box1&quot;).click(function()&#123; //点击box1之后做的事情&#125;); 事件名一律不写on。特别的，鼠标进入改成了mouseenter，鼠标离开改为了mouseleave。 jQuery的哲学就是DOM编程领域的霸主，操作DOM节点、绑定监听、运动、css样式、Ajax等等都有封装。]]></content>
      <categories>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[异形滚动]]></title>
    <url>%2F2019%2F02%2F27%2F%E5%BC%82%E5%BD%A2%E6%BB%9A%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[1、原理的揭示前言：图片大小处理问题的解决，当我们只改变盒子大小，图片会溢出，无法充满这个盒子。设置图片的宽高为 100%1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;异形滚动&lt;/title&gt; &lt;style&gt; .box &#123; width: 100px; height: 100px; &#125; img &#123; //让图片充满整个盒子 width: 100%; height: 100%; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt;&lt;img src=&quot;images/0.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 从最低层的背景图开始解析。五个显示的图，两个隐藏的图。一个七个基本图样。 思路： 放置背景图片（li 绝对定位，再用图片填充） 点击时改变动画的 JSON123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;异形滚动&lt;/title&gt; &lt;style&gt; *&#123; margin: 0; padding: 0; &#125; .yixing&#123; width: 670px; height: 221px; background: url(images/pic_bg.gif); margin: 100px auto; border: 1px solid #000; position: relative; &#125; .yixing ul&#123; list-style: none; &#125; .yixing ul li&#123; position: absolute; &#125; /*img这个元素不会根据父亲来设置宽度、高度，所以我们就要写：*/ .yixing ul li img&#123; width: 100%; height: 100%; &#125; .yixing ul li.stateA&#123;width: 55px;height: 37px;left:-55px;top: 84px;&#125; .yixing ul li.stateB&#123;width: 71px;height: 54px;left:16px;top: 67px;&#125; .yixing ul li.stateC&#123;width: 122px;height: 86px;left:104px;top: 35px;&#125; .yixing ul li.stateD&#123;width: 161px;height: 112px;left:247px;top: 16px;&#125; .yixing ul li.stateE&#123;width: 122px;height: 86px;left:436px;top: 35px;&#125; .yixing ul li.stateF&#123;width: 71px;height: 54px;left:583px;top: 67px;&#125; .yixing ul li.stateG&#123;width: 55px;height: 37px;left:678px;top: 84px;&#125; .rightBtn&#123; position: absolute; top: 151px; right: 20px; width: 40px; height: 40px; background-color: red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;yixing&quot;&gt; &lt;ul&gt; &lt;li class=&quot;stateA&quot;&gt;&lt;img src=&quot;images/number/0.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt; &lt;li class=&quot;stateB&quot;&gt;&lt;img src=&quot;images/number/1.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt; &lt;li class=&quot;stateC&quot;&gt;&lt;img src=&quot;images/number/2.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt; &lt;li class=&quot;stateD&quot;&gt;&lt;img src=&quot;images/number/3.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt; &lt;li class=&quot;stateE&quot;&gt;&lt;img src=&quot;images/number/4.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt; &lt;li class=&quot;stateF&quot;&gt;&lt;img src=&quot;images/number/5.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt; &lt;li class=&quot;stateG&quot;&gt;&lt;img src=&quot;images/number/6.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;btns&quot;&gt; &lt;a href=&quot;javascript:;&quot; id=&quot;rightBtn&quot; class=&quot;rightBtn&quot;&gt;&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;js/animate-2.0.1.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; var lis = document.getElementsByTagName(&quot;li&quot;); var rightBtn = document.getElementById(&quot;rightBtn&quot;); var JSONC = &#123;&quot;width&quot;: 122,&quot;height&quot;: 86,&quot;left&quot;:104,&quot;top&quot;: 35&#125;; var JSOND = &#123;&quot;width&quot;: 161,&quot;height&quot;: 112,&quot;left&quot;:247,&quot;top&quot;: 16&#125;; //理论上我们可以不厌其烦写JSONA、JSONB rightBtn.onclick = function()&#123; //理论上我们可以不厌其烦写 animate(lis[3],JSONC,1000,&quot;BounceEaseOut&quot;); animate(lis[4],JSOND,1000,&quot;BounceEaseOut&quot;); &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 2、JSON的优化 获取 targetJSON 使用数组接受 JSON放进数组。 123456789101112var JSONarr = []; //把所有的状态都推入数组： for(var i = 0 ; i &lt; lis.length ; i++)&#123; JSONarr.push(&#123; &quot;width&quot; : parseInt(fetchComputedStyle(lis[i],&quot;width&quot;)), &quot;height&quot; : parseInt(fetchComputedStyle(lis[i],&quot;height&quot;)), &quot;left&quot; : parseInt(fetchComputedStyle(lis[i],&quot;left&quot;)), &quot;top&quot; : parseInt(fetchComputedStyle(lis[i],&quot;top&quot;)) &#125;); &#125; console.log(JSONarr); 右按钮的监听使用 for 进行优化，防止手写。 1234567//右按钮的监听rightBtn.onclick = function()&#123; //让1、2、3、4、5、6元素都分别变为数组中的0、1、2、3、4、5的状态 for(var i = 1 ; i &lt;= 6 ; i++)&#123; animate(lis[i],JSONarr[i - 1],600,&quot;BounceEaseOut&quot;); &#125;&#125; 3、增加二次点击效果这里是个难点今天，学了半天就是想不明白为什么不二次轮播，下午去吃了个饭，再仔细想想终于明白是怎么回事了。以右击按钮为例，当我们点击的时候，图片依据 动画 左移。这里只是借助了动画改变了 li 的位置，li 盒子的编号依然没变，所以当我们再次点击盒子只是变到本身现在所处位置。我错就错在盒子转移到另一个盒子，认为他的盒子编号也随之发生改变。想明白这点，我们就可以在动画完成后，改变盒子编号。这样下次的点击效果就会生效。又因为我们得到的 li 是一个类数组对象不能通过pop等进行操作。先把它放进一个数组里。12345678910111213141516171819202122232425262728293031var liArray = []; //存放每个li的数组 新增1 var JSONarr = []; //把所有的状态都推入数组： for(var i = 0 ; i &lt; lis.length ; i++)&#123; JSONarr.push(&#123; &quot;width&quot; : parseInt(fetchComputedStyle(lis[i],&quot;width&quot;)), &quot;height&quot; : parseInt(fetchComputedStyle(lis[i],&quot;height&quot;)), &quot;left&quot; : parseInt(fetchComputedStyle(lis[i],&quot;left&quot;)), &quot;top&quot; : parseInt(fetchComputedStyle(lis[i],&quot;top&quot;)), &quot;opacity&quot; : parseInt(fetchComputedStyle(lis[i],&quot;opacity&quot;)) &#125;); //liArray就和lis是一样的结构，lis是类数组对象，而liArray是数组 新增2 liArray.push(lis[i]); &#125; //右按钮的监听 rightBtn.onclick = function()&#123; //让1、2、3、4、5、6元素都分别变为数组中的0、1、2、3、4、5的状态 for(var i = 1 ; i &lt;= 6 ; i++)&#123; animate(liArray[i],JSONarr[i - 1],600,&quot;BounceEaseOut&quot;); &#125; //让0号元素瞬移 for(var k in JSONarr[6])&#123; liArray[0].style[k] = JSONarr[6][k] + &quot;px&quot;; &#125; //交换身份！！新增3 liArray.push(liArray.shift()); &#125; 4、设置节流，自动轮播，和opacity设置 opacity 主要是兼容左右轮播时的淡入淡出。函数节流，因为所有的 li 盒子都是动的，所以节流我们只需要随便设置一个盒子。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;异形滚动&lt;/title&gt; &lt;style&gt; *&#123; margin: 0; padding: 0; &#125; .yixing&#123; width: 670px; height: 221px; background: url(images/pic_bg.gif); margin: 100px auto; border: 1px solid #000; position: relative; overflow: hidden; &#125; .yixing ul&#123; list-style: none; &#125; .yixing ul li&#123; position: absolute; opacity: 1; filter:alpha(opacity=100); &#125; /*img这个元素不会根据父亲来设置宽度、高度，所以我们就要写：*/ .yixing ul li img&#123; width: 100%; height: 100%; &#125; .yixing ul li.stateA&#123;width: 55px;height: 37px;left:-55px;top: 84px; opacity: 0; filter:alpha(opacity=0);&#125; .yixing ul li.stateB&#123;width: 71px;height: 54px;left:16px;top: 67px;&#125; .yixing ul li.stateC&#123;width: 122px;height: 86px;left:104px;top: 35px;&#125; .yixing ul li.stateD&#123;width: 161px;height: 112px;left:247px;top: 16px;&#125; .yixing ul li.stateE&#123;width: 122px;height: 86px;left:436px;top: 35px;&#125; .yixing ul li.stateF&#123;width: 71px;height: 54px;left:583px;top: 67px;&#125; .yixing ul li.stateG&#123;width: 55px;height: 37px;left:678px;top: 84px; opacity: 0;filter:alpha(opacity=0);&#125; .rightBtn&#123; position: absolute; top: 151px; right: 20px; width: 40px; height: 40px; background-color: red; &#125; .leftBtn&#123; position: absolute; top: 151px; left: 20px; width: 40px; height: 40px; background-color: red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;yixing&quot; id=&quot;yixing&quot;&gt; &lt;ul&gt; &lt;li class=&quot;stateA&quot;&gt;&lt;img src=&quot;images/number/0.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt; &lt;li class=&quot;stateB&quot;&gt;&lt;img src=&quot;images/number/1.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt; &lt;li class=&quot;stateC&quot;&gt;&lt;img src=&quot;images/number/2.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt; &lt;li class=&quot;stateD&quot;&gt;&lt;img src=&quot;images/number/3.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt; &lt;li class=&quot;stateE&quot;&gt;&lt;img src=&quot;images/number/4.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt; &lt;li class=&quot;stateF&quot;&gt;&lt;img src=&quot;images/number/5.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt; &lt;li class=&quot;stateG&quot;&gt;&lt;img src=&quot;images/number/6.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;btns&quot;&gt; &lt;a href=&quot;javascript:;&quot; id=&quot;leftBtn&quot; class=&quot;leftBtn&quot;&gt;&lt;/a&gt; &lt;a href=&quot;javascript:;&quot; id=&quot;rightBtn&quot; class=&quot;rightBtn&quot;&gt;&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;js/animate-2.0.1.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;js/fetchComputedStyle.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; var yixing = document.getElementById(&quot;yixing&quot;); var rightBtn = document.getElementById(&quot;rightBtn&quot;); var leftBtn = document.getElementById(&quot;leftBtn&quot;); var lis = document.getElementsByTagName(&quot;li&quot;); //lis是类数组对象，getElementsByTagName得到的元素们是类数组对象，不是数组 //所以lis没有pop方法、没有unshift()方法！ var liArray = []; //存放每个li的数组 var JSONarr = []; //把所有的状态都推入数组： for(var i = 0 ; i &lt; lis.length ; i++)&#123; JSONarr.push(&#123; &quot;width&quot; : parseInt(fetchComputedStyle(lis[i],&quot;width&quot;)), &quot;height&quot; : parseInt(fetchComputedStyle(lis[i],&quot;height&quot;)), &quot;left&quot; : parseInt(fetchComputedStyle(lis[i],&quot;left&quot;)), &quot;top&quot; : parseInt(fetchComputedStyle(lis[i],&quot;top&quot;)), &quot;opacity&quot; : parseInt(fetchComputedStyle(lis[i],&quot;opacity&quot;)) &#125;); //liArray就和lis是一样的结构，lis是类数组对象，而liArray是数组 liArray.push(lis[i]); &#125; //console.log(JSONarr); //右按钮的监听 rightBtn.onclick = rightBtnHandler; var timer = setInterval(rightBtnHandler,2000); yixing.onmouseover = function()&#123;clearInterval(timer);&#125;; yixing.onmouseout = function()&#123;timer = setInterval(rightBtnHandler,2000);&#125;; function rightBtnHandler()&#123; //节流 if(liArray[1].isanimated) return; //让1、2、3、4、5、6元素都分别变为数组中的0、1、2、3、4、5的状态 for(var i = 1 ; i &lt;= 6 ; i++)&#123; animate(liArray[i],JSONarr[i - 1],600,&quot;BounceEaseOut&quot;); &#125; //让0号元素瞬移 for(var k in JSONarr[6])&#123; liArray[0].style[k] = JSONarr[6][k] + &quot;px&quot;; &#125; //交换身份！！ liArray.push(liArray.shift()); &#125; //左按钮的监听 leftBtn.onclick = function()&#123; //节流 if(liArray[1].isanimated) return; for(var i = 0 ; i &lt;= 5 ; i++)&#123; animate(liArray[i],JSONarr[i + 1],600,&quot;BounceEaseOut&quot;); &#125; //让0号元素瞬移 for(var k in JSONarr[0])&#123; liArray[6].style[k] = JSONarr[0][k] + &quot;px&quot;; &#125; //交换身份！！ liArray.unshift(liArray.pop()); &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>异形滚动</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[间歇轮播]]></title>
    <url>%2F2019%2F02%2F25%2F%E9%97%B4%E6%AD%87%E8%BD%AE%E6%92%AD%2F</url>
    <content type="text"><![CDATA[小窗口间歇轮播处理时候只需要复制第一个图片。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;间歇轮播&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123; padding: 0; margin: 0; &#125; div&#123; width: 600px; height: 40px; line-height: 40px; border: 1px solid red; margin: 100px; position: relative; overflow: hidden; &#125; div ul&#123; position: absolute; top: 0; left: 0; list-style: none; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;ul&gt; &lt;li&gt;通知：明天上课啊，后天也上课啊！&lt;/li&gt; &lt;li&gt;通知：熬过三天就休息了！&lt;/li&gt; &lt;li&gt;通知：哈哈哈哈哈哈哈哈哈哈！&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;animate-2.0.1.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; //得到所有元素 var ul = document.getElementsByTagName(&quot;ul&quot;)[0]; var lis = document.getElementsByTagName(&quot;li&quot;); var length = lis.length; //复制第0个li，追加到后面，当做魔术元素，猫腻 ul.appendChild(lis[0].cloneNode(true)); //信号量 var idx = 0; //模拟右按钮的业务 function move()&#123; idx++; animate(ul,&#123;&quot;top&quot;:-40 * idx&#125;,800,function()&#123; if(idx &gt; length - 1)&#123; idx = 0; this.style.top = &quot;0px&quot;; &#125; &#125;); &#125; //调用动画函数的间隔时间，要远大于动画运行时间 //这时就给人感觉一个间歇的过程 setInterval(move, 1800); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 大窗口间歇轮播这个处理的时候全部内容复制一份。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;间歇轮播&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123; padding: 0; margin: 0; &#125; div&#123; width: 600px; height: 200px; line-height: 40px; border: 1px solid blue; margin: 100px; position: relative; overflow: hidden; &#125; div ul&#123; position: absolute; top: 0; left: 0; list-style: none; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;ul&gt; &lt;li&gt;邱*健 北京*狐网络有线公司 16k&lt;/li&gt; &lt;li&gt;李*波 北京*东网络有线公司 26k&lt;/li&gt; &lt;li&gt;王* 北京*60网络有线公司 36k&lt;/li&gt; &lt;li&gt;赵* 北京*60网络有线公司 36k&lt;/li&gt; &lt;li&gt;马* 北京*60网络有线公司 36k&lt;/li&gt; &lt;li&gt;刘* 北京*60网络有线公司 36k&lt;/li&gt; &lt;li&gt;李* 北京*60网络有线公司 36k&lt;/li&gt; &lt;li&gt;李** 北京*60网络有线公司 36k&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;animate-2.0.1.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; //得到所有元素 var ul = document.getElementsByTagName(&quot;ul&quot;)[0]; var lis = document.getElementsByTagName(&quot;li&quot;); var length = lis.length; //复制所有li，追加到ul里 ul.innerHTML += ul.innerHTML; //信号量 var idx = 0; //模拟右按钮的业务 function move()&#123; idx++; animate(ul,&#123;&quot;top&quot;:-40 * idx&#125;,800,function()&#123; if(idx &gt; length - 1)&#123; idx = 0; this.style.top = &quot;0px&quot;; &#125; &#125;); &#125; //调用动画函数的间隔时间，要远大于动画运行时间 //这时就给人感觉一个间歇的过程 setInterval(move, 1800); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 横图间歇轮播12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;间歇轮播&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123; margin: 0; padding: 0; &#125; .rolling&#123; width: 800px; height: 130px; border: 10px solid #ccc; margin: 100px auto; position: relative; overflow: hidden; &#125; .rolling .m_unit&#123; /*这是运动的单位*/ /*这个宽度足以致命，为了让所有的li能够并排*/ /*这个宽度随便取，大一点*/ width: 5000px; position: absolute; top: 0; left: 0; &#125; .rolling ul&#123; list-style: none; &#125; .rolling ul li&#123; float: left; margin-right: 10px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;rolling&quot; id=&quot;rolling&quot;&gt; &lt;div class=&quot;m_unit&quot; id=&quot;m_unit&quot;&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;images/shuzi/0.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;images/shuzi/1.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;images/shuzi/2.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;images/shuzi/3.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;images/shuzi/4.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;images/shuzi/5.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;images/shuzi/6.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;images/shuzi/7.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;animate-2.0.1.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; //得到元素 var rolling = document.getElementById(&quot;rolling&quot;); var m_unit = document.getElementById(&quot;m_unit&quot;); var listul = m_unit.getElementsByTagName(&quot;ul&quot;)[0]; //得到图片的数量，计算折返点用的，折返点就是210 * 图片数量 var lislength = listul.getElementsByTagName(&quot;li&quot;).length; //复制一倍的li listul.innerHTML += listul.innerHTML; //信号量 var idx = 0; //模拟右按钮的业务 function move()&#123; idx++; animate(m_unit,&#123;&quot;left&quot;:-210 * idx&#125;,800,function()&#123; if(idx &gt; lislength - 1)&#123; idx = 0; this.style.left = &quot;0px&quot;; &#125; &#125;); &#125; //调用动画函数的间隔时间，要远大于动画运行时间 //这时就给人感觉一个间歇的过程 var timer = setInterval(move, 2000); rolling.onmouseover = function()&#123; clearInterval(timer); &#125; rolling.onmouseout = function()&#123; timer = setInterval(move, 2000); &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>间歇轮播</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[setTimeout()和函数节流]]></title>
    <url>%2F2019%2F02%2F25%2FsetTimeout()%E5%92%8C%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81%2F</url>
    <content type="text"><![CDATA[setTimeout()方法setInterval是设置间隔器；setTimeout是设置延时器。 window.setTimeout(函数,时间);在指定时间之后，执行函数一次，仅仅执行1次，同样的，它也是window对象的方法，可以不写window在3000毫秒之后，控制台显示你好，仅仅显示1次：123setTimeout(function()&#123;console.log(&quot;你好&quot;); &#125;, 3000); 延时器也能被清除，当延时器没有执行的时候，就可以清除，清除不会触发函数。 clearTimeout();主要用于鼠标离开时，效果延迟消失。此处用于节流。 函数节流所谓的函数节流，就是我们希望一些函数不要连续的触发。甚至于规定，触发这个函数的最小间隔是多少时间。例如：轮播图点击的时候连续快点，速度并不变快。防止用户的流氓行为。 这个就是函数节流。 方法1： 经典的函数节流模型：12345678 var lock = true; // 设置一个锁 input.onclick = function()&#123; if(!lock) return; lock = false; setTimeout(function()&#123; lock = true; &#125;,1000);&#125; 方法2：改变我们的运动框架，在运动框架里面加上一个逻辑：运动开始了，就给elem加上一个属性isanimated，表示是否在运动，未定义flase改为true。然后运动停止之后，停表之后，把elem.isanimated设为false .onclick = function(){ if(m_unit.isanimate) return; //如果点击按钮的时候运动机构在动，那么return3 }]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>setTimeout()和函数节流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[传统&呼吸 轮播]]></title>
    <url>%2F2019%2F02%2F25%2F%E4%BC%A0%E7%BB%9F%26%E5%91%BC%E5%90%B8%20%E8%BD%AE%E6%92%AD%2F</url>
    <content type="text"><![CDATA[传统的轮播图一个 carousel 轮播图，图片实现自动轮播，可以左右按钮播放，点小圆点也能实现换图。同时设置节流。一个小知识点：行内插入 JavaScript 代码一个a标签，但是我们不希望点击之后有任何默认的事情，默认事情通常是刷新当前页：&lt;a href=&quot;javascript:;&quot; &gt;&lt;/a&gt; //点击无任何效果还可以&lt;a href=&quot;javascript:alert(&quot;干什么，不知道我是行内代码吗？&quot;;&quot;&gt;&lt;/a&gt; //弹出alertlt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;自动传统轮播&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123; margin: 0; padding: 0; &#125; .carousel&#123; width: 560px; height: 300px; margin: 100px auto; border: 1px solid #333; position: relative; overflow: hidden; &#125; .carousel .m_unit&#123; width: 5000px; height: 300px; position: absolute; top: 0; left: 0; &#125; .carousel ul&#123; list-style: none; &#125; .carousel ul li&#123; float: left; width: 560px; height: 300px; &#125; .btns a&#123; position: absolute; width: 40px; height: 40px; top: 50%; margin-top: -20px; background-color: orange; font-size: 30px; line-height: 40px; text-align: center; border-radius: 50%; font-weight: bold; cursor: pointer; z-index: 999; &#125; .btns a:hover&#123; background-color: gold; &#125; .leftBtn&#123; left: 10px; &#125; .rightBtn&#123; right: 10px; &#125; .circles&#123; position: absolute; width: 150px; height: 16px; bottom: 10px; right: 10px; &#125; .circles ol&#123; list-style: none; &#125; .circles ol li&#123; float: left; width: 16px; height: 16px; background-color: orange; margin-right: 6px; border-radius: 50%; cursor: pointer; opacity: 0.6; &#125; .circles ol li.cur&#123; background-color: red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;carousel&quot; id=&quot;carousel&quot;&gt; &lt;div class=&quot;btns&quot;&gt; &lt;a class=&quot;leftBtn&quot; id=&quot;leftBtn&quot;&gt;&lt;/a&gt; &lt;a class=&quot;rightBtn&quot; id=&quot;rightBtn&quot;&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;m_unit&quot; id=&quot;m_unit&quot;&gt; &lt;ul&gt; &lt;li&gt;&lt;a&gt;&lt;img src=&quot;images/0.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a&gt;&lt;img src=&quot;images/1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a&gt;&lt;img src=&quot;images/2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a&gt;&lt;img src=&quot;images/3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a&gt;&lt;img src=&quot;images/4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;circles&quot; id=&quot;circles&quot;&gt; &lt;ol&gt; &lt;li class=&quot;cur&quot;&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; &lt;/div&gt; // version2.0.1// 这个版本主要修改:// 1)修改了变量名frameNumber// 2)让回调函数中的this就是elem// 3)增加了缓冲功能// 4)函数的重载// 5)为了函数节流方便，我们给运动的这个对象添加了一个属性isanimated，动画的时候这个属性是true，动画停止就是false。/* * animate函数是动画封装函数 * @para0 elem参数就是运动的对象 * @para1 targetJSON参数就是运动的终点状态，可以写px，也可以不写px * @para2 time是运动总时间，毫秒为单位 * @para3 tweenString缓冲描述词，比如&quot;Linear&quot;，可选 * @para4 callback是回调函数，可选 * return 本函数没有返回值*/function animate(elem , targetJSON , time , tweenString , callback)&#123; //函数重载，用户传进来的参数数量、类型可能不一样 //检查数量和类型 if(arguments.length &lt; 3 || typeof arguments[0] != &quot;object&quot; || typeof arguments[1] != &quot;object&quot; || typeof arguments[2] != &quot;number&quot;)&#123; throw new Error(&quot;对不起，你传进来的参数数量不对或者参数类型不对，请仔细检查哦！&quot;); return; &#125;else if(arguments.length == 3)&#123; //用户只传进来3个参数，表示tweenString、callback被省略了，那么我们默认使用Linear当做缓冲词 tweenString = &quot;Linear&quot;; //默认回调函数是null callback = null; &#125;else if(arguments.length == 4)&#123; //用户只传进来4个参数，第4个参数可能传进来的是tweenString，也可能是callback switch(typeof arguments[3])&#123; case &quot;string&quot; : //用户传进来的是缓冲描述词儿，所以就把callback补为null callback = null; break; case &quot;function&quot; : callback = arguments[3]; arguments[3] = &quot;Linear&quot;; break; default : throw new Error(&quot;抱歉，第4个参数要么是缓冲描述词，要么是回调函数，请检查！&quot;); &#125; &#125; //动画间隔要根据不同浏览器来设置： if(window.navigator.userAgent.indexOf(&quot;MSIE&quot;) != -1)&#123; var interval = 50; &#125;else&#123; var interval = 20; &#125; //强行给我们的动画元素增加一个isanimated的属性，是否正在运动 elem.isanimated = true; //初始状态，放在origninalJSON里面 var originalJSON = &#123;&#125;; //变化的多少，放在deltaJSON里面 var deltaJSON = &#123;&#125;; //给信号量对象添加属性，添加什么属性，目标对象中有什么属性，这里就添加什么属性 //值就是当前的计算样式 for(var k in targetJSON)&#123; //初试JSON originalJSON[k] = parseFloat(fetchComputedStyle(elem , k)); //把每个targetJSON中的值都去掉px targetJSON[k] = parseFloat(targetJSON[k]); //变化量JSON deltaJSON[k] = targetJSON[k] - originalJSON[k]; &#125; // 至此我们得到了三个JSON： // originalJSON 初始状态集合，这个JSON永远不变 // targetJSON 目标状态集合，这个JSON永远不变 // deltaJSON 差值集合，这个JSON永远不变 // console.log(originalJSON); // console.log(targetJSON); // console.log(deltaJSON); //总执行函数次数： var maxFrameNumber = time / interval; //当前帧编号 var frameNumber = 0; //这是一个临时变量一会儿用 var n; //定时器 var timer = setInterval(function()&#123; //要让所有的属性发生变化 for(var k in originalJSON)&#123; //动： // n就表示这一帧应该在的位置： n = Tween[tweenString](frameNumber , originalJSON[k] , deltaJSON[k] , maxFrameNumber); //根据是不是opacity来设置单位 if(k != &quot;opacity&quot;)&#123; elem.style[k] = n + &quot;px&quot;; &#125;else&#123; elem.style[k] = n; elem.style.filter = &quot;alpha(opacity=&quot; + n * 100 + &quot;)&quot;; &#125; &#125; //计数器 frameNumber++; if(frameNumber == maxFrameNumber)&#123; //次数够了，所以停表。 //这里抖一个小机灵，我们强行让elem跑到targetJSON那个位置 for(var k in targetJSON)&#123; if(k != &quot;opacity&quot;)&#123; elem.style[k] = targetJSON[k] + &quot;px&quot;; &#125;else&#123; elem.style[k] = targetJSON[k]; elem.style.filter = &quot;alpha(opacity=&quot; + (targetJSON[k] * 100) + &quot;)&quot;; &#125; &#125; //停表 clearInterval(timer); //拿掉是否在动属性，设为false elem.isanimated = false; //调用回调函数，并且让回调函数中的this表示运动的对象 //我们加上了判断，如果callback存在，再执行函数 callback &amp;&amp; callback.apply(elem); &#125; &#125;,interval); //之前的轮子，计算后样式 function fetchComputedStyle(obj , property)&#123; //能力检测 if(window.getComputedStyle)&#123; //现在要把用户输入的property中检测一下是不是驼峰，转为连字符写法 //强制把用户输入的词儿里面的大写字母，变为小写字母加- //paddingLeft → padding-left property = property.replace(/([A-Z])/g , function(match,$1)&#123; return &quot;-&quot; + $1.toLowerCase(); &#125;); return window.getComputedStyle(obj)[property]; &#125;else&#123; //IE只认识驼峰，我们要防止用户输入短横，要把短横改为大写字母 //padding-left → paddingLeft property = property.replace(/\-([a-z])/g , function(match,$1)&#123; return $1.toUpperCase(); &#125;); return obj.currentStyle[property]; &#125; &#125; //缓冲的各种公式 var Tween = &#123; Linear: function(t, b, c, d) &#123; return c * t / d + b; &#125;, //二次的 QuadEaseIn: function(t, b, c, d) &#123; return c * (t /= d) * t + b; &#125;, QuadEaseOut: function(t, b, c, d) &#123; return -c * (t /= d) * (t - 2) + b; &#125;, QuadEaseInOut: function(t, b, c, d) &#123; if ((t /= d / 2) &lt; 1) return c / 2 * t * t + b; return -c / 2 * ((--t) * (t - 2) - 1) + b; &#125;, //三次的 CubicEaseIn: function(t, b, c, d) &#123; return c * (t /= d) * t * t + b; &#125;, CubicEaseOut: function(t, b, c, d) &#123; return c * ((t = t / d - 1) * t * t + 1) + b; &#125;, CubicEaseInOut: function(t, b, c, d) &#123; if ((t /= d / 2) &lt; 1) return c / 2 * t * t * t + b; return c / 2 * ((t -= 2) * t * t + 2) + b; &#125;, //四次的 QuartEaseIn: function(t, b, c, d) &#123; return c * (t /= d) * t * t * t + b; &#125;, QuartEaseOut: function(t, b, c, d) &#123; return -c * ((t = t / d - 1) * t * t * t - 1) + b; &#125;, QuartEaseInOut: function(t, b, c, d) &#123; if ((t /= d / 2) &lt; 1) return c / 2 * t * t * t * t + b; return -c / 2 * ((t -= 2) * t * t * t - 2) + b; &#125;, QuartEaseIn: function(t, b, c, d) &#123; return c * (t /= d) * t * t * t * t + b; &#125;, QuartEaseOut: function(t, b, c, d) &#123; return c * ((t = t / d - 1) * t * t * t * t + 1) + b; &#125;, QuartEaseInOut: function(t, b, c, d) &#123; if ((t /= d / 2) &lt; 1) return c / 2 * t * t * t * t * t + b; return c / 2 * ((t -= 2) * t * t * t * t + 2) + b; &#125;, //正弦的 SineEaseIn: function(t, b, c, d) &#123; return -c * Math.cos(t / d * (Math.PI / 2)) + c + b; &#125;, SineEaseOut: function(t, b, c, d) &#123; return c * Math.sin(t / d * (Math.PI / 2)) + b; &#125;, SineEaseInOut: function(t, b, c, d) &#123; return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b; &#125;, ExpoEaseIn: function(t, b, c, d) &#123; return (t == 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b; &#125;, ExpoEaseOut: function(t, b, c, d) &#123; return (t == d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b; &#125;, ExpoEaseInOut: function(t, b, c, d) &#123; if (t == 0) return b; if (t == d) return b + c; if ((t /= d / 2) &lt; 1) return c / 2 * Math.pow(2, 10 * (t - 1)) + b; return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b; &#125;, CircEaseIn: function(t, b, c, d) &#123; return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b; &#125;, CircEaseOut: function(t, b, c, d) &#123; return c * Math.sqrt(1 - (t = t / d - 1) * t) + b; &#125;, CircEaseInOut: function(t, b, c, d) &#123; if ((t /= d / 2) &lt; 1) return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b; return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b; &#125;, ElasticEaseIn: function(t, b, c, d, a, p) &#123; if (t == 0) return b; if ((t /= d) == 1) return b + c; if (!p) p = d * .3; if (!a || a &lt; Math.abs(c)) &#123; a = c; var s = p / 4; &#125; else var s = p / (2 * Math.PI) * Math.asin(c / a); return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b; &#125;, ElasticEaseOut: function(t, b, c, d, a, p) &#123; if (t == 0) return b; if ((t /= d) == 1) return b + c; if (!p) p = d * .3; if (!a || a &lt; Math.abs(c)) &#123; a = c; var s = p / 4; &#125; else var s = p / (2 * Math.PI) * Math.asin(c / a); return (a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b); &#125;, ElasticEaseInOut: function(t, b, c, d, a, p) &#123; if (t == 0) return b; if ((t /= d / 2) == 2) return b + c; if (!p) p = d * (.3 * 1.5); if (!a || a &lt; Math.abs(c)) &#123; a = c; var s = p / 4; &#125; else var s = p / (2 * Math.PI) * Math.asin(c / a); if (t &lt; 1) return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b; return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b; &#125;, //冲过头系列 BackEaseIn: function(t, b, c, d, s) &#123; if (s == undefined) s = 1.70158; return c * (t /= d) * t * ((s + 1) * t - s) + b; &#125;, BackEaseOut: function(t, b, c, d, s ) &#123; if (s == undefined) s = 1.70158; return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b; &#125;, BackEaseInOut: function(t, b, c, d, s) &#123; if (s == undefined) s = 1.70158; if ((t /= d / 2) &lt; 1) return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b; return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b; &#125;, //弹跳系列 BounceEaseIn: function(t, b, c, d) &#123; return c - Tween.BounceEaseOut(d - t, 0, c, d) + b; &#125;, BounceEaseOut: function(t, b, c, d) &#123; if ((t /= d) &lt; (1 / 2.75)) &#123; return c * (7.5625 * t * t) + b; &#125; else if (t &lt; (2 / 2.75)) &#123; return c * (7.5625 * (t -= (1.5 / 2.75)) * t + .75) + b; &#125; else if (t &lt; (2.5 / 2.75)) &#123; return c * (7.5625 * (t -= (2.25 / 2.75)) * t + .9375) + b; &#125; else &#123; return c * (7.5625 * (t -= (2.625 / 2.75)) * t + .984375) + b; &#125; &#125;, BounceEaseInOut: function(t, b, c, d) &#123; if (t &lt; d / 2) return Tween.BounceEaseIn(t * 2, 0, c, d) * .5 + b; else return Tween.BounceEaseOut(t * 2 - d, 0, c, d) * .5 + c * .5 + b; &#125; &#125;;&#125; &lt;script type=&quot;text/javascript&quot;&gt; //得到carousel var carousel = document.getElementById(&quot;carousel&quot;); //得到运动机构 var m_unit = document.getElementById(&quot;m_unit&quot;); //得到ul var carouselUL = m_unit.getElementsByTagName(&quot;ul&quot;)[0]; //得到li var lis = m_unit.getElementsByTagName(&quot;li&quot;); //得到按钮 var leftBtn = document.getElementById(&quot;leftBtn&quot;); var rightBtn = document.getElementById(&quot;rightBtn&quot;); //得到小圆点 var circlesLi = document.getElementById(&quot;circles&quot;).getElementsByTagName(&quot;li&quot;); //图片数量 var imgLength = lis.length; //图片宽度 var width = 560; //滚动速度 var animatetime = 600; //缓冲描述 var tween = &quot;BounceEaseOut&quot;; //间隔时间 var interval = 2000; //函数截流 var lock = true; //把0号li克隆，然后插入到carouselUL的最后面 //先放在心里，我们下午有专题DOM节点操作 carouselUL.appendChild(lis[0].cloneNode(true)); //信号量 var nowimg = 0; //0、1、2、3、4。 5是临时状态 //右按钮的事件 rightBtn.onclick = rightBtnHandler; //自动轮播 var timer = setInterval(rightBtnHandler,interval); //鼠标进入停止 carousel.onmouseover = function()&#123; clearInterval(timer); &#125; //鼠标离开开始 carousel.onmouseout = function()&#123; timer = setInterval(rightBtnHandler,interval); &#125; //右按钮的事件处理程序 function rightBtnHandler()&#123; //点击右按钮的时候，运动机构本身在运动，就不让右按钮有任何作用 if(m_unit.isanimated)&#123;console.log(m_unit.isanimated); return;&#125; nowimg ++; changeCircle(); animate(m_unit,&#123;&quot;left&quot;:-width * nowimg&#125;,animatetime,tween,function()&#123; if(nowimg &gt; imgLength - 1)&#123; nowimg = 0; this.style.left = &quot;0px&quot;; &#125; &#125;); &#125; //左按钮的事件 leftBtn.onclick = function()&#123; //点击左按钮的时候，运动机构本身在运动，就不让右按钮有任何作用 if(m_unit.isanimated) return; //左按钮的业务 nowimg--; if(nowimg &lt; 0)&#123; nowimg = imgLength - 1; m_unit.style.left = -width * imgLength + &quot;px&quot;; &#125; changeCircle(); animate(m_unit,&#123;&quot;left&quot;:-width * nowimg&#125;,animatetime,tween); &#125; //批量添加小圆点的监听 for(var i = 0 ; i &lt;= imgLength - 1 ; i++)&#123; circlesLi[i].index = i; //先编号 circlesLi[i].onclick = function()&#123; //点击小圆点的时候，运动机构本身在运动，就不让右按钮有任何作用 if(m_unit.isanimated) return; //小圆点的点击业务 nowimg = this.index; animate(m_unit,&#123;&quot;left&quot;:-width * nowimg&#125;,animatetime,tween); changeCircle(); &#125; &#125; //更换小圆点函数 function changeCircle()&#123; //n就是信号量的副本 var n = nowimg; //判断副本的值如果是5，那么就是0 if(n == 5)&#123; n = 0; &#125; //去掉所有小圆点的cur for (var i = 0; i &lt; circlesLi.length; i++) &#123; circlesLi[i].className = &quot;&quot;; &#125; //第信号量这个小圆点加cur circlesLi[n].className = &quot;cur&quot;; &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 呼吸轮播(交叉淡入淡出轮播) 呼吸轮播一种是采用传统轮播加上改变透明度 opacity 得值。 第二种图片采用叠加。所有的 li 盒子绝对定位 opacity 为 0 。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;呼吸轮播(交叉淡入淡出轮播)&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123; margin: 0; padding: 0; &#125; .carousel&#123; width: 560px; height: 300px; margin: 100px auto; border: 1px solid #333; position: relative; &#125; .carousel ul&#123; list-style: none; &#125; .carousel ul li&#123; position: absolute; top: 0; left: 0; opacity: 0; filter:alpha(opacity = 0); &#125; .carousel ul li.first&#123; opacity: 1; filter:alpha(opacity = 0); &#125; .btns a&#123; position: absolute; width: 40px; height: 40px; top: 50%; margin-top: -20px; background-color: orange; font-size: 30px; line-height: 40px; text-align: center; border-radius: 50%; font-weight: bold; cursor: pointer; z-index: 999; &#125; .btns a:hover&#123; background-color: gold; &#125; .leftBtn&#123; left: 10px; &#125; .rightBtn&#123; right: 10px; &#125; .circles&#123; position: absolute; width: 150px; height: 16px; bottom: 10px; right: 10px; &#125; .circles ol&#123; list-style: none; &#125; .circles ol li&#123; float: left; width: 16px; height: 16px; background-color: orange; margin-right: 6px; border-radius: 50%; cursor: pointer; &#125; .circles ol li.cur&#123; background-color: red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;carousel&quot; id=&quot;carousel&quot;&gt; &lt;div class=&quot;btns&quot;&gt; &lt;a class=&quot;leftBtn&quot; id=&quot;leftBtn&quot;&gt;&lt;/a&gt; &lt;a class=&quot;rightBtn&quot; id=&quot;rightBtn&quot;&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;imageslist&quot; id=&quot;imageslist&quot;&gt; &lt;ul&gt; &lt;li class=&quot;first&quot;&gt;&lt;a&gt;&lt;img src=&quot;images/0.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a&gt;&lt;img src=&quot;images/1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a&gt;&lt;img src=&quot;images/2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a&gt;&lt;img src=&quot;images/3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a&gt;&lt;img src=&quot;images/4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;circles&quot; id=&quot;circles&quot;&gt; &lt;ol&gt; &lt;li class=&quot;cur&quot;&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; &lt;/div&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;animate-2.0.1.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; //得到carousel var carousel = document.getElementById(&quot;carousel&quot;); //得到li var lis = document.getElementById(&quot;imageslist&quot;).getElementsByTagName(&quot;li&quot;); //得到按钮 var leftBtn = document.getElementById(&quot;leftBtn&quot;); var rightBtn = document.getElementById(&quot;rightBtn&quot;); //得到小圆点 var circlesLi = document.getElementById(&quot;circles&quot;).getElementsByTagName(&quot;li&quot;); //图片数量 var imgLength = lis.length; //图片宽度 var width = 560; //滚动速度 var animatetime = 300; //缓冲描述 var tween = &quot;Linear&quot;; //间隔时间 var interval = 2000; var idx = 0; //自动轮播 var timer = setInterval(rightBtnHandler,interval); //鼠标进入停止 carousel.onmouseover = function()&#123; clearInterval(timer); &#125; //鼠标离开开始 carousel.onmouseout = function()&#123; timer = setInterval(rightBtnHandler,interval); &#125; //右按钮的监听 rightBtn.onclick = rightBtnHandler; function rightBtnHandler()&#123; //函数截流 if(lis[idx].isanimated) return; //原来的信号量的图片淡出 animate(lis[idx],&#123;&quot;opacity&quot; : 0&#125;,1000); //信号量改变 idx++; if(idx &gt; imgLength - 1)&#123; idx = 0; &#125; //新信号量的图片淡入 animate(lis[idx],&#123;&quot;opacity&quot; : 1&#125;,1000); changeCircle(); &#125; //左按钮的监听 leftBtn.onclick = function()&#123; //函数截流 if(lis[idx].isanimated) return; //原来的信号量的图片淡出 animate(lis[idx],&#123;&quot;opacity&quot; : 0&#125;,1000); //信号量改变 idx--; if(idx &lt; 0)&#123; idx = imgLength - 1; &#125; //新信号量的图片淡入 animate(lis[idx],&#123;&quot;opacity&quot; : 1&#125;,1000); changeCircle(); &#125; //批量添加小圆点的监听 for(var i = 0 ; i &lt;= imgLength - 1 ; i++)&#123; circlesLi[i].index = i; //先编号 circlesLi[i].onclick = function()&#123; //截流 if(lis[idx].isanimated) return; //原来的信号量的图片淡出 animate(lis[idx],&#123;&quot;opacity&quot; : 0&#125;,1000); //信号量改变 idx = this.index; //新信号量的图片淡入 animate(lis[idx],&#123;&quot;opacity&quot; : 1&#125;,1000); changeCircle(); &#125; &#125; //更换小圆点函数 function changeCircle()&#123; //去掉所有小圆点的cur for (var i = 0; i &lt; circlesLi.length; i++) &#123; circlesLi[i].className = &quot;&quot;; &#125; //第信号量这个小圆点加cur circlesLi[idx].className = &quot;cur&quot;; &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 图片点击 bug 因为图片的透明度为 0，当点击图片总是点击最上面的。使用display:block/none 解决。思路就是：li 里面加none 显示的li 放 block ，老图回调函数放 none 新图先把透明度变为 0，再出现 display:block 完了。同时给左右按钮和小圆点添加就行了。1234567891011121314151617181920212223242526272829303132.carousel .imageList ul li&#123; position: absolute; top: 0; left: 0; width: 560px; height: 300px; display: none; //新增 &#125; .carousel .imageList ul li.first&#123; opacity: 1; display: block; //新增 &#125;leftBtn.onclick = function()&#123; //函数节流 if(imageLis[idx].isanimated) return; //老图淡出 animate(imageLis[idx],&#123;&quot;opacity&quot;:0&#125;,options.animatetime,function()&#123; this.style.display = &quot;none&quot;; &#125;); //信号量的变化 idx --; if(idx &lt; 0)&#123; idx = imageLength - 1; &#125; //新图淡入之前，先让新图显示，并且让新图瞬间把opacity置为0 imageLis[idx].style.display = &quot;block&quot;; imageLis[idx].style.opacity = &quot;0&quot;; imageLis[idx].style.filter = &quot;alpha(opacity=0)&quot;; animate(imageLis[idx],&#123;&quot;opacity&quot;:1&#125;,options.animatetime); //设置小圆点 changeCircles(); &#125; 呼吸轮播变种给呼吸轮播的中间效果改变修改一下。采用回调函数，使出现的慢于消失的。类似下面的代码1234567891011121314151617//右按钮的监听 rightBtn.onclick = function()&#123; //函数截流 if(lis[idx].isanimated) return; //原来的信号量的图片淡出 animate(lis[idx],&#123;&quot;opacity&quot; : 0&#125;,animatetime,function()&#123; //信号量改变 idx++; if(idx &gt; imgLength - 1)&#123; idx = 0; &#125; //新信号量的图片淡入 animate(lis[idx],&#123;&quot;opacity&quot; : 1&#125;,animatetime); changeCircle(); &#125;); &#125; 三位置轮播传统轮播的“火车法”的问题是，小圆点点击的时候，拉动的图片，跳跃性大。比如现在是0号图，点击3号小圆点，就会看见1号、2号，停留在3号图。不是平滑过渡。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;三位置轮播&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123; margin: 0; padding: 0; &#125; img&#123; border:none; &#125; .carousel&#123; width: 560px; height: 300px; margin: 100px auto; border: 1px solid #000; position: relative; overflow: hidden; &#125; .carousel .imageList ul&#123; list-style: none; position: relative; &#125; .carousel .imageList ul li&#123; position: absolute; top: 0; left: 560px; width: 560px; height: 300px; &#125; .carousel .imageList ul li.first&#123; left: 0; &#125; .btns a&#123; position: absolute; width: 40px; height: 40px; top: 50%; margin-top: -20px; background-color: yellow; z-index: 999; &#125; .btns a.leftBtn&#123; left: 10px; &#125; .btns a.rightBtn&#123; right: 10px; &#125; .circles&#123; position: absolute; bottom: 10px; right: 10px; width: 150px; height: 18px; &#125; .circles ol&#123; list-style: none; &#125; .circles ol li&#123; float: left; width: 18px; height: 18px; margin-right: 10px; border-radius: 50%; background-color: pink; cursor: pointer; &#125; .circles ol li.cur&#123; background-color: purple; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;carousel&quot; id=&quot;carousel&quot;&gt; &lt;div class=&quot;btns&quot;&gt; &lt;a href=&quot;javascript:;&quot; class=&quot;leftBtn&quot; id=&quot;leftBtn&quot;&gt;&lt;/a&gt; &lt;a href=&quot;javascript:;&quot; class=&quot;rightBtn&quot; id=&quot;rightBtn&quot;&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;imageList&quot; id=&quot;imageList&quot;&gt; &lt;ul&gt; &lt;li class=&quot;first&quot;&gt;&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;images/0.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;images/1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;images/2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;images/3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;images/4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;circles&quot; id=&quot;circles&quot;&gt; &lt;ol&gt; &lt;li class=&quot;cur&quot;&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; &lt;/div&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;js/animate-2.0.1.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; //得到元素 var carousel = document.getElementById(&quot;carousel&quot;); var leftBtn = document.getElementById(&quot;leftBtn&quot;); var rightBtn = document.getElementById(&quot;rightBtn&quot;); var circles = document.getElementById(&quot;circles&quot;); var imageList = document.getElementById(&quot;imageList&quot;); var imageUL = imageList.getElementsByTagName(&quot;ul&quot;)[0]; var imageLis = imageUL.getElementsByTagName(&quot;li&quot;); var circlesLis = circles.getElementsByTagName(&quot;li&quot;); var idx = 0; rightBtn.onclick = function()&#123; //节流 if(imageLis[idx].isanimated) return; //原信号量的图片移动到-560 animate(imageLis[idx],&#123;&quot;left&quot;:-560&#125;,700,&quot;QuadEaseOut&quot;); //信号量改变 idx++; if(idx &gt; 4)&#123; idx = 0; &#125; //新信号量的这个图片先瞬移到560 standby等待 imageLis[idx].style.left = &quot;520px&quot;; //拉！新信号量运动 animate(imageLis[idx],&#123;&quot;left&quot;:0&#125;,700,&quot;QuadEaseOut&quot;); //改变小圆点 changeCircles(); &#125; leftBtn.onclick = function()&#123; //节流 if(imageLis[idx].isanimated) return; //原信号量的图片移动到-560 animate(imageLis[idx],&#123;&quot;left&quot;:560&#125;,700,&quot;QuadEaseOut&quot;); //信号量改变 idx--; if(idx &lt; 0)&#123; idx = 4; &#125; //新信号量的这个图片先瞬移到-560 standby等待 imageLis[idx].style.left = &quot;-520px&quot;; //拉！新信号量运动 animate(imageLis[idx],&#123;&quot;left&quot;:0&#125;,700,&quot;QuadEaseOut&quot;); //改变小圆点 changeCircles(); &#125; //小圆点的监听 for (var i = 0; i &lt; circlesLis.length; i++) &#123; circlesLis[i].index = i; circlesLis[i].onclick = function()&#123; //节流 if(imageLis[idx].isanimated) return; //判断点击的小圆点和当前的信号量的关系 if(this.index &gt; idx)&#123; //点的小圆点比信号量大，所以 ←← animate(imageLis[idx],&#123;&quot;left&quot;:-560&#125;,700,&quot;QuadEaseOut&quot;); idx = this.index; //新的信号量这个图，瞬移过来，就位，等待上场 imageLis[idx].style.left = &quot;560px&quot;; animate(imageLis[idx],&#123;&quot;left&quot;:0&#125;,700,&quot;QuadEaseOut&quot;); &#125;else if(this.index &lt; idx)&#123; animate(imageLis[idx],&#123;&quot;left&quot;:560&#125;,700,&quot;QuadEaseOut&quot;); idx = this.index; //新的信号量这个图，瞬移过来，就位，等待上场 imageLis[idx].style.left = &quot;-560px&quot;; animate(imageLis[idx],&#123;&quot;left&quot;:0&#125;,700,&quot;QuadEaseOut&quot;); &#125;else&#123; alert(&quot;就是这个图，点个屁啊！&quot;); &#125; changeCircles(); &#125; &#125;; //根据信号量设置小圆点 function changeCircles()&#123; //排他 for (var i = 0; i &lt; circlesLis.length; i++) &#123; circlesLis[i].className = &quot;&quot;; &#125; circlesLis[idx].className = &quot;cur&quot;; &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 输送带轮播]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>传统&amp;呼吸 轮播</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[缓冲]]></title>
    <url>%2F2019%2F02%2F22%2F%E7%BC%93%E5%86%B2%2F</url>
    <content type="text"><![CDATA[一、缓冲 一个盒子用3000毫秒时间，从100→700，不一定是匀速的。想象一下小时候升国旗，国歌55秒，旗杆10m。小孩子总能55秒准确的升到10m顶端，过程大家懂得。 过程到底是匀速的、还是先快后慢、先慢后快呢？这就是 缓冲，英语叫做tween。缓冲的实现，非常简单，就是我们的数学家给我们提供了非常多的缓冲算法，都很好用，一个经典的缓冲。123456789function linear(t , b , c , d)&#123; return c * t / d + b; &#125;function easeIn(t,b,c,d)&#123; return c * ( t /= d) * t + b;&#125;function easeOut(t,b,c,d)&#123; return -c *(t/=d)*(t-2) + b; &#125; 他们的参数，都是t、b、c、d： 第一个参数t表示当前帧编号 第二个参数b表示起始位置 第三个参数c表示变化量 第四个参数d表示总帧数函数的返回值，就是t这一帧，元素应该在的位置。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xml:lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div&#123; width: 60px; height: 60px; background-color: orange; position: absolute; top: 100px; left: 100px; &#125; .no0&#123;top: 0px;&#125; .no1&#123;top: 100px;&#125; .no2&#123;top: 200px;&#125; .no3&#123;top: 300px;&#125; .no4&#123;top: 400px;&#125; .no5&#123;top: 500px;&#125; .no6&#123;top: 900px;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;no0&quot;&gt;&lt;/div&gt; &lt;div class=&quot;no1&quot;&gt;&lt;/div&gt; &lt;div class=&quot;no2&quot;&gt;&lt;/div&gt; &lt;div class=&quot;no3&quot;&gt;&lt;/div&gt; &lt;div class=&quot;no4&quot;&gt;&lt;/div&gt; &lt;div class=&quot;no5&quot;&gt;&lt;/div&gt; &lt;div class=&quot;no6&quot;&gt;&lt;/div&gt; var Tween = &#123; Linear: function(t, b, c, d) &#123; return c * t / d + b; &#125;, //二次的 QuadEaseIn: function(t, b, c, d) &#123; return c * (t /= d) * t + b; &#125;, QuadEaseOut: function(t, b, c, d) &#123; return -c * (t /= d) * (t - 2) + b; &#125;, QuadEaseInOut: function(t, b, c, d) &#123; if ((t /= d / 2) &lt; 1) return c / 2 * t * t + b; return -c / 2 * ((--t) * (t - 2) - 1) + b; &#125;, //三次的 CubicEaseIn: function(t, b, c, d) &#123; return c * (t /= d) * t * t + b; &#125;, CubicEaseOut: function(t, b, c, d) &#123; return c * ((t = t / d - 1) * t * t + 1) + b; &#125;, CubicEaseInOut: function(t, b, c, d) &#123; if ((t /= d / 2) &lt; 1) return c / 2 * t * t * t + b; return c / 2 * ((t -= 2) * t * t + 2) + b; &#125;, //四次的 QuartEaseIn: function(t, b, c, d) &#123; return c * (t /= d) * t * t * t + b; &#125;, QuartEaseOut: function(t, b, c, d) &#123; return -c * ((t = t / d - 1) * t * t * t - 1) + b; &#125;, QuartEaseInOut: function(t, b, c, d) &#123; if ((t /= d / 2) &lt; 1) return c / 2 * t * t * t * t + b; return -c / 2 * ((t -= 2) * t * t * t - 2) + b; &#125;, QuartEaseIn: function(t, b, c, d) &#123; return c * (t /= d) * t * t * t * t + b; &#125;, QuartEaseOut: function(t, b, c, d) &#123; return c * ((t = t / d - 1) * t * t * t * t + 1) + b; &#125;, QuartEaseInOut: function(t, b, c, d) &#123; if ((t /= d / 2) &lt; 1) return c / 2 * t * t * t * t * t + b; return c / 2 * ((t -= 2) * t * t * t * t + 2) + b; &#125;, //正弦的 SineEaseIn: function(t, b, c, d) &#123; return -c * Math.cos(t / d * (Math.PI / 2)) + c + b; &#125;, SineEaseOut: function(t, b, c, d) &#123; return c * Math.sin(t / d * (Math.PI / 2)) + b; &#125;, SineEaseInOut: function(t, b, c, d) &#123; return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b; &#125;, ExpoEaseIn: function(t, b, c, d) &#123; return (t == 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b; &#125;, ExpoEaseOut: function(t, b, c, d) &#123; return (t == d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b; &#125;, ExpoEaseInOut: function(t, b, c, d) &#123; if (t == 0) return b; if (t == d) return b + c; if ((t /= d / 2) &lt; 1) return c / 2 * Math.pow(2, 10 * (t - 1)) + b; return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b; &#125;, CircEaseIn: function(t, b, c, d) &#123; return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b; &#125;, CircEaseOut: function(t, b, c, d) &#123; return c * Math.sqrt(1 - (t = t / d - 1) * t) + b; &#125;, CircEaseInOut: function(t, b, c, d) &#123; if ((t /= d / 2) &lt; 1) return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b; return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b; &#125;, ElasticEaseIn: function(t, b, c, d, a, p) &#123; if (t == 0) return b; if ((t /= d) == 1) return b + c; if (!p) p = d * .3; if (!a || a &lt; Math.abs(c)) &#123; a = c; var s = p / 4; &#125; else var s = p / (2 * Math.PI) * Math.asin(c / a); return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b; &#125;, ElasticEaseOut: function(t, b, c, d, a, p) &#123; if (t == 0) return b; if ((t /= d) == 1) return b + c; if (!p) p = d * .3; if (!a || a &lt; Math.abs(c)) &#123; a = c; var s = p / 4; &#125; else var s = p / (2 * Math.PI) * Math.asin(c / a); return (a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b); &#125;, ElasticEaseInOut: function(t, b, c, d, a, p) &#123; if (t == 0) return b; if ((t /= d / 2) == 2) return b + c; if (!p) p = d * (.3 * 1.5); if (!a || a &lt; Math.abs(c)) &#123; a = c; var s = p / 4; &#125; else var s = p / (2 * Math.PI) * Math.asin(c / a); if (t &lt; 1) return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b; return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b; &#125;, //冲过头系列 BackEaseIn: function(t, b, c, d, s) &#123; if (s == undefined) s = 1.70158; return c * (t /= d) * t * ((s + 1) * t - s) + b; &#125;, BackEaseOut: function(t, b, c, d, s) &#123; if (s == undefined) s = 1.70158; return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b; &#125;, BackEaseInOut: function(t, b, c, d, s) &#123; if (s == undefined) s = 1.70158; if ((t /= d / 2) &lt; 1) return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b; return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b; &#125;, //弹跳系列 BounceEaseIn: function(t, b, c, d) &#123; return c - Tween.BounceEaseOut(d - t, 0, c, d) + b; &#125;, BounceEaseOut: function(t, b, c, d) &#123; if ((t /= d) &lt; (1 / 2.75)) &#123; return c * (7.5625 * t * t) + b; &#125; else if (t &lt; (2 / 2.75)) &#123; return c * (7.5625 * (t -= (1.5 / 2.75)) * t + .75) + b; &#125; else if (t &lt; (2.5 / 2.75)) &#123; return c * (7.5625 * (t -= (2.25 / 2.75)) * t + .9375) + b; &#125; else &#123; return c * (7.5625 * (t -= (2.625 / 2.75)) * t + .984375) + b; &#125; &#125;, BounceEaseInOut: function(t, b, c, d) &#123; if (t &lt; d / 2) return Tween.BounceEaseIn(t * 2, 0, c, d) * .5 + b; else return Tween.BounceEaseOut(t * 2 - d, 0, c, d) * .5 + c * .5 + b; &#125;&#125; &lt;script type=&quot;text/javascript&quot;&gt; var oDivs = document.getElementsByTagName(&quot;div&quot;);var frameNumber = 0; var timer = setInterval(function()&#123; frameNumber++; if(frameNumber == 150)&#123; clearInterval(timer); &#125; oDivs[0].style.left = Tween.Linear(frameNumber , 100 , 900 , 150) + &quot;px&quot;; oDivs[1].style.left = Tween.QuadEaseIn(frameNumber , 100 , 900 , 150) + &quot;px&quot;; oDivs[2].style.left = Tween.CubicEaseIn(frameNumber , 100 , 900 , 150) + &quot;px&quot;; oDivs[3].style.left = Tween.QuartEaseIn(frameNumber , 100 , 900 , 150) + &quot;px&quot;; oDivs[4].style.left = Tween.BackEaseOut(frameNumber , 100 , 900 , 150 , 3) + &quot;px&quot;; oDivs[5].style.left = Tween.BounceEaseOut(frameNumber , 100 , 900 , 150) + &quot;px&quot;; &#125;,20); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 一、缓冲的封装将缓冲功能封装在我们的运动框架中，比如：123aimate(oDiv,&#123;“left”:600&#125;,3000,”bounceEaseOut”,function()&#123;&#125;); 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xml:lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div&#123; width: 80px; height: 80px; background-color: yellowgreen; position: absolute; left: 100px; top: 100px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt; // version2.0.1// 这个版本主要修改:// 1)修改了变量名frameNumber// 2)让回调函数中的this就是elem// 3)增加了缓冲功能// 4)函数的重载// 5)为了函数节流方便，我们给运动的这个对象添加了一个属性isanimated，动画的时候这个属性是true，动画停止就是false。/* * animate函数是动画封装函数 * @para0 elem参数就是运动的对象 * @para1 targetJSON参数就是运动的终点状态，可以写px，也可以不写px * @para2 time是运动总时间，毫秒为单位 * @para3 tweenString缓冲描述词，比如&quot;Linear&quot;，可选 * @para4 callback是回调函数，可选 * return 本函数没有返回值*/function animate(elem , targetJSON , time , tweenString , callback)&#123; //函数重载，用户传进来的参数数量、类型可能不一样 //检查数量和类型 if(arguments.length &lt; 3 || typeof arguments[0] != &quot;object&quot; || typeof arguments[1] != &quot;object&quot; || typeof arguments[2] != &quot;number&quot;)&#123; throw new Error(&quot;对不起，你传进来的参数数量不对或者参数类型不对，请仔细检查哦！&quot;); return; &#125;else if(arguments.length == 3)&#123; //用户只传进来3个参数，表示tweenString、callback被省略了，那么我们默认使用Linear当做缓冲词 tweenString = &quot;Linear&quot;; //默认回调函数是null callback = null; &#125;else if(arguments.length == 4)&#123; //用户只传进来4个参数，第4个参数可能传进来的是tweenString，也可能是callback switch(typeof arguments[3])&#123; case &quot;string&quot; : //用户传进来的是缓冲描述词儿，所以就把callback补为null callback = null; break; case &quot;function&quot; : callback = arguments[3]; arguments[3] = &quot;Linear&quot;; break; default : throw new Error(&quot;抱歉，第4个参数要么是缓冲描述词，要么是回调函数，请检查！&quot;); &#125; &#125; //动画间隔要根据不同浏览器来设置： if(window.navigator.userAgent.indexOf(&quot;MSIE&quot;) != -1)&#123; var interval = 50; &#125;else&#123; var interval = 20; &#125; //强行给我们的动画元素增加一个isanimated的属性，是否正在运动 elem.isanimated = true; //初始状态，放在origninalJSON里面 var originalJSON = &#123;&#125;; //变化的多少，放在deltaJSON里面 var deltaJSON = &#123;&#125;; //给信号量对象添加属性，添加什么属性，目标对象中有什么属性，这里就添加什么属性 //值就是当前的计算样式 for(var k in targetJSON)&#123; //初试JSON originalJSON[k] = parseFloat(fetchComputedStyle(elem , k)); //把每个targetJSON中的值都去掉px targetJSON[k] = parseFloat(targetJSON[k]); //变化量JSON deltaJSON[k] = targetJSON[k] - originalJSON[k]; &#125; // 至此我们得到了三个JSON： // originalJSON 初始状态集合，这个JSON永远不变 // targetJSON 目标状态集合，这个JSON永远不变 // deltaJSON 差值集合，这个JSON永远不变 // console.log(originalJSON); // console.log(targetJSON); // console.log(deltaJSON); //总执行函数次数： var maxFrameNumber = time / interval; //当前帧编号 var frameNumber = 0; //这是一个临时变量一会儿用 var n; //定时器 var timer = setInterval(function()&#123; //要让所有的属性发生变化 for(var k in originalJSON)&#123; //动： // n就表示这一帧应该在的位置： n = Tween[tweenString](frameNumber , originalJSON[k] , deltaJSON[k] , maxFrameNumber); //根据是不是opacity来设置单位 if(k != &quot;opacity&quot;)&#123; elem.style[k] = n + &quot;px&quot;; &#125;else&#123; elem.style[k] = n; elem.style.filter = &quot;alpha(opacity=&quot; + n * 100 + &quot;)&quot;; &#125; &#125; //计数器 frameNumber++; if(frameNumber == maxFrameNumber)&#123; //次数够了，所以停表。 //这里抖一个小机灵，我们强行让elem跑到targetJSON那个位置 for(var k in targetJSON)&#123; if(k != &quot;opacity&quot;)&#123; elem.style[k] = targetJSON[k] + &quot;px&quot;; &#125;else&#123; elem.style[k] = targetJSON[k]; elem.style.filter = &quot;alpha(opacity=&quot; + (targetJSON[k] * 100) + &quot;)&quot;; &#125; &#125; //停表 clearInterval(timer); //拿掉是否在动属性，设为false elem.isanimated = false; //调用回调函数，并且让回调函数中的this表示运动的对象 //我们加上了判断，如果callback存在，再执行函数 callback &amp;&amp; callback.apply(elem); &#125; &#125;,interval); //之前的轮子，计算后样式 function fetchComputedStyle(obj , property)&#123; //能力检测 if(window.getComputedStyle)&#123; //现在要把用户输入的property中检测一下是不是驼峰，转为连字符写法 //强制把用户输入的词儿里面的大写字母，变为小写字母加- //paddingLeft → padding-left property = property.replace(/([A-Z])/g , function(match,$1)&#123; return &quot;-&quot; + $1.toLowerCase(); &#125;); return window.getComputedStyle(obj)[property]; &#125;else&#123; //IE只认识驼峰，我们要防止用户输入短横，要把短横改为大写字母 //padding-left → paddingLeft property = property.replace(/\-([a-z])/g , function(match,$1)&#123; return $1.toUpperCase(); &#125;); return obj.currentStyle[property]; &#125; &#125; //缓冲的各种公式 var Tween = &#123; Linear: function(t, b, c, d) &#123; return c * t / d + b; &#125;, //二次的 QuadEaseIn: function(t, b, c, d) &#123; return c * (t /= d) * t + b; &#125;, QuadEaseOut: function(t, b, c, d) &#123; return -c * (t /= d) * (t - 2) + b; &#125;, QuadEaseInOut: function(t, b, c, d) &#123; if ((t /= d / 2) &lt; 1) return c / 2 * t * t + b; return -c / 2 * ((--t) * (t - 2) - 1) + b; &#125;, //三次的 CubicEaseIn: function(t, b, c, d) &#123; return c * (t /= d) * t * t + b; &#125;, CubicEaseOut: function(t, b, c, d) &#123; return c * ((t = t / d - 1) * t * t + 1) + b; &#125;, CubicEaseInOut: function(t, b, c, d) &#123; if ((t /= d / 2) &lt; 1) return c / 2 * t * t * t + b; return c / 2 * ((t -= 2) * t * t + 2) + b; &#125;, //四次的 QuartEaseIn: function(t, b, c, d) &#123; return c * (t /= d) * t * t * t + b; &#125;, QuartEaseOut: function(t, b, c, d) &#123; return -c * ((t = t / d - 1) * t * t * t - 1) + b; &#125;, QuartEaseInOut: function(t, b, c, d) &#123; if ((t /= d / 2) &lt; 1) return c / 2 * t * t * t * t + b; return -c / 2 * ((t -= 2) * t * t * t - 2) + b; &#125;, QuartEaseIn: function(t, b, c, d) &#123; return c * (t /= d) * t * t * t * t + b; &#125;, QuartEaseOut: function(t, b, c, d) &#123; return c * ((t = t / d - 1) * t * t * t * t + 1) + b; &#125;, QuartEaseInOut: function(t, b, c, d) &#123; if ((t /= d / 2) &lt; 1) return c / 2 * t * t * t * t * t + b; return c / 2 * ((t -= 2) * t * t * t * t + 2) + b; &#125;, //正弦的 SineEaseIn: function(t, b, c, d) &#123; return -c * Math.cos(t / d * (Math.PI / 2)) + c + b; &#125;, SineEaseOut: function(t, b, c, d) &#123; return c * Math.sin(t / d * (Math.PI / 2)) + b; &#125;, SineEaseInOut: function(t, b, c, d) &#123; return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b; &#125;, ExpoEaseIn: function(t, b, c, d) &#123; return (t == 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b; &#125;, ExpoEaseOut: function(t, b, c, d) &#123; return (t == d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b; &#125;, ExpoEaseInOut: function(t, b, c, d) &#123; if (t == 0) return b; if (t == d) return b + c; if ((t /= d / 2) &lt; 1) return c / 2 * Math.pow(2, 10 * (t - 1)) + b; return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b; &#125;, CircEaseIn: function(t, b, c, d) &#123; return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b; &#125;, CircEaseOut: function(t, b, c, d) &#123; return c * Math.sqrt(1 - (t = t / d - 1) * t) + b; &#125;, CircEaseInOut: function(t, b, c, d) &#123; if ((t /= d / 2) &lt; 1) return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b; return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b; &#125;, ElasticEaseIn: function(t, b, c, d, a, p) &#123; if (t == 0) return b; if ((t /= d) == 1) return b + c; if (!p) p = d * .3; if (!a || a &lt; Math.abs(c)) &#123; a = c; var s = p / 4; &#125; else var s = p / (2 * Math.PI) * Math.asin(c / a); return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b; &#125;, ElasticEaseOut: function(t, b, c, d, a, p) &#123; if (t == 0) return b; if ((t /= d) == 1) return b + c; if (!p) p = d * .3; if (!a || a &lt; Math.abs(c)) &#123; a = c; var s = p / 4; &#125; else var s = p / (2 * Math.PI) * Math.asin(c / a); return (a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b); &#125;, ElasticEaseInOut: function(t, b, c, d, a, p) &#123; if (t == 0) return b; if ((t /= d / 2) == 2) return b + c; if (!p) p = d * (.3 * 1.5); if (!a || a &lt; Math.abs(c)) &#123; a = c; var s = p / 4; &#125; else var s = p / (2 * Math.PI) * Math.asin(c / a); if (t &lt; 1) return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b; return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b; &#125;, //冲过头系列 BackEaseIn: function(t, b, c, d, s) &#123; if (s == undefined) s = 1.70158; return c * (t /= d) * t * ((s + 1) * t - s) + b; &#125;, BackEaseOut: function(t, b, c, d, s ) &#123; if (s == undefined) s = 1.70158; return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b; &#125;, BackEaseInOut: function(t, b, c, d, s) &#123; if (s == undefined) s = 1.70158; if ((t /= d / 2) &lt; 1) return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b; return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b; &#125;, //弹跳系列 BounceEaseIn: function(t, b, c, d) &#123; return c - Tween.BounceEaseOut(d - t, 0, c, d) + b; &#125;, BounceEaseOut: function(t, b, c, d) &#123; if ((t /= d) &lt; (1 / 2.75)) &#123; return c * (7.5625 * t * t) + b; &#125; else if (t &lt; (2 / 2.75)) &#123; return c * (7.5625 * (t -= (1.5 / 2.75)) * t + .75) + b; &#125; else if (t &lt; (2.5 / 2.75)) &#123; return c * (7.5625 * (t -= (2.25 / 2.75)) * t + .9375) + b; &#125; else &#123; return c * (7.5625 * (t -= (2.625 / 2.75)) * t + .984375) + b; &#125; &#125;, BounceEaseInOut: function(t, b, c, d) &#123; if (t &lt; d / 2) return Tween.BounceEaseIn(t * 2, 0, c, d) * .5 + b; else return Tween.BounceEaseOut(t * 2 - d, 0, c, d) * .5 + c * .5 + b; &#125; &#125;;&#125; &lt;script type=&quot;text/javascript&quot;&gt; var oDiv = document.getElementsByTagName(&quot;div&quot;)[0]; // 函数重载很成功 // 3个参数： // animate(oDiv,&#123;&quot;left&quot;:700&#125;,300); // 2个参数： // animate(oDiv,&#123;&quot;left&quot;:700&#125;,300,&quot;BounceEaseOut&quot;); // 4个参数： animate(oDiv,&#123;&quot;left&quot;:900,&quot;top&quot;:300&#125;,1300,&quot;BounceEaseOut&quot;,function()&#123; this.style.background = &quot;red&quot;; &#125;); // 4个参数： //animate(oDiv,&#123;&quot;left&quot;:700&#125;,300,function()&#123; // this.style.display = &quot;none&quot;; //&#125;); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>缓冲</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[apply和call语句]]></title>
    <url>%2F2019%2F02%2F20%2Fapply%E5%92%8Ccall%E8%AF%AD%E5%8F%A5%2F</url>
    <content type="text"><![CDATA[运动框架的应用实例 结合 异步和回调函数 中的 「回调函数2」我们可以试图在回调函数中，用this表示oDiv对象，这样感觉爽。123animate(oDiv,&#123;&quot;left&quot;:600&#125;,2000,function()&#123; this.style.backgroundColor = &quot;red&quot;; &#125;); 但是不行，回调函数中this不是oDiv。所以我们现在要想一个办法，让callback运行，并且callback里面的this是oDiv。callback.call(elem);或者：callback.apply(elem);执行callback函数，并且让callback函数中的this关键字为elem。例子：123456789101112 var obj2 = &#123; &quot;name&quot; : &quot;树懒&quot;, &quot;age&quot; : 16, &quot;sex&quot; : &quot;男&quot; &#125;function huidiao()&#123; alert(this.name); &#125; //下面这个call语句的含义有两层： //1 huidiao 函数将被调用//2 同时这个函数内部的this就是obj了 huidaio.call(obj2); 说白了apply、call功能是一样的，功能都是：让函数调用，并且给函数设置this是谁。call就是英语呼叫的意思，apply是应用的意思。现在说说区别：1234567891011var obj = &#123;&quot;name&quot; : &quot;考拉&quot;,&quot;age&quot; : 18,&quot;jiehun&quot; : false&#125;function x(a,b,c)&#123;console.log(this.name);console.log(a + b + c);&#125; x.call(obj,2,3,4);x.apply(obj,[2,3,4]); call和apply功能一样，就是让一个函数里面的this设置为一个对象。拿上例来说，x函数里面的this就是obj对象。但是我们发现，x这个函数，有参数。那么我们现在又想设置this是谁，又想把参数往里传，此时就有区别了：12fn.call(obj,参数1,参数2,参数3……);fn.apply(obj,[参数1,参数2,参数3……]); call需要你用逗号罗列所有参数，但是apply是把所有参数写在数组里面。即使只有一个参数，也必须写在数组里面。比如：123456function showInfo(n)&#123;for(var i = 1 ; i &lt;= n ; i++)&#123;console.log(this.name);&#125;&#125;showInfo.call(obj,10);showInfo.apply(obj,[10]); 一定不要记混，apply要的是数组，你想啊，ly、ly、ly长得像list，就是数组。总结一下，这两个东西功能一致，就是把一个函数里面的this设置为某个对象。区别就是后面的参数的语法。]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>apply和call</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[异步和回调函数]]></title>
    <url>%2F2019%2F02%2F20%2F%E5%BC%82%E6%AD%A5%E5%92%8C%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[1.1 同步和异步程序从上到下执行：12345console.log(1);console.log(2);console.log(3);console.log(4);console.log(5); 同步synchronous 美[ˈsɪŋkrənəs, ˈsɪn-]假如程序中有for循环，非常耗费时间，但是系统会用“同步”的方式运行：1234567 console.log(1); console.log(2); console.log(3);for (var i = 0; i &lt; 10000; i++) &#123;console.log(&quot;★&quot;);&#125; console.log(4); “同步”的意思：for循环很耗费时间，但是程序就是傻等，傻傻的等待10000个星星输出，然后输出4。 比如妈妈去接儿子的飞机，需要等很长时间，等待的时候就是傻等，不同时做别的事情。 异步Asynchronous1234567console.log(1);console.log(2);console.log(3);setInterval(function()&#123;console.log(&quot;★&quot;); &#125;,1000); console.log(4); “异步”的意思：遇见了一个特别耗费时间的事情，程序不会傻等，而是先执行后面的语句。 比如妈妈去接儿子的飞机，需要等很长时间，但是妈妈同时逛逛商店什么的，不是傻等。 JS中的异步，需要异步语句：setInterval、setTimeout、Ajax、Node.js……等等 如果有异步语句了，那么一定是异步的。如果没有异步语句，那就不是异步的。 1.2 回调函数异步的事情做完了，我们想继续做什么事儿，那此时怎么办呢？回调函数： 异步的语句做完之后要做的事情123456789101112131415 var count = 0;var timer = setInterval(function()&#123; console.log(&quot;★&quot;); count++; if(count == 300)&#123; clearInterval(timer); callback(); &#125;&#125;,20); //回调函数function callback()&#123; alert(&quot;全部星星输出完毕&quot;);&#125; 回调函数2123456789101112131415161718192021222324252627282930313233343536373839404142&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div&#123; width: 80px; height: 80px; background-color: yellowgreen; position: absolute; left: 100px; top: 100px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;运动框架实例.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; var oDiv = document.getElementsByTagName(&quot;div&quot;)[0]; huidiao(); function mmmm()&#123; animate(oDiv,&#123;&quot;left&quot;:600&#125;,300,function()&#123; animate(this,&#123;&quot;top&quot;:300&#125;,300,function()&#123; animate(this,&#123;&quot;left&quot;:100&#125;,300,function()&#123; animate(this,&#123;&quot;top&quot;:100&#125;,300,function()&#123; huidiao(); /*animate(oDiv,&#123;&quot;left&quot;:600&#125;,300); animate(this,&#123;&quot;top&quot;:300&#125;,300); animate(this,&#123;&quot;left&quot;:100&#125;,300); 这种写法错误， 因为函数是异步的，四个同时执行。 animate(this,&#123;&quot;top&quot;:100&#125;,300);f*/ &#125;); &#125;); &#125;); &#125;); &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>异步和回调函数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[运动框架的应用实例]]></title>
    <url>%2F2019%2F02%2F20%2F%E8%BF%90%E5%8A%A8%E6%A1%86%E6%9E%B6%E7%9A%84%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[前两个Json，semaphoreJson和targetJson 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;title&gt;运动框架实例&lt;/title&gt; &lt;style&gt; div&#123; height: 80px; width: 80px; background-color: skyblue; position: absolute; left: 100px; top: 100px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;box&quot;&gt;&lt;/div&gt; &lt;script&gt; var oDiv=document.getElementById(&quot;box&quot;); animate(oDiv,&#123;&quot;left&quot;:700,&quot;top&quot;:800,&quot;width&quot;:200&#125;,3000); function animate(elem,targetJson,time)&#123; var semaphoreJson = &#123;&#125;; //空对象信号量 //复制targetJson的属性名给信号量，再给它添加计算后的样式。 for(var k in targetJson)&#123; semaphoreJson[k] = parseFloat(fetchComputedStyle(elem , k)); &#125; console.log(semaphoreJson); &#125; //之前的轮子，计算后样式 function fetchComputedStyle(obj , property)&#123; //能力检测 if(window.getComputedStyle)&#123; //现在要把用户输入的property中检测一下是不是驼峰，转为连字符写法 //强制把用户输入的词儿里面的大写字母，变为小写字母加- //paddingLeft → padding-left property = property.replace(/([A-Z])/g , function(match,$1)&#123; return &quot;-&quot; + $1.toLowerCase(); &#125;); return window.getComputedStyle(obj)[property]; &#125;else&#123; //IE只认识驼峰，我们要防止用户输入短横，要把短横改为大写字母 //padding-left → paddingLeft property = property.replace(/\-([a-z])/g , function(match,$1)&#123; return $1.toUpperCase(); &#125;); return obj.currentStyle[property]; &#125; &#125; &lt;/script&gt; 定时器和setpJson 1234567891011121314151617181920var interval = 5;//动画间隔时间var maxFrameNumber = time / interval; //console.log(maxFrameNumber); //计算步长 var stepJson = &#123;&#125;; for(var k in targetJson)&#123; //捎带脚，把每个targetJSON中的值都去掉px targetJson[k] = parseFloat(targetJson[k]); stepJson[k] = (targetJson[k] - semaphoreJson[k])/maxcount; &#125; //console.log(stepJson); &#125; //定时器 setInterval(function()&#123; for(var k in semaphoreJson)&#123; semaphoreJson[k] +=stepJson[k]; elem.style[k] = semaphoreJson[k] + &quot;px&quot;; &#125; &#125;,interval); 在指定时间内关闭定时器 123456789101112 var frameNumber = 0; //帧编号//定时器 var timer=setInterval(function()&#123; for(var k in semaphoreJson)&#123; semaphoreJson[k] +=stepJson[k]; elem.style[k] = semaphoreJson[k] + &quot;px&quot;; &#125; frameNumber++; if(frameNumber == maxFrameNumber)&#123; clearInterval(timer); &#125; &#125;,interval); 有可能因为计算步长时，无法除尽导致系统自动约分，最后的结果有偏差。12345678910111213141516//定时器 var timer=setInterval(function()&#123; for(var k in semaphoreJson)&#123; semaphoreJson[k] +=stepJson[k]; elem.style[k] = semaphoreJson[k] + &quot;px&quot;; &#125; count++; if(count == maxcount)&#123; //这里玩个小聪明循环完成拉终停表 for(var k in targetJson)&#123; elem.style[k] = parseFloat(targetJson[k]) + &quot;px&quot;; &#125; clearInterval(timer); &#125; &#125;,interval);&#125; 兼容 opacity 改变属性时进行判断，值是否加 PX1234567891011var timer=setInterval(function()&#123; for(var k in semaphoreJson)&#123; semaphoreJson[k] +=stepJson[k]; if(k != &quot;opacity&quot;)&#123; // 新增if语句 elem.style[k] = semaphoreJson[k] + &quot;px&quot;; &#125;else&#123; elem.style[k] = semaphoreJson[k]; //兼容IE6 elem.style.filter = &quot;alpha(opacity=&quot; + (semaphoreJSON[k] * 100) + &quot;)&quot;; &#125; &#125; PS：小聪明的地方也得加 if 判断 浏览器性能问题（浏览器检测）123456//动画间隔要根据不同浏览器来设置： if(window.navigator.userAgent.indexOf(&quot;MSIE&quot;) != -1)&#123; var interval = 50; &#125;else&#123; var interval = 10; &#125; 全部源代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;运动框架实例&lt;/title&gt; &lt;style&gt; div&#123; height: 81px; width: 81px; background-color: skyblue; position: absolute; left: 100px; top: 100px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;box&quot;&gt;&lt;/div&gt; &lt;script&gt; var oDiv=document.getElementById(&quot;box&quot;); animate(oDiv,&#123;&quot;left&quot;:700,&quot;top&quot;:600,&quot;opacity&quot;:0.6,&quot;border-radius&quot;:50&#125;,2000); function animate(elem,targetJson,time)&#123; //动画间隔要根据不同浏览器来设置： if(window.navigator.userAgent.indexOf(&quot;MSIE&quot;) != -1)&#123; var interval = 50; &#125;else&#123; var interval = 10; &#125; var semaphoreJson = &#123;&#125;; //空对象信号量 //复制targetJson的属性名给信号量，再给它添加计算后的样式。 for(var k in targetJson)&#123; semaphoreJson[k] = parseFloat(fetchComputedStyle(elem , k)); &#125; console.log(semaphoreJson); // 动画5毫秒执行一次，时间time，共执行函数次数 var maxFrameNumber = time / interval; var frameNumber = 0; //帧编号 //console.log(maxcount); //计算步长 var stepJson = &#123;&#125;; for(var k in targetJson)&#123; //捎带脚，把每个targetJSON中的值都去掉px targetJson[k] = parseFloat(targetJson[k]); stepJson[k] = (targetJson[k] - semaphoreJson[k])/maxFrameNumber; &#125; //console.log(stepJson); //定时器 var timer=setInterval(function()&#123; for(var k in semaphoreJson)&#123; semaphoreJson[k] +=stepJson[k]; if(k != &quot;opacity&quot;)&#123; elem.style[k] = semaphoreJson[k] + &quot;px&quot;; &#125;else&#123; elem.style[k] = semaphoreJson[k]; //兼容IE6 elem.style.filter = &quot;alpha(opacity=&quot; + (semaphoreJson[k] * 100) + &quot;)&quot;; &#125; &#125; frameNumber++; if(frameNumber == maxFrameNumber)&#123; //这里玩个小聪明循环完成拉终停表 for(var k in targetJson)&#123; if(k != &quot;opacity&quot;)&#123; elem.style[k] = targetJson[k] + &quot;px&quot;; &#125;else&#123; elem.style[k] = targetJson[k]; //兼容IE6 elem.style.filter = &quot;alpha(opacity=&quot; + (targetJson[k] * 100) + &quot;)&quot;; &#125; &#125; clearInterval(timer); &#125; &#125;,interval); &#125; //之前的轮子，计算后样式 function fetchComputedStyle(obj , property)&#123; //能力检测 if(window.getComputedStyle)&#123; //现在要把用户输入的property中检测一下是不是驼峰，转为连字符写法 //强制把用户输入的词儿里面的大写字母，变为小写字母加- //paddingLeft → padding-left property = property.replace(/([A-Z])/g , function(match,$1)&#123; return &quot;-&quot; + $1.toLowerCase(); &#125;); return window.getComputedStyle(obj)[property]; &#125;else&#123; //IE只认识驼峰，我们要防止用户输入短横，要把短横改为大写字母 //padding-left → paddingLeft property = property.replace(/\-([a-z])/g , function(match,$1)&#123; return $1.toUpperCase(); &#125;); return obj.currentStyle[property]; &#125; &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>运动框架的应用实例</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一切从零开始]]></title>
    <url>%2F2019%2F02%2F19%2F%E4%B8%80%E5%88%87%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%2F</url>
    <content type="text"><![CDATA[摘要： 今天是农历八月十五，本来是在家团圆的好日子。如今却身在异乡，独自写博客。 8102 年十月份我离开学校，去了上海实习，本来万有激情，谁知大冬天的浇我一头凉水。虽然我不太喜欢干工作的内容，但没办法只能硬着头皮做了，本来打算实习完，中间我也攒够实力就离开，一切来得太突然，十二月份上旬我被迫离职，不过我的感谢这次离职，最起码让我重新认识了自己。但这次还是把我给打蒙了。不知道怎么办的我在中途竟然逃到了老爸那里，终于第二天鼓起勇气，又回了合肥，但在合肥面试了一个多月没有找到好工作就一直闲着。等到一月二十三回家过年。 在家差不多带了一个月，这次年过得是最没有年味的，我一直在楼上学习，前端编程，中间偶尔去走走亲戚。一直忍受着爸妈起床的煎熬到今天。 过年的时候就一直想怎么办？有时候豪气干云，但有时候又会对社会莫名的害怕与退缩。以前我做决定很果断，现在倒是很婆婆妈妈的。就拖着拖着，决定到 BOE 来，来的日期也一直拖着拖着到今天才来。今天到一个新的环境，并没有太失落，可能有些经历的缘故吧。无论如何好好干，努力学习前端，拿到毕业证的时候，前端技术亦可以出师。 当然，为此我愿每天拿出时间来学习，并以此形成习惯。 91020219 一切从零开始。。。]]></content>
      <categories>
        <category>我的随笔</category>
      </categories>
      <tags>
        <tag>一切从零开始</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[运动框架]]></title>
    <url>%2F2019%2F02%2F15%2F%E8%BF%90%E5%8A%A8%E6%A1%86%E6%9E%B6%2F</url>
    <content type="text"><![CDATA[一、JSON学习1. 最简单的JSON示例JSON叫做JavaScript Object Notation， JavaScript对象表示法。由JS大牛Douglas发明。我们之前学习过数组：var arr = [“东邪”,”西毒”,”南帝”,”北丐”,&quot;中神通&quot;]数组很好用，arr[2] 就是南帝。但是我们发现，数组的下标，只能是阿拉伯数字，不能是我们任意取的。JSON的示例：123456var obj = &#123;&quot;name&quot;:&quot;考拉&quot;, &quot;age&quot; : 18, &quot;sex&quot; : &quot;不祥&quot;&#125;;console.log(obj.age); //18 语法： { “k” : v,“k” : v,“k” : v,“k” : v }访问某一个属性 能用点语法.就是“的”obj.age; //obj这个对象的age属性 也可以使用 [] 来表示属性, [] 里面是变量：var a = “age”;console.log(obj[a]); //18如果不想用变量，必须加引号：obj[“age”] //182. JSON的嵌套JSON里面，可以又是一个JSON1234567891011var obj = &#123; &quot;name&quot;:&quot;考拉&quot;, &quot;age&quot; : 18, &quot;sex&quot; : &quot;不祥&quot;, &quot;shengao&quot; : 193, &quot;peiou&quot; : &#123; &quot;name&quot; : &quot;Angelababy&quot;, &quot;age&quot; : 16, &quot;shengao&quot; : 168 &#125;&#125;; 所以，想得到168这个数字：obj.peiou.shengao 或 obj[peiou][shengo]现在只知道 Ajax 大量用到JSON。瀑布流的network里面。JSON作为大字典dictionary。 3. JSON项的添加和删除 增加obj里面的项，那么就用点语法赋值： 1234567 var obj = &#123; &quot;name&quot;:&quot;考拉&quot;, &quot;age&quot; : 18 &#125;; age++;//改变属性obj.sex = &quot;male&quot;;console.log(&quot;age&quot;); 删除某一个属性，使用delete关键字：delete obj.age; 4. JSON的遍历无法使用 for 循环会输出 undefined，对象没有 length属性。for…in语句是专门用来遍历JSON的语法： 123for(var k in obj)&#123; console.log(k + &quot;的值是&quot; + obj[k]); &#125; k会依次等于我们的obj里面的属性名，然后在循环语句里面，用obj[k]来读取这个值。 5.对象的克隆：12345678910//把obj1的属性名克隆到obj2var obj1 = &#123; &quot;name&quot; :&quot;花非花&quot;, &quot;eage&quot; : 34, &quot;sex&quot; : &quot;male&quot; &#125;; var obj2 = &#123;&#125;; for(var k in obj1)&#123; obj2[k]=&quot;花非花&quot;; //因为k是变量所以使用方括号 &#125;]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>运动框架</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript实现background 定时循环随机背景图]]></title>
    <url>%2F2019%2F02%2F10%2Fjavascript%E5%AE%9E%E7%8E%B0background%20%E5%AE%9A%E6%97%B6%E5%BE%AA%E7%8E%AF%E9%9A%8F%E6%9C%BA%E8%83%8C%E6%99%AF%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[说明：网址的背景通常为白色，为了美观可进行自定义。再炫酷的效果就是进行随机播放。这里提供两种办法。 一、采用API接口123456setInterval(Getbg,2000); //时间放慢些，1000ms加载有点卡。function Getbg()&#123; var randomBgIndex = Math.round( Math.random() * 166 ); //输出随机的背景图 document.body.style.background=&quot;#9E9E9E url(http://api.yum6.cn/360img?&quot;+randomBgIndex+&quot;) no-repeat &quot;;&#125; 二、固定图片123456789101112131415161718var bodyBgs = [];bodyBgs[0] = &quot;https://ww1.sinaimg.cn/large/87c01ec7gy1fshdwv00e9j211y0lcjs7.jpg&quot;;bodyBgs[1] = &quot;https://ww3.sinaimg.cn/large/87c01ec7gy1fshdwv56rfj21hc0u0n05.jpg&quot;;bodyBgs[2] = &quot;https://ww3.sinaimg.cn/large/87c01ec7gy1fshdwv5u70j21hc0u0n04.jpg&quot;;bodyBgs[3] = &quot;https://ww4.sinaimg.cn/large/87c01ec7gy1fshdwv8wc2j21hc0u0q5d.jpg&quot;;bodyBgs[4] = &quot;https://ww1.sinaimg.cn/large/87c01ec7gy1fshdwva5i5j21hc0u0q66.jpg&quot;;bodyBgs[5] = &quot;https://ww4.sinaimg.cn/large/87c01ec7gy1fshdwvjc6rj21hc0u0tnw.jpg&quot;;bodyBgs[6] = &quot;https://ww1.sinaimg.cn/large/87c01ec7gy1fshdwvw3hsj21hc0u044j.jpg&quot;;bodyBgs[7] = &quot;https://ww4.sinaimg.cn/large/87c01ec7gy1fshdww034zj21hc0u0jvv.jpg&quot;;bodyBgs[8] = &quot;https://ww4.sinaimg.cn/large/87c01ec7gy1fshdww0q12j21hc0u0tbu.jpg&quot;;bodyBgs[9] = &quot;https://ww1.sinaimg.cn/large/87c01ec7gy1fshdww62pdj21hc0u07b7.jpg&quot;;bodyBgs[10] = &quot;https://ww1.sinaimg.cn/large/87c01ec7gy1fshdww8nc0j21hc0u0wjv.jpg&quot;;setInterval(Getbg, 1000);function Getbg()&#123; var randomBgIndex = Math.round( Math.random() * 10 ); //输出随机的背景图 document.body.style.background=&quot;#9E9E9E url(&quot;+ bodyBgs[randomBgIndex] +&quot;) no-repeat &quot;;&#125; 固定地址用的新浪图床，可自行上传图片，更改数组的链接。另外：embed可内嵌音视频]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>随机背景</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[免vip登录下载任意音乐歌曲]]></title>
    <url>%2F2019%2F02%2F10%2F%E5%85%8Dvip%E7%99%BB%E5%BD%95%E4%B8%8B%E8%BD%BD%E4%BB%BB%E6%84%8F%E9%9F%B3%E4%B9%90%E6%AD%8C%E6%9B%B2%2F</url>
    <content type="text"><![CDATA[教程简介：大家都知道，我们一般在下载的音乐的时候 肯定会打开 像QQ音乐/酷狗/网易云 等等音乐下载器来下载自己喜欢的歌曲。 但是在网页上 要下载这些歌曲就得必须下载他们的客户端 或者是登录在下载 在或者开VIP来下载。 这样就不愉快了吧 来今天看看这个不需要登录和下载客户端来下载歌曲的方法。 一、下载提示这是用网页版QQ音乐下载的提示 这是用网页版网易云下载的提示 这是用网页版酷我音乐下载的提示 相信大家都看到了 下载歌曲都必须要下载客户端才可以下载 直接开始教程吧 二、教程开始以qq音乐为例子 来免下载登录来下载歌曲 打开QQ音乐搜索你要下载的歌曲 点击进去播放 如下图 让他播放 进入开发者模式按 [f12] 选择 Network 按 ctrl+R 进行筛选多媒体文件 点击如下图的 Size 让他以大小排序 最后一个 2.7MB的文件就是歌曲链接 鼠标 右键 选择歌曲文件弹出选择 Open in new tab 如下就是我们得到了歌曲文件链接 5.名称里面的 C1 代表歌曲文件大小 ，C1 表示文件小，C4表示文件大。C400004RY5sx05Fzp5.m4a这就是大文件，如下图 本教程到此这里 。再送上一个备用音乐搜索下载神器。音乐搜索神器 新年快乐 ！新年快乐 ！新年快乐 ！2019-02-10 10:27]]></content>
      <categories>
        <category>常用小工具</category>
      </categories>
      <tags>
        <tag>下载音乐歌曲</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用小工具集合]]></title>
    <url>%2F2019%2F02%2F09%2F%E5%B8%B8%E7%94%A8%E5%B0%8F%E5%B7%A5%E5%85%B7%E9%9B%86%E5%90%88%2F</url>
    <content type="text"><![CDATA[一、电影网站 新 6V 电影（www.66s.cc/）这个网站强烈推荐，片源多，新片更新速度快。提供了很多资源下载链接，还可以在线观看，良心。 两个 BT （www.bttwo.com/ ）这个网站片源丰富，可以在线播放也可以下载。 思古影视（http://v.sigu.me/list.php?type=1）二、音乐下载网站 音乐搜索神器 （https://lai.yuweining.cn/music）这个网站可以下载各大付费平台的音乐 51ape （http://www.51ape.com/）这个网站可以下载无损音质的音乐，一首歌几十 M 的体积，注意手机内存就是了。三、音频在线编辑器 音频在线编辑器（https://ringtonecutter.com/）主要用于在线截取音频长度。四、GIF在线制作 GIF在线制作（https://ezgif.com/）支持图片视频制作动图五、图片素材网址 免费素材（https://www.hippopx.com/zh/popular）六、二维码编辑 草料二维码（https://cli.im/tools）]]></content>
      <categories>
        <category>常用小工具</category>
      </categories>
      <tags>
        <tag>小工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo next 主题配置右侧栏的分类和标签打开的是空白]]></title>
    <url>%2F2019%2F01%2F30%2FHexo%20next%20%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E5%8F%B3%E4%BE%A7%E6%A0%8F%E7%9A%84%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE%E6%89%93%E5%BC%80%E7%9A%84%E6%98%AF%E7%A9%BA%E7%99%BD%2F</url>
    <content type="text"><![CDATA[新增一些Hexo中遇见的坑。 1. 新建 标签 和分类 页面 只要在 source 文件夹下新建.md文件，并且文章前面按如下格式表明所属分类和标签就行： 1234title: 自学编程成功概率有多少可能date: 2017-05-26 19:57:47tags: [编程,感悟]categories: 技术 先根目录输入命令 hexo new page categories 会自动新建 categorier 文件夹并生成一个index.md文件，里面的代码为： 12title: categoriesdate: 2019-01-30 23:10:51 同理，「标签」也一样 hexo new page tags 生成 tags 文件夹，其中会自动生成一个index.md文件,代码为：12title: tagsdate: 2019-01-30 23:14:51 2. 开始配置菜单，如「首页」、「分类」、「标签」等这些菜单主题文件下的_config.yml12345678910111213menu: home: / || home about: /about/ || user archives: /archives/ || archive tags: /tags/ || tags categories: /categories/ || th schedule: /schedule/ || calendar sitemap: /sitemap.xml || sitemap # commonweal: /404/ || heartbeat# Enable/Disable menu icons. #菜单图标 menu_icons: enable: true 然后跑去 language 文件夹 zh-Hans.yml 修改中文名字，菜单就以中文显示了。1234567891011menu: home: 首&amp;emsp;&amp;emsp;页 archives: 归&amp;emsp;&amp;emsp;档 categories: 分&amp;emsp;&amp;emsp;类 schedule: 日程表 sitemap: 站点地图 tags: 标&amp;emsp;&amp;emsp;签 about: 关于博主 search: 站内搜索 top: 最受欢迎 # commonweal: 公益404 我们发表文章使用「tags」「categories」只需在文章开头添加如下代码：123456---title: 利用GitHub和HEXO免费搭建个人博客高级 美化篇date: 2019-01-29 22:58:56tags: [hexo建站,hexo部署,github部署,个人博客] #添加的标签categories: hexo博客 #添加的分类--- 如此即可在菜单栏里的「tags」「categories」看见相应的效果。但是实际上打开是空白页面 本文的重点来了。小tips：每次的手输入 categories 我们可以在D:\blog\scaffolds\post.md 添加如下代码，这样每次新建文章，就自动有了。123456---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;tags: #新加categories: #新加--- 3. Hexo next 主题配置右侧栏的分类和标签打开的是空白先前 categorier 文件夹（D:\blog\source\categories），里面的 index.md 文件打开，修改（即添加一行）为：12345---title: categoriesdate: 2018-01-23 17:14:51type: &quot;categories&quot; #新添加的--- 同理，「标签」12345---title: tagsdate: 2018-01-23 17:14:51type: &quot;tags&quot; #新添加的--- 保存效果为：解决办法参考：Hexo之NexT主题的配置及遇到的问题 4. 插播友链的设置方法主题文件里，就在设置 menu 菜单的下面：123456789social: #友链地址 GitHub: https://github.com/condorheroblog || github E-Mail: mailto:2846124732@qq.com || envelope 简书: https://www.jianshu.com/u/491bd4155f96 QQ: http://sighttp.qq.com/authd?IDKEY=f67c919702f76aff21f09284308fe39875d3f6b466780165social_icons: #友链图标 enable: true icons_only: false transition: false]]></content>
      <categories>
        <category>hexo博客</category>
      </categories>
      <tags>
        <tag>hexo建站</tag>
        <tag>hexo部署</tag>
        <tag>github部署</tag>
        <tag>个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用GitHub和HEXO免费搭建个人博客高级 美化篇]]></title>
    <url>%2F2019%2F01%2F29%2FGithub%E5%92%8CHexo%E5%85%8D%E8%B4%B9%E5%BB%BA%E7%AB%99%E9%AB%98%E7%BA%A7%E2%80%94%E2%80%94%E7%BE%8E%E5%8C%96%E7%AF%87%2F</url>
    <content type="text"><![CDATA[回顾 上一篇文章，介绍了如何搭建个人博客。今天自己搞了博客美化，说实话都不简单。虽然涉及到代码，但基本上多是复制粘贴，没一点难度。搞完博客美化就不搞了，装了好几次烦了，没技术，下面开始。 插播 就在昨天又发现了一个新玩法。 hexo高级部署教程,利用github+netlify部署 这篇文章提供的方法和我的不一样，其中他多了一个 netlify 的部署。但思路是一样的，只是静态页面我用的GitHub他用的 netlify 。放在这当个参考。 首先讲一下思路： 熟悉Hexo文件夹 选择新的模板模板美化 总体布置 侧边栏美化 页脚美化 文章美化一、熟悉Hexo文件夹下面只是部分，更多移步：Hexo配置文件详细说明123456789101112131415161718192021222324252627282930313233343536373839404142434445464748├── .github #git信息├── languages #多语言| ├── default.yml #默认语言| └── zh-Hans.yml #简体中文| └── zh-tw.yml #繁体中文├── layout #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制| ├── _custom #可以自己修改的模板，覆盖原有模板| | ├── _header.swig #头部样式| | ├── _sidebar.swig #侧边栏样式| ├── _macro #可以自己修改的模板，覆盖原有模板| | ├── post.swig #文章模板| | ├── reward.swig #打赏模板| | ├── sidebar.swig #侧边栏模板| ├── _partial #局部的布局| | ├── head #头部模板| | ├── search #搜索模板| | ├── share #分享模板| ├── _script #局部的布局| ├── _third-party #第三方模板| ├── _layout.swig #主页面模板| ├── index.swig #主页面模板| ├── page #页面模板| └── tag.swig #tag模板├── scripts #script源码| ├── tags #tags的script源码| ├── marge.js #页面模板├── source #源码| ├── css #css源码| | ├── _common #*.styl基础css| | ├── _custom #*.styl局部css| | └── _mixins #mixins的css| ├── fonts #字体| ├── images #图片| ├── uploads #添加的文件| └── js #javascript源代码├── _config.yml #主题配置文件└── README.md #说明文档//Hexo文件夹详情├── .deploy├── public├── scaffolds├── scripts├── source| ├── _drafts| └── _posts├── themes├── _config.yml└── package.json 加粗标注的两个灰常重要，接下来用到的就是他们。|名称|作用||—|—|deploy|执行hexo deploy命令部署到GitHub上的内容目录public|执行hexo generate命令，输出的静态网页内容目录scaffolds|layout模板文件目录，其中的md文件可以添加编辑scripts|扩展脚本目录，这里可以自定义一些javascript脚本source|文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。drafts|草稿文章posts|发布文章themes|主题文件目录_config.yml|全局配置文件，大多数的设置都在这里package.json|应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮 二、选择新的模板Hexo默认的网站模板，并不能符合我们的需求，所以我们需要自己自定义模板 主题寻找： https://github.com/search?o=desc&amp;q=topic%3Ahexo-theme&amp;s=stars&amp;type=Repositories Hexo的官网主题专栏 推荐第一个，两种方法都是在GitHub上获取的主题 theme 第二个方法可以预览但的在页面下方跳转 GitHub官网下载。第一个方法直接获取下载，主题也是根据下载排行的。 第一个网站，按照模板的受欢迎程度进行排名，可以看到遥遥领先的第一名是一款叫作：next的主题，选用这款即可。想要了解更多，进入到这个主题，可以阅读README.md模板使用说明，还可以查看模板示例网站。 模板1. 下载打开博客根目录下的themes文件夹(注：后文所说的根目录是指我的：D:\blog你的根据自己情况)，右键 Git Bash 运行下述命令：git clone https://github.com/iissnan/hexo-theme-next themes/next就可以把这款主题的安装文件下载到电脑中。 2. 使用打开D:\blog_config.yml文件，找到 theme字段，修改参数为：theme: hexo-theme-next，然后根目录运行下述命令： hexo cleanhexo s -g这样，便成功应用新的 next 主题，浏览器访问 :http://localhost:4000，查看一下新的博客页面。当当当！是不是更清爽了，不过你可能看到的不同，没关系。这款主题包含4种风格，默认的是Muse，也可以尝试其他风格。具体操作：打开D:\blog\theme\hexo-theme-next_config.yml，定位到Schemes，想要哪款主题就取消前面的#，我的博客使用的是Pisces风格。12345# Schemes#scheme: Muse#scheme: Mistscheme: Pisces#scheme: Gemini 顺便把图标注一下下，下面用到。 三、模板美化1. 设置网站信息 12345678# Sitetitle: Condor Herosubtitle: Divine Condordescription: 记录生活，努力学习。keywords: 前端、学习、提升、建站、努力。author: Condor Herolanguage: zh-Hanstimezone: 参数 描述 title 网站标题 subtitle 网站副标题 description 网站描述 author 您的名字 language 网站使用的语言 timezone 网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。 看表根据我的模板填写。可自行修改。 2. 动图背景 实现效果图 太玄了，影响阅读不是太喜欢，就去掉了。具体实现方法 「点击这里」 四、侧栏美化1. 菜单设置修改侧栏菜单，（上图我标注的①）文件路径：D:\blog\themes\hexo-theme-next/_config.yml把英文菜单 # 去掉，添加菜单。123456789menu: home: / || home about: /about/ || user archives: /archives/ || archive tags: /tags/ || tags categories: /categories/ || th schedule: /schedule/ || calendar sitemap: /sitemap.xml || sitemap # commonweal: /404/ || heartbeat 修改英文菜单对应的中文名。文件路径：D:\blog\themes\hexo-theme-next\languages\zh-Hans.yml修改如下：1234567891011menu: home: 首&amp;emsp;&amp;emsp;页 archives: 归&amp;emsp;&amp;emsp;档 categories: 分&amp;emsp;&amp;emsp;类 tags: 标&amp;emsp;&amp;emsp;签 about: 关于博主 search: 站内搜索 top: 最受欢迎 schedule: 日程表 sitemap: 站点地图 # commonweal: 公益404 注意：两字的中间添加&amp;emsp;&amp;emsp;可实现列对齐。 2. 新建标签、分类、关于页面 在D:/blog分别运行命令：hexo new page &quot;tags&quot;hexo new page &quot;categories&quot;hexo new page &quot;about&quot;然后，打开D:\blog\source就可以看到上述三个文件夹。要添加关于博主的介绍，只需要在/about/index.md文件中，用markdown书写内容即可，写完后运行：hexo d -g，便可看到效果。 3. 侧栏社交链接图标设置侧栏社交链接的修改包含两个部分，第一是链接，第二是链接图标。 两者配置均在 主题配置文件中（D:\blog\themes\hexo-theme-next/_config.yml文件中）。 （1）链接放置在 social 字段下，一行一个链接。其键值格式是 显示文本: 链接地址。123456789101112131415# Social linkssocial:social: GitHub: https://github.com/condorheroblog E-Mail: mailto:2846124732@qq.com || envelope 简书: https://www.jianshu.com/u/491bd4155f96 QQ: http://sighttp.qq.com/authd?IDKEY=f67c919702f76aff21f09284308fe39875d3f6b466780165 #Google: https://plus.google.com/yourname || google #Twitter: https://twitter.com/yourname || twitter #FB Page: https://www.facebook.com/yourname || facebook #VK Group: https://vk.com/yourname || vk #StackOverflow: https://stackoverflow.com/yourname || stack-overflow #YouTube: https://youtube.com/yourname || youtube #Instagram: https://instagram.com/yourname || instagram #Skype: skype:yourname?call|chat || skype （2）设定链接的图标，对应的字段是 social_icons。其键值格式是 匹配键: Font Awesome 图标名称， 匹配键 与上一步所配置的链接的 显示文本 相同（大小写严格匹配），图标名称 是 Font Awesome 图标的名字（不必带 fa- 前缀）。 enable 选项用于控制是否显示图标，你可以设置成 false 来去掉图标。1234567# Social Iconssocial_icons: enable: true # Icon Mappings GitHub: github Twitter: twitter 微博: weibo 4 添加头像并美化博客添加头像有两种方法：第一种是放在本地文件夹中：D:\blog\public\uploads，并且命名为avatar.jpg。第二种是将图片放在七牛云中，新浪图床 然后传入链接。推荐这种方式，可以加快网页打开速度。站点文件任意行添加下面代码：12345# 添加头像# avatar: /uploads/avatar.jpg #方法1本地图片avatar: https://ws3.sinaimg.cn/large/005BYqpggy1fzgzvfkc2wj30p20p2abj.jpg # 方法2网络图片# 注意：uppoads文件夹是在主题里的文件夹，没有则新建# D:\blog\themes\hexo-theme-next\source\uploads\avatar.jpg 头像变圆形可参考：头像变圆并旋转D:\blog\themes\next\source\css\_common\components\sidebar\sidebar-author.styl，在里面添加如下代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859.site-author-image &#123; display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: $site-author-image-border-width solid $site-author-image-border-color; /* 头像圆形 */ border-radius: 80px; -webkit-border-radius: 80px; -moz-border-radius: 80px; box-shadow: inset 0 -1px 0 #333sf; /* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/ /* 鼠标经过头像旋转360度 */ -webkit-transition: -webkit-transform 1.0s ease-out; -moz-transition: -moz-transform 1.0s ease-out; transition: transform 1.0s ease-out;&#125;/*再进一步想点击产生旋转效果，就继续在该文件下方添加代码：*/img:hover &#123; /* 鼠标经过停止头像旋转 -webkit-animation-play-state:paused; animation-play-state:paused;*/ /* 鼠标经过头像旋转360度 */ -webkit-transform: rotateZ(360deg); -moz-transform: rotateZ(360deg); transform: rotateZ(360deg);&#125;/* Z 轴旋转动画 */@-webkit-keyframes play &#123; 0% &#123; -webkit-transform: rotateZ(0deg); &#125; 100% &#123; -webkit-transform: rotateZ(-360deg); &#125;&#125;@-moz-keyframes play &#123; 0% &#123; -moz-transform: rotateZ(0deg); &#125; 100% &#123; -moz-transform: rotateZ(-360deg); &#125;&#125;@keyframes play &#123; 0% &#123; transform: rotateZ(0deg); &#125; 100% &#123; transform: rotateZ(-360deg); &#125;&#125; 5. 设置网站logo跟设置头像其实是一个思路，都是在配置文件中引入正确的地址就可以了，不过网站的logo是对图片有要求的，我们需要在 Favicon在线制作 工具中制作32*32的.ico图片，然后放在source/images下面。然后在主题配置文件下添加主题配置文件中添加：favicon: images/favicon.ico 五、页脚的美化1. 补充建站时间设置/RSS设置点击了解 什么是RSS12345678910# Set rss to false to disable feed link.# Leave rss as empty to use site&apos;s feed link.# Set rss to specific value if you have burned your feed already.rss: #RSSfooter: # Specify the date when the site was setup. # If not defined, current year will be used. # 建站年份 since: 2018 #根据实际情况修改 2. 隐藏Hexo/主题和 Next 版本12345678910111213141516171819&lt;!-- 一共两处注释--&gt;&lt;!--&#123;% if theme.footer.powered %&#125; &lt;div class=&quot;powered-by&quot;&gt;&#123;# #&#125;&#123;&#123; __(&apos;footer.powered&apos;, &apos;&lt;a class=&quot;theme-link&quot; target=&quot;_blank&quot; href=&quot;https://hexo.io&quot;&gt;Hexo&lt;/a&gt;&apos;) &#125;&#125;&#123;##&#125;&lt;/div&gt;&#123;% endif %&#125;&#123;% if theme.footer.powered and theme.footer.theme.enable %&#125; &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;&#123;% endif %&#125;由hexo驱动--&gt;&#123;% if theme.footer.theme.enable %&#125; &lt;!--&lt;div class=&quot;theme-info&quot;&gt;&#123;# #&#125;&#123;&#123; __(&apos;footer.theme&apos;) &#125;&#125; &amp;mdash; &#123;# #&#125;&lt;a class=&quot;theme-link&quot; target=&quot;_blank&quot; href=&quot;https://github.com/iissnan/hexo-theme-next&quot;&gt;&#123;# #&#125;NexT.&#123;&#123; theme.scheme &#125;&#125;&#123;# #&#125;&lt;/a&gt;&#123;% if theme.footer.theme.version %&#125; v&#123;&#123; theme.version &#125;&#125;&#123;% endif %&#125;&#123;##&#125;&lt;/div&gt;版本号--&gt;&#123;% endif %&#125; 3. 时间和用户名之间添加心形主题文件：建站时间下面修改icon: heart12345678910111213footer: # Specify the date when the site was setup. # If not defined, current year will be used. # 建站年份 since: 2018 # Icon between year and copyright info. # 年份后面的图标，为 Font Awesome 图标 # 自己去纠结 http://fontawesome.io/icons/ # 然后更改名字就行，下面的有关图标的设置都一样 # Icon between year and copyright info. #icon: user icon: heart 如果还想让心变成跳动的红心，则继续在:上面的footer.swig文件中修改：为 #一定要加id=”heart”12345678&lt;div class=&quot;copyright&quot;&gt;&#123;##&#125;&#123;% set current = date(Date.now(), &quot;YYYY&quot;) %&#125;&#123;##&#125;&amp;copy; &#123;% if theme.footer.since and theme.footer.since != current %&#125;&#123;&#123; theme.footer.since &#125;&#125; &amp;mdash; &#123;% endif %&#125;&#123;##&#125;&lt;span itemprop=&quot;copyrightYear&quot;&gt;&#123;&#123; current &#125;&#125;&lt;/span&gt; &lt;span class=&quot;with-love&quot;&gt; &lt;i class=&quot;fa fa-&#123;&#123; theme.footer.icon &#125;&#125;&quot;&gt;&lt;/i&gt; &lt;/span&gt; &lt;span class=&quot;author&quot; itemprop=&quot;copyrightHolder&quot;&gt;&#123;&#123; theme.footer.copyright || config.author &#125;&#125;&lt;/span&gt; 接着在自定义custom.styl文件中，添加以下代码：1234567891011121314// 1 页脚加闪烁红心// 自定义页脚跳动的心样式@keyframes heartAnimate &#123; 0%,100%&#123;transform:scale(1);&#125; 10%,30%&#123;transform:scale(0.9);&#125; 20%,40%,60%,80%&#123;transform:scale(1.1);&#125; 50%,70%&#123;transform:scale(1.1);&#125;&#125;#heart &#123; animation: heartAnimate 1.33s ease-in-out infinite;&#125;.with-love &#123; color: rgb(192, 0, 39);&#125; 4. 引入不蒜子访问量和访问人次统计 不蒜子的添加非常非常方便，不蒜子在footer.ejs中的合适位置，看你要显示在哪个地方，添加。 我的办法：D:blog\themes\hexo-theme-next\layout_partials\footer.swg添加代码如下：12345678&lt;!--以下为添加的代码--&gt; &lt;!--统计start--&gt; &lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt; &lt;div class=&quot;powered-by&quot;&gt; &lt;i class=&quot;fa fa-user-md&quot;&gt;&lt;/i&gt;&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt; 本站访客数:&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt; &lt;/span&gt; &lt;/div&gt; 六、文章的美化1. 设置预览摘要在上面我们选主题，设置完模式后，我们会发现，尽管首页显示的是所有文章的列表，但是每一篇文章都显示了所有内容，这样感觉看起来不舒服，这时候可以启用预览摘要模式，在主题配置文件中找到auto_excerpt属性，将enable设置为true ，将length设置为想要预览到的字数。 2. 添加阅读全文 实现在主页只展示部分文字，其他文字隐藏起来，通过点击’阅读更多’来阅读全文。方法就是写每一篇文章的时候，在必要的地方添加即可。例如：1234567891011---title: Github+Hexo搭建你的个人博客：搭建篇id: hexo01categories: hexo博客**tags: [hexo,个人博客,github]**标签的写法keywords: hexo,搭建博客,github pages,next---4块钱,你就能够在茫茫互联网中拥有一处专属于你的小天地，丈量你走过的每一个脚印。 &lt;!-- more --&gt; 摘要： 对于一个不懂任何前端的纯小白来说，搭建博客是件很有挑战的事。3. 文章摘要配图参考这个教程即可：http://wellliu.com/2016/12/30/%E3%80%90%E8%BD%AC%E3%80%91Blog%E6%91%98%E8%A6%81%E9%85%8D%E5%9B%BE/附上我的设置：在自定义文件中添加如下代码：1234567891011121314151617181920212223242526// img.img-topic &#123;// width: 100%;//&#125;//图片外部的容器方框.out-img-topic &#123; display: block; max-height:350px; //图片显示高度，如果不设置则每篇文章的图片高度会不一样，看起来不协调 margin-bottom: 24px; overflow: hidden;&#125;//图片img.img-topic &#123; display: block ; margin-left: .7em; margin-right: .7em; padding: 0; float: right; clear: right;&#125;// 去掉图片边框.posts-expand .post-body img &#123; border: none; padding: 0px;&#125; 4. 修改文章底部的那个带#号的标签 实现效果图具体实现方法修改模板/themes/next/layout/_macro/post.swig，搜索 rel=&quot;tag&quot;&gt;#，将 # 换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 5.添加文章搜索安装插件cnpm install hexo-generator-searchdb --save 站点配置文件 ，添加12345search: path: search.xml field: post format: html limit: 10000 主题配置文件 ，字段local_search123456789# Local search# Dependencies: https://github.com/flashlab/hexo-generator-searchlocal_search: enable: ture # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button trigger: auto # show top n results per article, show all results by setting to -1 top_n_per_article: 1 6. 显示每篇文章的阅读量参考这个教程即可：http://www.jeyzhang.com/hexo-next-add-post-views.html 7. 添加打赏功能 参考下面的教程：https://www.cnblogs.com/mrwuzs/p/7943337.htmlhttps://blog.csdn.net/lcyaiym/article/details/76796545 自定义样式不得不说next还是很人性化的，你可以个性化定制你的网站，你所有的改动（css）需要放在主题文件的source/css/_costum/costum.styl文件中，会覆盖原来的css，所以只要你不想要你修改的样式，只需要删除这个文件夹就可以了，再也不用担心还原不回去了~ 美化每个人的标准不一样，以上是基本操作。这里再补充几条，以供学习。 最全Hexo安装出错案列Hexo美化大全hexo的next主题个性化教程：32中炫酷方式Hexo官方开发文档 找资料发现的一个网站很不错，一看站长是 美女。贴上她的blog，学习一下：sunshine940326 全文完。。。]]></content>
      <categories>
        <category>hexo博客</category>
      </categories>
      <tags>
        <tag>hexo建站</tag>
        <tag>hexo部署</tag>
        <tag>github部署</tag>
        <tag>个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用GitHub和HEXO免费搭建个人博客 基础篇]]></title>
    <url>%2F2019%2F01%2F27%2F%E5%88%A9%E7%94%A8GitHub%E5%92%8CHEXO%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%E5%9F%BA%E7%A1%80%E7%AF%87%2F</url>
    <content type="text"><![CDATA[写在前面 昨天为了搭建博客，硬是愣愣的搞到两点多钟，来来回回装了十几遍还没弄好。今天终于完成了。趁着现在手熟马上写一下博客，强化一下记忆。 前言 前天在逛 虫部落社区 时看到一个帖子。免服务器如何建立个性简约博客 因为好奇建博客还能免费，就点进去看了一下。别说思路还真行的通，重要的是作者还是个高中生。更是厉害了。不过他文章写得太简单，估计很少有人能照他写的做出来。 一、准备这里讲一下搭建博客的好处:我为什么写博客 网上有不少的写作平台，程序员有各种博客站点。业余的也有「知乎」「简书」等平台。不过他们的板式太不够个性化了。身为 90后的你 00后的我怎么能容忍。 拥有自己命名的博客，里面什么内容都是自己决定。写个人随笔，学习心得笔记等，最重要的是足够 酷。 下面简单梳理搭建博客的主要步骤： 安装 node 和 git 软件 安装 Hexo 配置 Hexo 注册 GitHub 并创建 库 且生成 GitHub Pages 配置SSH秘钥 本地的Hexo文件更新到Github的库中 新建第一个博客 相关名词解释：Hexo：一种常用的博客框架，有了它建立博客非常简单。你可以认为它是就是一种博客模板,若想详细了解Hexo的使用，移步 Hexo官方网站 。其作用相当于（以下「相当于」这三个字后面加粗的内容是给有基础的小伙伴看得，不理解的可以跳过不影响阅读）建博客的WordPress。 Github：一个全世界程序猿聚集的知名网站。免费的远程仓库和开源协作社区。我们需要利用网站里的Github Pages功能来托管需发布到网上的博客的相关文件和代码。相当于阿里云腾讯云提供 域名 服务器 提的供商 Git： 一种版本控制系统。我们在自己的本地电脑写博客，如何把博客同步到Github，然后发布到网上去？就需要用这个软件去写几行代码然后就能搞定，后期用的最多的就是它。相当于电脑的操作系统。 Node.js： 提供JavaScript的开发环境，安装好以后就不用跟它再打交道，所以不用太关注它。相当于我们的电脑吧。 把以上步骤熟读至背诵，因为操作过程出现的问题多半是不熟导致的。OK 了解大致步骤我们一起来操作。 操作平台:Win7 64位 其他系统步骤类似 二、安装 node 和 git 软件1.安装node.js进入 Nodejs 官网下载适配自己系统的版本官网：https://nodejs.org/en/download/除了改一下安装路径，其他不懂一路默认就行。 2. 安装git进入官网 Git 选择适配版本下载官网：https://git-scm.com/download/win除了改一下安装路径，其他不懂一路默认就行。PS：git官网下可能下载不了文件。原因：只能讲请遵守我国法律。这里送你个下载方法：访问链接： https://github.com/waylau/git-for-win如果你会翻墙请忽略此方法。 3. 查看安装效果检查以上两个软件是否安装成功。技巧cmd制作电脑桌面最左下方&gt;右击&gt;在搜索程序和文件里输入 cmd 回车 &gt;分别输入以下内容123git versionnode -vnpm -v 输入一次回车一次。将会返回版本号(version)。未返回请重新安装。图示如下：至此，软件安装步骤完成。 三、安装 Hexo 配置 Hexo 安装Hexo 安装npm淘宝源 打开cmd下运行npm install -g cnpm --registry=https://registry.npm.taobao.org安装淘宝源只是为了让接下来的下载地址更换为国内下载链接，试了下载速度和安不安没啥区别。下图里面出现WARN警告，没事下面有版本号出现，就安装成功了。 下载Hexo及其插件在桌面右击，选择Git Bash Herecnpm install hexo-cli -g回车 自动下载hexo安装包cnpm install hexo-deployer-git --save回车 自动下载支持git的插件包ps:如果你没安装第一步的淘宝源请把所有的cnpm换成npm 解压安装配置hexo首先建立一个不在C盘的文件夹，我演示是建在D盘里 D:/blog 在此目录下右击鼠标点击Git Bash Here 进入Git命令框，执行下列操作：hexo init回车 hexo的初始化 相当于解压 cnpm install回车 hexo的安装 hexo generate #回车 构建静态文件 hexo server #回车 启动server 服务其中这两行代码可以合成一行,如下：hexo s -g启动服务后访问http://localhost:4000/，即可查看本地服务器效果 说明：如果提示错误 ctr+c 停止本地服务器生成的网页也就无法访问了。hexo server -p 4000 到此本地服务器设置完成。 四、注册 GitHub 并创建 库 且生成 GitHub Pages1. 第一步：注册或者登陆GIthub账户 已有账号可跳过到第二步Guthub官网：https://github.com/点击sign in完成是可能会有邮件验证。打开输入账号密码验证下就行了。 第二步：创建项目代码库(reposistory) 1.登陆后点击New repository2.配置仓库信息如下图所示：[图片上传失败…(image-2523a0-1548604607943)] 注意：仓库名字的格式为 username(用户名).github.io 与你刚刚注册的最好一样。最下面的 initialize请打上勾。点击 create repository 创建。 3. 第三步开启gh-pages功能 点击github主页点击头像下面的 Your profile,找到新建立的username.github.io文件打开，点击settings，往下拉动鼠标到GitHub Pages。点击选择choose a theme，随便选择一个，（之后我们要更改这些丑陋的模板），然后select theme保存就行了。ps:第三步可以不做，因为下面链接本地和GitHub页面时，会覆盖掉。写在这里熟悉一下，顺便练练手。上面注册账号很像买域名，创建库就是买服务器，生成静态页面就是两者的绑定。至此，服务器也完成了配置。 五、配置SSH密钥到上面我们已经完成了一大半了。现在让我们电脑上生成的页面放GitHub上，上网输入网址就能看到我们的网址页面内容了。但首先的让它们认识一下。我称之为「握手」，也就是这里的「秘钥」，让它们打开彼此的大门。 第一步 看看是否存在SSH密钥(keys) 检查本机用户home目录下是否存在.ssh目录，防止万一两人提前认识，我们不是瞎忙活了吗！桌面右击，打开Git Bash,并运行:cd ~/.ssh返回：bash: d:command ont found这种简单的英语不用解释了吧。没有，紧接着我们创建秘钥。 第二步 创建一对新的SSH密钥(keys) 继续输入下面代码：ssh-keygen -t rsa -C &quot;your_email@example.com&quot;这将按照你提供的邮箱地址，创建一对密，「your_email@example.com」里面是你的电子邮件地址。连续回车三次，你会看到如下代码1234Generating public/private rsa key pair.Enter file in which to save the key (/c/Users/you/.ssh/id_rsa):Enter passphrase (empty for no passphrase): Enter same passphrase again: 第一行问你是否创建公钥；第二行文件存储位置，不手动输入，默认方式存储；第三行输入密码；第四行密码确认。我们并没输入，因为没密码才是最安全的。其实是因为没用。哈哈哈。这里还要复制一下秘钥，留着第三步粘贴用，两种方法： 使用物理路径 根据上图 /c/Users/you/.ssh/id_rsa路径找到文件使用文本编辑器打开复制。 代码方法 运行如下命令，会将公钥的内容复制到系统粘贴板(clipboard)中。clip &lt; ~/.ssh/id_rsa.pub第三步 GitHub写入密钥(keys) 打开Github官网登录后点击头像，打开Settings设置这里面title 是自己随便起的名字， key里面粘贴第二步复制的秘钥，然后点击添加第四步 测试是否添加秘钥成功继续写入代码：ssh -T git@github.com回车后根据提示输入yes后会得到以下信息，在最后一行看到「Hi username」username你的用户名，说明ssh配置成功12345The authenticity of host &apos;github.com (192.30.255.113)&apos; can&apos;t be established.RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added &apos;github.com,192.30.255.113&apos; (RSA) to the list of known hosts.Hi condorheroblog! You&apos;ve successfully authenticated, but GitHub does not provide shell access. 第五步 设置用户信息现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。 Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字根据自己的喜好自己取，而不是GitHub的昵称。分别输入回车：12git config --global user.name &quot;username&quot;//用户名git config --global user.email &quot;youremail@163.com&quot;//填写自己的邮箱 电脑发去GitHub握手成功。几下下一个握手。 六、本地的Hexo文件更新到Github的库中 登陆GitHub打开自己的项目 username.github.io 复制Github项目仓库地址，即点击clone or download 绿色按钮，然后复制文本框里的url地址 修改hexo配置文件 _config.yml在我们创建D盘里的blog目录下找到_config.yml文件，然后右击用文本编辑器进行修改，打开直接滑到最后，进行替换或手写都行。其中repo后跟的是Github里复制的地址。1234deploy: type: git repo: https://github.com/condorheroblog/condorheroblog.github.io.git branch: master 注意：repo冒号后面一定要是英文的一个空格，我就在这出错了。 将hexo部署到Github在本地blog目录下右击打开Git Bash，输入一下命令：hexo g -d命令执行后，会提示输入Github的账号和密码，输入登陆后，blog项目会自动部署到Github上。假如这时候，报错 ERROR Deployer not found: git，那么就是你的deployer没有安装成功，你需要执行如下命令再安装一次：cnpm install hexo-deployer-git --save这样，你再执行hexo g -d，你的博客就部署到Github上了。 访问博客以上操作完成后，我们的博客就会部署到Github上了，我们只需要输入username.github.io就可以访问自己的博客了。七、新建第一个博客 接下来你可以自己新建一个文档来写下你的第一篇博客并在网页上测试。 同样在根目录D:\blog中右击git Bash here运行下面命令： hexo new 第一篇博客注：第一篇博客是名称可以随便修改然后打开D:\blog\source_posts文件夹，就可以看到一个第一篇博客.md的文件。也可以直接在D:\blog\source_posts中新建一个md文件，我就是这么做的。用支持markdown语法的软件打开该文件进行编辑即可。执行以下命令即可在我们的站点看到新的文章。hexo clean #清除缓存hexo g #生成文件夹hexo d#部署 # hexo d与hexo g可合并为 hexo d -g更多hexo命令参考hexo官方文档然后，在网址中输入username.github.io即可看到你的博客上，出现第一篇博客这篇新的文章。 至此，你的个人博客初步搭建过程就完成了。 以上就是建博客的基本流程，基本上装个十几二十遍就熟了。下次写高级篇，进行博客美化。]]></content>
      <categories>
        <category>hexo博客</category>
      </categories>
      <tags>
        <tag>hexo建站</tag>
        <tag>hexo部署</tag>
        <tag>github部署</tag>
        <tag>个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[无缝连续滚动原理的实现]]></title>
    <url>%2F2019%2F01%2F20%2F%E6%97%A0%E7%BC%9D%E8%BF%9E%E7%BB%AD%E6%BB%9A%E5%8A%A8%E5%8E%9F%E7%90%86%E7%9A%84%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[原理剖析：页面上图片复制一倍在后面，长长的火车在移动：当你赋值的后半段火车的0号头贴到了盒子的左边框的时候，那么就瞬间移动到原点，重新执行动画：实现步骤： HTML CSS知识构建静态页面 逻辑实现使用绝对定位 JS定时器轮播 代码的实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;无缝连续滚动的实现&lt;/title&gt; &lt;style&gt; *&#123; margin: 0; padding: 0; &#125; .rolling&#123; width: 800px; height: 130px; border: 10px solid #ccc; margin: 100px auto; position: relative; overflow: hidden; &#125; .rolling .m_unit&#123; width: 5000px; /*这是运动的单位，这个宽度随便取，大一点，最少的大于rolling小于运动盒子的内容*/ position: absolute; top: 0; left: 0; &#125; .rolling ul&#123; list-style: none; &#125; .rolling ul li&#123; float: left; margin-right: 10px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;rolling&quot; id=&quot;rolling&quot;&gt; &lt;div class=&quot;m_unit&quot; id=&quot;m_unit&quot;&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;images/shuzi/0.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;images/shuzi/1.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;images/shuzi/2.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;images/shuzi/3.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;images/shuzi/4.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;images/shuzi/5.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;images/shuzi/6.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;images/shuzi/7.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;script&gt; //得到元素 var rolling = document.getElementById(&quot;rolling&quot;); var m_unit = document.getElementById(&quot;m_unit&quot;); var listul = m_unit.getElementsByTagName(&quot;ul&quot;)[0]; //得到图片的数量，计算折返点用的，折返点就是210 * 图片数量 var lislength = listul.getElementsByTagName(&quot;li&quot;).length; //复制一倍的li 最笨的办法直接把 li 在写一遍 listul.innerHTML += listul.innerHTML; //信号量 var nowleft = 0; var timer; //默认调用move move(); //鼠标进入 rolling.onmouseover = function()&#123; clearInterval(timer); &#125; //鼠标离开 rolling.onmouseout = function()&#123; move(); &#125; function move()&#123; //运动 timer = setInterval(function()&#123; nowleft -= 3; if(nowleft &lt; -210 * lislength)&#123; nowleft = 0; &#125; m_unit.style.left = nowleft + &quot;px&quot;; &#125;,10); &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 滚动的回拉位置的设置方式： 直接计算写常量，太死板。 等宽，计算个数。可适应 图片个数不同。案例即是这种。思考： 如果图片不等宽，长短不一怎么办？ 解决方法有两个：方法1：遍历前半部分（复制一倍之前）所有的li，把所有的li的宽度累加，累加之后就是折返点。offsetWidth，这个东西不带margin。所以累加的时候，有需要得到计算后的margin十分麻烦。所以我们不考虑方法1。方法2：我们发现，折返点就是复制的假火车第1张图的offsetLeft值。所以，如果原来的li的个数是lilength，那么假火车的第1张图就是lis[length]。 先讲教训：但是写完发现效果不对，未能达到如期预料。原因 Google 浏览器会把图片延迟加载，以达到最快网络体验。解决办法： 添加 window,onload()设置页面加载完，再加载 js 效果。 添加 img.onload() 事件。 考虑到页面只有一个 onload，这里选择第二个办法。主要程序修改如下：1234567891011for(var i = 0 , count = 0 ; i &lt; imgs.length ; i++)&#123; imgs[i].onload = function()&#123; count++; if(count == imgs.length)&#123; //所有图片加载完毕了，就有折返点了： zhefandian = lis[lislength / 2].offsetLeft; //所有图片加载完毕了，再开始运动 move(); &#125; &#125; &#125; type12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455 //得到元素 var rolling = document.getElementById(&quot;rolling&quot;); //大盒子 var m_unit = document.getElementById(&quot;m_unit&quot;); //运动单位 var listul = m_unit.getElementsByTagName(&quot;ul&quot;)[0]; //ul var imgs = listul.getElementsByTagName(&quot;img&quot;); //img //图片的原来数量 var zhefandian; //折返点 //复制一倍的li listul.innerHTML += listul.innerHTML; //得到所有li，包括新li var lis = listul.getElementsByTagName(&quot;li&quot;); //所有li的个数，包括新li var lislength = lis.length; //现在我们要计算折返点，但是每个li的宽度都不一样，所以现在假火车的开头元素的offsetLeft就是折返点。这个元素是lis[lislength / 2];比较麻烦的是，由于Chrome的机理，如果要读取offsetLeft值必须保证所有图片加载完毕。 for(var i = 0 , count = 0 ; i &lt; imgs.length ; i++)&#123; imgs[i].onload = function()&#123; count++; if(count == imgs.length)&#123; //所有图片加载完毕了，就有折返点了： zhefandian = lis[lislength / 2].offsetLeft; //所有图片加载完毕了，再开始运动 move(); &#125; &#125; &#125; //信号量 var nowleft = 0; var timer; //鼠标进入 rolling.onmouseover = function()&#123; clearInterval(timer); &#125; //鼠标离开 rolling.onmouseout = function()&#123; move(); &#125; function move()&#123; clearInterval(timer); //运动 timer = setInterval(function()&#123; nowleft -= 5; if(nowleft &lt; -zhefandian)&#123; nowleft = 0; &#125; m_unit.style.left = nowleft + &quot;px&quot;; &#125;,20); &#125;&lt;/script&gt; 小tip:因页面加载图片有延迟，可以给页面添加一个加载背景，一个 GIF 图片的背景。]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>连续滚动图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript的定时器 setInterval]]></title>
    <url>%2F2019%2F01%2F15%2FJavaScript%E7%9A%84%E5%AE%9A%E6%97%B6%E5%99%A8setInterval%2F</url>
    <content type="text"><![CDATA[一、 定时器window对象有一个方法，叫做 window.setInterval(函数，间隔时间); 能够使每间隔时间，调用函数一次。我们习惯叫做定时器，按理说叫做“间隔器”。单词： interval 间隔的意思 演示：控制台间隔一定时间输出随机数1234567891011121314&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;间隔&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;script&gt; window.setInterval(function()&#123; console.log(Math.random()); &#125;,1000)； &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 间隔时间是以毫秒为单位，1000毫秒就是1秒。 “毫”就是千分之一， “厘”就是百分之一， “分”就是十分之一 第一个参数，是一个函数，所以可以把一个匿名函数往里放，更可以用一个有名函数的引用放里面。1234function fun()&#123; console.log(Math.random()); &#125; window.setInterval(fun,1000); setInterval() 能够让函数每间隔时间执行。window 对象，可以不写。定时器没有所谓的start、begin方法，只要setInterval了，定时器就开始运行了。 二、简单运动模型视觉暂留：把连续相关的画面，连续播放，就是运动了。动画片的基础书角动画了解一下。123456789101112131415161718192021222324252627282930313233&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;定时器&lt;/title&gt; &lt;style&gt; div&#123; width: 100px; height: 100px; background-color: #EE0; position: absolute; left: 100px; top: 100px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;box&quot;&gt;&lt;/div&gt; // 定义一个盒子 &lt;script&gt; var box=document.getElementById(&quot;box&quot;); //获取元素 var nowleft = 100; //定义信号量 function move()&#123; nowleft += 20; //增加信号量 if(nowleft &gt; 500)&#123; nowleft = 100; //设置运动宽度100~500 &#125; box.style.left=nowleft+&quot;px&quot;; //改变位置 &#125; setInterval(move,100); //定时器间隔100ms &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 间隔时间是20毫秒，那么1秒中执行函数50次。也就是说，这个动画是每秒50帧，50 fps。 那么现在我们来研究一个事儿，如果让这个盒子跑得更快？（-1最快）上面的案例中，数值20间隔时间，这个数字越小运动越快；数值10叫做步长，每一步的变化量，这个数字越大运动越快。 我们就有一个感觉，JavaScript描述动画，描述的是每一步的改变，并不是直接描述终点。 三、定时器的停止123456789101112131415161718192021222324252627282930313233343536373839404142 &lt;style type=&quot;text/css&quot;&gt; div&#123; width: 80px; height: 80px; background-color: gold; position: absolute; top: 111px; left: 111px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;input type=&quot;button&quot; value=&quot;开始&quot;/&gt; &lt;input type=&quot;button&quot; value=&quot;暂停&quot;/&gt; &lt;div id=&quot;box&quot;&gt;&lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; //得到盒子和按钮 var oDiv = document.getElementById(&quot;box&quot;); var startBtn = document.getElementsByTagName(&quot;input&quot;)[0]; var pauseBtn = document.getElementsByTagName(&quot;input&quot;)[1]; //信号量 var nowleft = 111; var timer; //存放定时器的引用的下面有引用必须全局变量 //监听开始按钮 startBtn.onclick = function()&#123; //设表先关 clearInterval(timer); //设置定时器 timer = setInterval(function()&#123; nowleft += 2; oDiv.style.left = nowleft + &quot;px&quot;; &#125;, 20); &#125; //监听停止按钮 pauseBtn.onclick = function()&#123; //清除定时器 clearInterval(timer); &#125; &lt;/script&gt; setInterval 的时候，要给这个定时器一个变量引用，停止的时候只需要clearInterval(timer); 知识点：设表先关当我们每点一次开始，都是给定时器加速一次，发现盒子越来越快。解决办法给表设置结束重新开始。 我们的开始按钮是：1234567startBtn.onclick = function()&#123; //设置定时器 timer = setInterval(function()&#123; nowleft += 2; oDiv.style.left = nowleft + &quot;px&quot;; &#125;, 20);&#125; 这个按钮持续点击，盒子运动越来越快。这是因为每次点击，盒子身上就有更多的定时器在作用。解决办法，就是四个字的口诀“设表先关”。123456789startBtn.onclick = function()&#123; //设表先关 clearInterval(timer); //设置定时器 timer = setInterval(function()&#123; nowleft += 2; oDiv.style.left = nowleft + &quot;px&quot;; &#125;, 20);&#125; 还要注意一个事情：当盒子到终点，自己停止。比如起点是100，终点我们想要600自动停止：下面的方法是错误的：12345678var timer = setInterval(function()&#123; if(nowleft &lt; 600)&#123; nowleft += 13; oDiv.style.left = nowleft + &quot;px&quot;; &#125;else&#123; clearInterval(timer); &#125;&#125;,200); 初始值是100，所以盒子的运动轨迹就是100、113、126……594、607停表所以盒子停下来的位置，不是我们想要的600，而是607 所以解决办法，就是验收、拉回终点、停表：“拉终停表”123456789var timer = setInterval(function()&#123; nowleft += 7; if(nowleft &gt; 600)&#123; nowleft = 600; clearInterval(timer); &#125; oDiv.style.left = nowleft + &quot;px&quot;; console.log(nowleft);&#125;,20);]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>定时器</tag>
        <tag>setInterval</tag>
        <tag>clearInterval</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript offset使用]]></title>
    <url>%2F2019%2F01%2F13%2FJavaScript%20offset%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[一、快捷位置和尺寸DOM已经提供给我们计算后的样式，但是还觉得不方便，所以DOM又提供给我们一些API： ele.offsetLeft ele.offsetTop ele.offsetWidth ele.offsetHeight ele.clientWidth ele.clientHeight 1.1 offsetLeft属性和offsetTop属性这两个属性的兼容性非常差，不要着急，我们慢慢来看。 IE9、IE9+、Chrome等高级浏览器： 一个元素的offsetLeft值，就是这个元素左边框外，到自己的offsetParent对象的左边框内的距离。 每一个元素，天生都有一个属性，叫做offsetParent，表示自己的“偏移参考盒子”，我们不称呼中文，就叫offsetParent。这个offsetParent是谁呢？ 就是自己祖先元素中，离自己最近的已经定位的元素，如果自己的祖先元素中，没有任何盒子进行了定位，那么offsetParent**对象就是body**。 IE6、IE7： IE6、7的offsetParent对象是谁，和高级浏览器有非常大的不同。 情形1：自己如果没有定位属性，那么自己的offsetParent对象就是自己的祖先元素中离自己最近的有width或者有height的元素：1234567&lt;div class=&quot;box1&quot;&gt; &lt;div class=&quot;box2&quot;&gt; → 你好，我有宽度 , offsetParent &lt;div class=&quot;box3&quot;&gt; → 你好，我没有宽高 &lt;p&gt;&lt;/p&gt; → 你好，我没有定位 &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 1234567&lt;div class=&quot;box1&quot;&gt; &lt;div class=&quot;box2&quot;&gt; &lt;div class=&quot;box3&quot;&gt; → 你好，我没有宽高，有定位 , offsetParent &lt;p&gt;&lt;/p&gt; → 你好，我没有定位 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; 情形2：自己如果有定位属性 那么自己的offsetParent就是自己祖先元素中离自己最近的有定位的元素。 数值就是自己的左外边框到offsetParent对象的左内边框的值。 IE8： IE8的offsetParent是谁呢？和高级浏览器一致： 无论自己是否定位，自己的offsetParent就是自己祖先元素中，离自己最近的已经定位的元素。 这一点，没有任何兼容问题！ 但是，多算了一条边框 总结： 名称| IE6、7| IE8|IE9、IE9+、高级浏览器|:—:|:—:|:—:|:—:|offsetParent|如果自己没有定位，那么就是自己父亲中有width或者有height或者有定位的元素如果自己有定位，那么就是和高级浏览器一致。|和高级浏览器一致|自己祖先元素中，离自己最近的已经定位的元素|offsetLeft|和高级浏览器一致|多算一条border|自己的border外到offsetParet对象的border内| 兼容性解决办法，不是能力检测，也不是版本检测，而是善用这个属性，要确保属性的使用条件： 自定位，父无边**(父亲也要定位，但是为了顺口，就不多说了)** 这样的话，所有浏览器的值都是一样的，offsetLeft、offsetTop值是number类型的，可以直接参与运算，不需要parseInt() 1.2 offsetWidth和offsetHeight全线兼容，是自己的属性，和别的盒子无关。 一个盒子的offsetWidth值就是自己的 width+左右padding+左右border的宽度 如果盒子没有宽度，那么所有浏览器都将把px值当做offsetWidth，而不是100%； 如果盒子没有高度，用文字撑的，所有浏览器都将把px值当做offsetHeight 总结一下，全线兼容。 特别注意，IE6、7、8下，盒子没有高度，文字撑的，用currentStyle.height是auto。体现出了offsetHeight的好用。 1.3 clientWidth和clientHeight全线兼容，就一丢丢IE6的问题 client表示“客户端”这里就是一个名字而已，不用在意这个名字。 clientWidth就是自己的width+padding的值。 也就是说，比offsetWidth少了border。 如果盒子没有宽度，那么那么所有浏览器都将把px值当做clientWidth，而不是100% 如果盒子没有高度，用文字撑的，IE6 clientHeight**是0**，其他浏览器都是数值。 总结一下，我们的6个属性要铭记于心，就offsetLeft、offsetTop比较闹腾，但是合理使用，也没兼容问题了。]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>offsetLeft</tag>
        <tag>offsetTop</tag>
        <tag>offsetWidth</tag>
        <tag>offsetHeight</tag>
        <tag>clientWidth</tag>
        <tag>clientHeight</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正则表达式方法应用]]></title>
    <url>%2F2018%2F10%2F09%2F%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%96%B9%E6%B3%95%E5%BA%94%E7%94%A8%2F</url>
    <content type="text"><![CDATA[涉及正则表达式的方法： 字符串的方法“abc” match(); search(); replace(); 正则表达式/\d/. exec(); test();一、字符串的方法1.match方法match的哲学，说白了就是我们最正统的正则，在茫茫多的字符串中，拿到我们想要的东西。例如：拿到所有数字1234var str = &quot;今年是2019年的新年，我拿到了2000红包，但钱包却为-4.5元，最遗憾的是又涨了一岁。&quot;;var reg = /-?\d+\.?\d*/g;var array = str.match(reg);console.log(array); 正则表达式没有 g 修饰符，match 和 exec 结果完全一样。都是类数组对象123456var str = &quot;ABCDEFG1234567abcdefg&quot;;var reg = /[A-Z]/;var array1 = str.match(reg);var array2 = reg.exec(str); console.log(array1); //[&quot;A&quot;, index: 0, input: &quot;ABCDEFG1234567abcdefg&quot;] console.log(array2); //[&quot;A&quot;, index: 0, input: &quot;ABCDEFG1234567abcdefg&quot;] 正则表达式有g修饰符，match会罗列所有结果，返回纯数组1234var str = &quot;34234fafafdDGSFGSE&quot;; var reg = /[a-z]g/; var array = str.match(reg); console.log(array); //[&quot;f&quot;, &quot;a&quot;, &quot;f&quot;, &quot;a&quot;, &quot;f&quot;, &quot;d&quot;] match能不能分组捕获呢？能！()就是分组捕获，\1 就表示这第一个捕获，\2 就是第二个位置的捕获。12345678910111213141516171819 var str = &quot;154-344-133-876-876-555-534&quot;; var reg = /(\d&#123;3&#125;)\-\1/g; var array = str.match(reg); console.log(array);//应用此例子寻找连续相同子串 var str = &quot;ABCCCDDDDDEFFFFFFFFFFFFGGGGHHIIII&quot;; var reg = /(\w)\1+/g; var array = str.match(reg); // 输出最大的相同子串var maxLength = 0;var maxchar = &quot;&quot;;for (var i = 0; i &lt; array.length; i++) &#123; if(array[i].length &gt; maxLength)&#123; maxLength = array[i].length; maxchar = array[i]; &#125; &#125;;console.log(maxchar); 2.search方法返回的是符合正则表达式的第一个位置12345678910var str = &quot;ABCDEFG122234555567abcdefg&quot;;var reg = /(\w)\1+/g; //重复的字母、数字var number = str.search(reg);console.log(number);//search就是能用正则式的 indexOf。// var str = &quot;ABCDEFG122234555567abcdefg&quot;;// console.log(str.indexOf(&quot;FG&quot;)); 3.replace方法replace就是替换，但只会换一个，寻找到第一个匹配的，就不再往后匹配了。123456789var str = &quot;今天看了港剧《大时代》，蓝洁瑛演的真好。很喜欢蓝洁瑛，我要让蓝洁瑛做我女朋友。&quot;var str = str.replace(&quot;蓝洁瑛&quot;,&quot;小犹太&quot;);console.log(str); //今天看了港剧《大时代》，小犹太演的真好。很喜欢蓝洁瑛，我要让蓝洁瑛做我女朋友。//=======================//replace第一个参数可以是正则表达式，g就是全局替换。var str = &quot;今天看了港剧《大时代》，蓝洁瑛演的真好。很喜欢蓝洁瑛，我要让蓝洁瑛做我女朋友。&quot;var str = str.replace(/蓝洁瑛/g,&quot;小犹太&quot;);console.log(str); //今天看了港剧《大时代》，小犹太演的真好。很喜欢小犹太，我要让小犹太做我女朋友。 replace函数用法，第二个参数是一个函数。如果replace函数的第二个参数是一个函数，那么每次匹配到正则的时候，就会调用一次这个函数，这个函数天生有参数 return 的值就是要替换的值12345678var str = &quot;今天看了港剧《大时代》，蓝洁瑛演的真好。很喜欢蓝洁瑛，我要让蓝洁瑛做我女朋友。&quot; str = str.replace(/蓝洁瑛/g,function(a,b,c)&#123; return &quot;小犹太&quot;; //a 参数就是匹配上的字符串 //b 参数就是匹配上的字符串的下标 //c 参数就是源字符串 &#125;); console.log(str); replace能动态替换123456var str = &quot;今年是2019年的新年，我拿到了200元红包，但钱包却为40元，最遗憾的是又涨了1岁。&quot;; str = str.replace(/\d+元/g,function(a)&#123; return &quot;$&quot; + Math.round((parseInt(a) / 6) * 100) / 100;&#125;);console.log(str); Math.round的用法： Math.round(2.5); 输出结果为 3 四舍五入取整问：求 6.888精确到小数点后两位？Math.round(6.888); 结果：7正解思路：先扩大100倍，求完在缩小100倍。console.log(Math.round(6.888*100)/100); replace分组，直接在替代字符串中就用 $1 和 $2 来表示捕获的东西1234 //交换单词位置var str = &quot;First Second&quot;;str = str.replace(/(\w+)\s(\w+)/,&quot;$2 $1&quot;);console.log(str); replace 里面function的用法12345678var str = &quot;First Second&quot;;str = str.replace(/(\w+)\s(\w+)/,function(match,$1,$2,index,str)&#123; console.log(match); console.log($1); console.log($2); console.log(index); console.log(str); &#125;); 一个模板引擎，瀑布流123456789101112131415161718192021222324252627//Json 对象// var obj = &#123;// a : 1 , // b : 2 , // c : 3// &#125;;// console.log(obj.b);// console.log(obj[b]);//================================var dictionary = &#123; xingming : &quot;考拉&quot;, nianling : &quot;18&quot;, xingbie : &quot;女&quot;, nvyougeshu : 500&#125;var str = &quot;大家好，我叫★xingming★，我今年★nianling★岁了,我是个可爱的★xingbie★生,我的女朋友有★nvyougeshu★个&quot;str = str.replace(/★(\w+)★/g,function(match,$1)&#123; return dictionary[$1];&#125;);console.log(str); 二、正则表达式的方法1.exec方法exec 每次执行结果按序输出，不管结果有几个，一次只输出一个123456789var str = &quot;ABCDEFG1234567abcdefg&quot;;var reg = /[a-z]/g; console.log(reg.exec(str));//遍历所有结果：var a;while((a = reg.exec(str)) != null)&#123; //为什么是null？ 遍历完出现 null 又再一次循环遍历。 console.log(a);&#125; 求最大相同子串，比较exec 和 match 的不同exec哲学，就是match的反面，match能把所有结果在数组中输出, exec 是将所有结果通过 while() 迭代输出,省的你先弄出一个array，然后for遍历，还不如就一个一个遍历.123456789101112131415var str = &quot;qqqqqqq1111111111AAAAAAABBBBBBBB&quot;;var reg = /(\w)\1+/g;var maxl = 0;var maxc = &quot;&quot;;var a;while((a = reg.exec(str)) != null)&#123; if(a[0].length &gt; maxl)&#123;//a[0].length类数组对象，指代本身。 maxl = a[0].length; maxc = a[0]; &#125;&#125;console.log(maxc); 1.test方法表单验证最最常用的东西一个模拟表单验证实例：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;match&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form action=&quot;bbb.php&quot; id=&quot;biaodan&quot;&gt; &lt;p&gt; 请输入姓名： &lt;input type=&quot;text&quot; id=&quot;xingming&quot; /&gt; &lt;/p&gt; &lt;p&gt; 请输入年龄： &lt;input type=&quot;text&quot; id=&quot;nianling&quot;/&gt; &lt;/p&gt; &lt;p&gt; 请输入手机号码： &lt;input type=&quot;text&quot; id=&quot;shoujihao&quot;/&gt; &lt;/p&gt; &lt;p&gt; 请输入邮箱： &lt;input type=&quot;text&quot; id=&quot;youxiang&quot;/&gt; &lt;/p&gt; &lt;p&gt; &lt;input type=&quot;submit&quot; /&gt; &lt;/p&gt; &lt;/form&gt; &lt;script type=&quot;text/javascript&quot;&gt; //得到表单 var biaodan = document.getElementById(&quot;biaodan&quot;); var xingming = document.getElementById(&quot;xingming&quot;); var nianling = document.getElementById(&quot;nianling&quot;); var shoujihao = document.getElementById(&quot;shoujihao&quot;); var youxiang = document.getElementById(&quot;youxiang&quot;); //表单试图提交的时候，触发onsubmit事件 //这个函数返回了false,表单不会被提交 biaodan.onsubmit = function()&#123; //验证各种 //验证姓名 if(!/^[\u4e00-\u9fa5]&#123;2,4&#125;$/.test(xingming.value))&#123; alert(&quot;错误的姓名&quot;); return false; &#125; if(!/^\d&#123;1,3&#125;$/.test(nianling.value))&#123; alert(&quot;错误的年龄&quot;); return false; &#125; if(parseInt(nianling.value) &lt; 10 || parseInt(nianling.value) &gt; 104)&#123; alert(&quot;年龄不在范围!&quot;); return false; &#125; if(!/^\d&#123;11&#125;$/.test(shoujihao.value))&#123; alert(&quot;错误的手机号&quot;); return false; &#125; return true; &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>正则表达式方法</category>
      </categories>
      <tags>
        <tag>正则表达式方法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算后样式,window.getComputedStyle(),getPropertyValue(),fetchComputerStyle]]></title>
    <url>%2F2018%2F03%2F09%2F%E8%AE%A1%E7%AE%97%E5%90%8E%E6%A0%B7%E5%BC%8Fwindow.getComputedStyle()%E5%92%8CgetPropertyValue()%2F</url>
    <content type="text"><![CDATA[1. 高级浏览器和低级浏览器的不同写法现在我们只能得到行内的样式，事实上DOM提供了可靠的API，得到计算后的样式。 W3C制定的标准API，所有现代浏览器（包括IE9，但不包括之前的版本）都实现了window.getComputedStyle()，该方法接收一个要进行样式计算的元素，并返回一个样式对象。样式对象提供了一个名为 getPropertyValue() 的方法，用于检索特定样式属性的计算样式。getPropertyValue方法接收css属性名称，而不是驼峰式的名称。getPropertyValue()可以不写，直接用方括号来检索属性也可以。 get得到，computed计算，style样式 get得到，property属性，vaule值 比如： window.getComputedStyle(Div_box).getPropertyValue(&quot;width&quot;);一个小知识，所有window对象的方法，都可以不用写window。得到计算后的样式，可以直接使用 getComputedStyle 函数，而不用写window。getComputedStyle(oDiv).getPropertyValue(&quot;width&quot;)还要注意，引号里面不是驼峰： getComputedStyle(oDiv).getPropertyValue(&quot;**padding-left**&quot;);getPropertyValue可以简写：getComputedStyle(oDiv)[&quot;padding-left&quot;];计算后样式是综合的结果，就是这个元素此时的状态：现在有css：background: url(images/songhuiqiao.jpg) no-repeat 10px 10px;虽然没有显式指定background-position，但是有值： getComputedStyle(oDiv)[&quot;background-position&quot;] // 10px 10px;DOM提供给JS的API非常牛叉，一个元素此时的状态，完完全全可以被得到。 好用的东西，一定不兼容。所以IE6、7、8不兼容getComputedStyle.getPropertyValue()的写法，另外一套写法：附加在元素身上的currentStyle属性，它表现和style点语法一样，使用驼峰式访问。oDiv.currentStyle.width现在要注意，它必须使用驼峰： oDiv.currentStyle.paddingTopIE6、7、8不能被文字撑出高，得到”auto”这个值。颜色值在高级浏览器中是rgb()格式，低级浏览器中就是原样输出。超级无敌大坑，可以不写点语法，可以使用方括号，但是里面也要写驼峰。oDiv.currentStyle[&quot;paddingLeft&quot;]总结写法： 高级：window.getComputedStyle(oDiv).getPropertyValue(“padding-left”);getComputedStyle(oDiv).getPropertyValue(“padding-left”);getComputedStyle(oDiv)[“padding-left”]; IE6、7、8：oDiv.currentStyle.paddingLeft;oDiv.currentStyle[“paddingLeft”];3.2 能力检测 IE不认识getComputedStyle视为错误 Chrome不认识currentStyle视为错误所以，我们现在就要进行一个兼容性写法。 新玩家会认为，要检测浏览器版本，如果 版本是IE6、7、8 那么……。实际上，老司机都不这么做。直接判断，这就是能力检测。 12345if(window.getComputedStyle)&#123;alert(&quot;我会getComputedStyle&quot;);&#125;else&#123; alert(&quot;我不会getComputedStyle&quot;) &#125; 所以使用能力检测，我们可以在不同浏览器中得到兼容性的写法，输出padding-left的值：12345 if(window.getComputedStyle)&#123; alert(getComputedStyle(oDiv)[&quot;padding-left&quot;]); &#125;else&#123; alert(oDiv.currentStyle.paddingLeft);&#125; 3. fetchComputedStyle(obj,property);现在我们要在一个轮子，就是封装一个函数，这个函数接收两个参数，第一个是对象，第二个是属性名。fetchComputedStyle(obj,”padding-left”);这个函数返回的是这个属性值的计算后的样式。无论用户输入的是驼峰还是非驼峰，都能正常运行。下例：通过fetchComputedStyle调取getComputedStyle计算getPropertyValue属性值。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;fetchComputedStyle(obj,property)&lt;/title&gt; &lt;style&gt; div&#123; padding: 10px 20px 30px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; //fetchComputedStyle(oDiv,”padding-left”); function fetchComputedStyle(obj , property)&#123; //能力检测 if(window.getComputedStyle)&#123; //现在要把用户输入的property中检测一下是不是驼峰，转为连字符写法 //强制把用户输入的词儿里面的大写字母，变为小写字母加- //paddingLeft → padding-left property = property.replace(/([A-Z])/g , function(match,$1)&#123; return &quot;-&quot; + $1.toLowerCase(); &#125;); return window.getComputedStyle(obj)[property]; &#125;else&#123; //IE只认识驼峰，我们要防止用户输入短横，要把短横改为大写字母 //padding-left → paddingLeft property = property.replace(/\-([a-z])/g , function(match,$1)&#123; return $1.toUpperCase(); &#125;); return obj.currentStyle[property]; &#125; &#125; var oDiv = document.getElementsByTagName(&quot;div&quot;)[0]; alert(fetchComputedStyle(oDiv,&quot;padding-left&quot;)); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>计算后样式</tag>
        <tag>window.getComputedStyle()</tag>
        <tag>getPropertyValue()</tag>
        <tag>fetchComputerStyle</tag>
      </tags>
  </entry>
</search>
